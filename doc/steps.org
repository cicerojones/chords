#+STARTUP:  indent
* follow Heroku tutorial
** preliminaries
*** with a repl started
**** "resolve" the jdbc namespace
#+BEGIN_SRC clojure
(require '[clojure.java.jdbc :as sql])
#+END_SRC

#+RESULTS:
: nil
**** load data from a local file
#+BEGIN_SRC clojure
(load "data/set_class_data")
;; (first *tetrachords*) ;(0 1 2 3)
;; (first post_tonal_overtone.data.set_class_data/tetrachords-tn)
#+END_SRC
*** load data from babel
**** test def-ing dyads as constant
#+BEGIN_SRC clojure
(def ^:const dyads-tn '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))
#+END_SRC

#+BEGIN_SRC clojure
(rand-nth dyads-tn)
#+END_SRC
#+RESULTS:
| 0 | 2 |
**** def all sets into the current (user?) ns
***** as lists
#+BEGIN_SRC clojure
(def ^:const dyads-tn '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))

(def ^:const trichords-tn '((0 1 2) (0 1 3) (0 2 3) (0 1 4) (0 3 4) (0 1 5) (0 4 5) (0 1 6) (0 5 6) (0 2 4) (0 2 5) (0 3 5) (0 2 6) (0 4 6) (0 2 7) (0 3 6) (0 3 7) (0 4 7) (0 4 8)))

(def ^:const tetrachords-tn '((0 1 2 3)
			   (0 1 2 4)
			   (0 2 3 4)
			   (0 1 3 4)
			   (0 1 2 5)
			   (0 3 4 5)
			   (0 1 2 6)
			   (0 4 5 6)
			   (0 1 2 7)
			   (0 1 4 5)
			   (0 1 5 6)
			   (0 1 6 7)
			   (0 2 3 5)
			   (0 1 3 5)
			   (0 2 4 5)
			   (0 2 3 6)
			   (0 3 4 6)
			   (0 1 3 6)
			   (0 3 5 6)
			   (0 2 3 7)
			   (0 4 5 7)
			   (0 1 4 6)
			   (0 2 5 6)
			   (0 1 5 7)
			   (0 2 6 7)
			   (0 3 4 7)
			   (0 1 4 7)
			   (0 3 6 7)
			   (0 1 4 8)
			   (0 3 4 8)
			   (0 1 5 8)
			   (0 2 4 6)
			   (0 2 4 7)
			   (0 3 5 7)
			   (0 2 5 7)
			   (0 2 4 8)
			   (0 2 6 8)
			   (0 3 5 8)
			   (0 2 5 8)
			   (0 3 6 8)
			   (0 3 6 9)
			   (0 1 3 7)
			   (0 4 6 7)))

(def ^:const pentachords-tn '((0 1 2 3 4)
			   (0 1 2 3 5)
			   (0 2 3 4 5)
			   (0 1 2 4 5)
			   (0 1 3 4 5)
			   (0 1 2 3 6)
			   (0 3 4 5 6)
			   (0 1 2 3 7)
			   (0 4 5 6 7)
			   (0 1 2 5 6)
			   (0 1 4 5 6)
			   (0 1 2 6 7)
			   (0 1 5 6 7)
			   (0 2 3 4 6)
			   (0 1 2 4 6)
			   (0 2 4 5 6)
			   (0 1 3 4 6)
			   (0 2 3 5 6)
			   (0 2 3 4 7)
			   (0 3 4 5 7)
			   (0 1 3 5 6)
			   (0 1 2 4 8)
			   (0 2 3 4 8)
			   (0 1 2 5 7)
			   (0 2 5 6 7)
			   (0 1 2 6 8)
			   (0 1 3 4 7)
			   (0 3 4 6 7)
			   (0 1 3 4 8)
			   (0 1 4 5 7)
			   (0 2 3 6 7)
			   (0 1 3 6 7)
			   (0 1 4 6 7)
			   (0 1 3 7 8)
			   (0 1 5 7 8)
			   (0 1 4 5 8)
			   (0 3 4 7 8)
			   (0 1 4 7 8)
			   (0 2 3 5 7)
			   (0 2 4 5 7)
			   (0 1 3 5 7)
			   (0 2 4 6 7)
			   (0 2 3 5 8)
			   (0 3 5 6 8)
			   (0 2 4 5 8)
			   (0 3 4 6 8)
			   (0 1 3 5 8)
			   (0 3 5 7 8)
			   (0 2 3 6 8)
			   (0 2 5 6 8)
			   (0 1 3 6 8)
			   (0 2 5 7 8)
			   (0 1 4 6 8)
			   (0 2 4 7 8)
			   (0 1 3 6 9)
			   (0 2 3 6 9)
			   (0 1 4 6 9)
			   (0 1 4 7 9)
			   (0 2 4 6 8)
			   (0 2 4 6 9)
			   (0 2 4 7 9)
			   (0 1 2 4 7)
			   (0 3 5 6 7)
			   (0 3 4 5 8)
			   (0 1 2 5 8)
			   (0 3 6 7 8)))

(def ^:const hexachords-tn '((0 1 2 3 4 5)
			  (0 1 2 3 4 6)
			  (0 2 3 4 5 6)
			  (0 1 2 3 5 6)
			  (0 1 3 4 5 6)
			  (0 1 2 4 5 6)
			  (0 1 2 3 6 7)
			  (0 1 4 5 6 7)
			  (0 1 2 5 6 7)
			  (0 1 2 6 7 8)
			  (0 2 3 4 5 7)
			  (0 1 2 3 5 7)
			  (0 2 4 5 6 7)
			  (0 1 3 4 5 7)
			  (0 2 3 4 6 7)
			  (0 1 2 4 5 7)
			  (0 2 3 5 6 7)
			  (0 1 2 4 6 7)
			  (0 1 3 5 6 7)
			  (0 1 3 4 6 7)
			  (0 1 3 4 5 8)
			  (0 3 4 5 7 8)
			  (0 1 2 4 5 8)
			  (0 3 4 6 7 8)
			  (0 1 4 5 6 8)
			  (0 2 3 4 7 8)
			  (0 1 2 4 7 8)
			  (0 1 4 6 7 8)
			  (0 1 2 5 7 8)
			  (0 1 3 6 7 8)
			  (0 1 3 4 7 8)
			  (0 1 4 5 7 8)
			  (0 1 4 5 8 9)
			  (0 2 3 4 6 8)
			  (0 2 4 5 6 8)
			  (0 1 2 4 6 8)
			  (0 2 4 6 7 8)
			  (0 2 3 5 6 8)
			  (0 1 3 4 6 8)
			  (0 2 4 5 7 8)
			  (0 1 3 5 6 8)
			  (0 2 3 5 7 8)
			  (0 1 3 5 7 8)
			  (0 1 3 4 6 9)
			  (0 2 3 5 6 9)
			  (0 1 3 5 6 9)
			  (0 1 3 6 8 9)
			  (0 1 3 6 7 9)
			  (0 2 3 6 8 9)
			  (0 1 3 5 8 9)
			  (0 1 4 6 8 9)
			  (0 2 4 5 7 9)
			  (0 2 3 5 7 9)
			  (0 2 4 6 7 9)
			  (0 1 3 5 7 9)
			  (0 2 4 6 8 9)
			  (0 2 4 6 8 10)
			  (0 1 2 3 4 7)
			  (0 3 4 5 6 7)
			  (0 1 2 3 4 8)
			  (0 1 2 3 7 8)
			  (0 2 3 4 5 8)
			  (0 3 4 5 6 8)
			  (0 1 2 3 5 8)
			  (0 3 5 6 7 8)
			  (0 1 2 3 6 8)
			  (0 2 5 6 7 8)
			  (0 1 2 3 6 9)
			  (0 1 2 5 6 8)
			  (0 2 3 6 7 8)
			  (0 1 2 5 6 9)
			  (0 1 2 5 8 9)
			  (0 2 3 4 6 9)
			  (0 1 2 4 6 9)
			  (0 2 4 5 6 9)
			  (0 1 2 4 7 9)
			  (0 2 3 4 7 9)
			  (0 1 2 5 7 9)
			  (0 1 3 4 7 9)
			  (0 1 4 6 7 9)))

;TnI-types
(def ^:const dyads '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))

(def ^:const trichords '((0 1 2) (0 1 3) (0 1 4) (0 1 5) (0 1 6) (0 2 4) (0 2 5) (0 2 6) (0 2 7) (0 3 6) (0 3 7) (0 4 8)))

(def ^:const tetrachords '((0 1 2 3)
			(0 1 2 4)
			(0 1 3 4)
			(0 1 2 5)
			(0 1 2 6)
			(0 1 2 7)
			(0 1 4 5)
			(0 1 5 6)
			(0 1 6 7)
			(0 2 3 5)
			(0 1 3 5)
			(0 2 3 6)
			(0 1 3 6)
			(0 2 3 7)
			(0 1 3 7)
			(0 1 4 6)
			(0 1 5 7)
			(0 3 4 7)
			(0 1 4 7)
			(0 1 4 8)
			(0 1 5 8)
			(0 2 4 6)
			(0 2 4 7)
			(0 2 5 7)
			(0 2 4 8)
			(0 2 6 8)
			(0 3 5 8)
			(0 2 5 8)
			(0 3 6 9)))

(def ^:const pentachords '((0 1 2 3 4)
			(0 1 2 3 5)
			(0 1 2 4 5)
			(0 1 2 3 6)
			(0 1 2 3 7)
			(0 1 2 5 6)
			(0 1 2 6 7)
			(0 2 3 4 6)
			(0 1 2 4 6)
			(0 1 3 4 6)
			(0 2 3 4 7)
			(0 1 3 5 6)
			(0 1 2 4 8)
			(0 1 2 5 7)
			(0 1 2 6 8)
			(0 1 3 4 7)
			(0 1 3 4 8)
			(0 1 4 5 7)
			(0 1 3 6 7)
			(0 1 3 7 8)
			(0 1 4 5 8)
			(0 1 4 7 8)
			(0 2 3 5 7)
			(0 1 3 5 7)
			(0 2 3 5 8)
			(0 2 4 5 8)
			(0 1 3 5 8)
			(0 2 3 6 8)
			(0 1 3 6 8)
			(0 1 4 6 8)
			(0 1 3 6 9)
			(0 1 4 6 9)
			(0 2 4 6 8)
			(0 2 4 6 9)
			(0 2 4 7 9)
			(0 1 2 4 7)
			(0 3 4 5 8)
			(0 1 2 5 8)))

(def ^:const hexachords '((0 1 2 3 4 5)
		       (0 1 2 3 4 6)
		       (0 1 2 3 5 6)
		       (0 1 2 4 5 6)
		       (0 1 2 3 6 7)
		       (0 1 2 5 6 7)
		       (0 1 2 6 7 8)
		       (0 2 3 4 5 7)
		       (0 1 2 3 5 7)
		       (0 1 3 4 5 7)
		       (0 1 2 4 5 7)
		       (0 1 2 4 6 7)
		       (0 1 3 4 6 7)
		       (0 1 3 4 5 8)
		       (0 1 2 4 5 8)
		       (0 1 4 5 6 8)
		       (0 1 2 4 7 8)
		       (0 1 2 5 7 8)
		       (0 1 3 4 7 8)
		       (0 1 4 5 8 9)
		       (0 2 3 4 6 8)
		       (0 1 2 4 6 8)
		       (0 2 3 5 6 8)
		       (0 1 3 4 6 8)
		       (0 1 3 5 6 8)
		       (0 1 3 5 7 8)
		       (0 1 3 4 6 9)
		       (0 1 3 5 6 9)
		       (0 1 3 6 8 9)
		       (0 1 3 6 7 9)
		       (0 1 3 5 8 9)
		       (0 2 4 5 7 9)
		       (0 2 3 5 7 9)
		       (0 1 3 5 7 9)
		       (0 2 4 6 8 10)
		       (0 1 2 3 4 7)
		       (0 1 2 3 4 8)
		       (0 1 2 3 7 8)
		       (0 2 3 4 5 8)
		       (0 1 2 3 5 8)
		       (0 1 2 3 6 8)
		       (0 1 2 3 6 9)
		       (0 1 2 5 6 8)
		       (0 1 2 5 6 9)
		       (0 2 3 4 6 9)
		       (0 1 2 4 6 9)
		       (0 1 2 4 7 9)
		       (0 1 2 5 7 9)
		       (0 1 3 4 7 9)
		       (0 1 4 6 7 9)))

;; ((((0 4 7) (0 4 19) (0 4 31))
;;   ((0 16 7) (0 16 19) (0 16 31))
;;   ((0 28 7) (0 28 19) (0 28 31)))
;;  (((12 4 7) (12 4 19) (12 4 31))
;;   ((12 16 7) (12 16 19) (12 16 31))
;;   ((12 28 7) (12 28 19) (12 28 31)))
;;  (((24 4 7) (24 4 19) (24 4 31))
;;   ((24 16 7) (24 16 19) (24 16 31))
;;   ((24 28 7) (24 28 19) (24 28 31))))


;; ((((48 52 55) (48 52 67) (48 52 79))
;;   ((48 64 55) (48 64 67) (48 64 79))
;;   ((48 76 55) (48 76 67) (48 76 79)))
;;  (((60 52 55) (60 52 67) (60 52 79))
;;   ((60 64 55) (60 64 67) (60 64 79))
;;   ((60 76 55) (60 76 67) (60 76 79)))
;;  (((72 52 55) (72 52 67) (72 52 79))
;;   ((72 64 55) (72 64 67) (72 64 79))
;;   ((72 76 55) (72 76 67) (72 76 79))))

(def cmajtriads '((48 52 55) (48 52 67) (48 52 79) (48 64 55) (48 64 67) (48 64 79) (48 76 55) (48 76 67) (48 76 79) (60 52 55) (60 52 67) (60 52 79) (60 64 55) (60 64 67) (60 64 79) (60 76 55) (60 76 67) (60 76 79) (72 52 55) (72 52 67) (72 52 79) (72 64 55) (72 64 67) (72 64 79) (72 76 55) (72 76 67) (72 76 79)))

(def nested-transposed-tetrachords '(((11 12 13 14) (10 11 12 13) (9 10 11 12) (8 9 10 11) (7 8 9 10) (6 7 8 9) (5 6 7 8) (4 5 6 7) (3 4 5 6) (2 3 4 5) (1 2 3 4)) ((11 12 13 15) (10 11 12 14) (9 10 11 13) (8 9 10 12) (7 8 9 11) (6 7 8 10) (5 6 7 9) (4 5 6 8) (3 4 5 7) (2 3 4 6) (1 2 3 5)) ((11 12 14 15) (10 11 13 14) (9 10 12 13) (8 9 11 12) (7 8 10 11) (6 7 9 10) (5 6 8 9) (4 5 7 8) (3 4 6 7) (2 3 5 6) (1 2 4 5)) ((11 12 13 16) (10 11 12 15) (9 10 11 14) (8 9 10 13) (7 8 9 12) (6 7 8 11) (5 6 7 10) (4 5 6 9) (3 4 5 8) (2 3 4 7) (1 2 3 6)) ((11 12 13 17) (10 11 12 16) (9 10 11 15) (8 9 10 14) (7 8 9 13) (6 7 8 12) (5 6 7 11) (4 5 6 10) (3 4 5 9) (2 3 4 8) (1 2 3 7)) ((11 12 13 18) (10 11 12 17) (9 10 11 16) (8 9 10 15) (7 8 9 14) (6 7 8 13) (5 6 7 12) (4 5 6 11) (3 4 5 10) (2 3 4 9) (1 2 3 8)) ((11 12 15 16) (10 11 14 15) (9 10 13 14) (8 9 12 13) (7 8 11 12) (6 7 10 11) (5 6 9 10) (4 5 8 9) (3 4 7 8) (2 3 6 7) (1 2 5 6)) ((11 12 16 17) (10 11 15 16) (9 10 14 15) (8 9 13 14) (7 8 12 13) (6 7 11 12) (5 6 10 11) (4 5 9 10) (3 4 8 9) (2 3 7 8) (1 2 6 7)) ((11 12 17 18) (10 11 16 17) (9 10 15 16) (8 9 14 15) (7 8 13 14) (6 7 12 13) (5 6 11 12) (4 5 10 11) (3 4 9 10) (2 3 8 9) (1 2 7 8)) ((11 13 14 16) (10 12 13 15) (9 11 12 14) (8 10 11 13) (7 9 10 12) (6 8 9 11) (5 7 8 10) (4 6 7 9) (3 5 6 8) (2 4 5 7) (1 3 4 6)) ((11 12 14 16) (10 11 13 15) (9 10 12 14) (8 9 11 13) (7 8 10 12) (6 7 9 11) (5 6 8 10) (4 5 7 9) (3 4 6 8) (2 3 5 7) (1 2 4 6)) ((11 13 14 17) (10 12 13 16) (9 11 12 15) (8 10 11 14) (7 9 10 13) (6 8 9 12) (5 7 8 11) (4 6 7 10) (3 5 6 9) (2 4 5 8) (1 3 4 7)) ((11 12 14 17) (10 11 13 16) (9 10 12 15) (8 9 11 14) (7 8 10 13) (6 7 9 12) (5 6 8 11) (4 5 7 10) (3 4 6 9) (2 3 5 8) (1 2 4 7)) ((11 13 14 18) (10 12 13 17) (9 11 12 16) (8 10 11 15) (7 9 10 14) (6 8 9 13) (5 7 8 12) (4 6 7 11) (3 5 6 10) (2 4 5 9) (1 3 4 8)) ((11 12 14 18) (10 11 13 17) (9 10 12 16) (8 9 11 15) (7 8 10 14) (6 7 9 13) (5 6 8 12) (4 5 7 11) (3 4 6 10) (2 3 5 9) (1 2 4 8)) ((11 12 15 17) (10 11 14 16) (9 10 13 15) (8 9 12 14) (7 8 11 13) (6 7 10 12) (5 6 9 11) (4 5 8 10) (3 4 7 9) (2 3 6 8) (1 2 5 7)) ((11 12 16 18) (10 11 15 17) (9 10 14 16) (8 9 13 15) (7 8 12 14) (6 7 11 13) (5 6 10 12) (4 5 9 11) (3 4 8 10) (2 3 7 9) (1 2 6 8)) ((11 14 15 18) (10 13 14 17) (9 12 13 16) (8 11 12 15) (7 10 11 14) (6 9 10 13) (5 8 9 12) (4 7 8 11) (3 6 7 10) (2 5 6 9) (1 4 5 8)) ((11 12 15 18) (10 11 14 17) (9 10 13 16) (8 9 12 15) (7 8 11 14) (6 7 10 13) (5 6 9 12) (4 5 8 11) (3 4 7 10) (2 3 6 9) (1 2 5 8)) ((11 12 15 19) (10 11 14 18) (9 10 13 17) (8 9 12 16) (7 8 11 15) (6 7 10 14) (5 6 9 13) (4 5 8 12) (3 4 7 11) (2 3 6 10) (1 2 5 9)) ((11 12 16 19) (10 11 15 18) (9 10 14 17) (8 9 13 16) (7 8 12 15) (6 7 11 14) (5 6 10 13) (4 5 9 12) (3 4 8 11) (2 3 7 10) (1 2 6 9)) ((11 13 15 17) (10 12 14 16) (9 11 13 15) (8 10 12 14) (7 9 11 13) (6 8 10 12) (5 7 9 11) (4 6 8 10) (3 5 7 9) (2 4 6 8) (1 3 5 7)) ((11 13 15 18) (10 12 14 17) (9 11 13 16) (8 10 12 15) (7 9 11 14) (6 8 10 13) (5 7 9 12) (4 6 8 11) (3 5 7 10) (2 4 6 9) (1 3 5 8)) ((11 13 16 18) (10 12 15 17) (9 11 14 16) (8 10 13 15) (7 9 12 14) (6 8 11 13) (5 7 10 12) (4 6 9 11) (3 5 8 10) (2 4 7 9) (1 3 6 8)) ((11 13 15 19) (10 12 14 18) (9 11 13 17) (8 10 12 16) (7 9 11 15) (6 8 10 14) (5 7 9 13) (4 6 8 12) (3 5 7 11) (2 4 6 10) (1 3 5 9)) ((11 13 17 19) (10 12 16 18) (9 11 15 17) (8 10 14 16) (7 9 13 15) (6 8 12 14) (5 7 11 13) (4 6 10 12) (3 5 9 11) (2 4 8 10) (1 3 7 9)) ((11 14 16 19) (10 13 15 18) (9 12 14 17) (8 11 13 16) (7 10 12 15) (6 9 11 14) (5 8 10 13) (4 7 9 12) (3 6 8 11) (2 5 7 10) (1 4 6 9)) ((11 13 16 19) (10 12 15 18) (9 11 14 17) (8 10 13 16) (7 9 12 15) (6 8 11 14) (5 7 10 13) (4 6 9 12) (3 5 8 11) (2 4 7 10) (1 3 6 9)) ((11 14 17 20) (10 13 16 19) (9 12 15 18) (8 11 14 17) (7 10 13 16) (6 9 12 15) (5 8 11 14) (4 7 10 13) (3 6 9 12) (2 5 8 11) (1 4 7 10))))

#+END_SRC

#+RESULTS:
: #'user/dyads-tn#'user/trichords-tn#'user/tetrachords-tn#'user/pentachords-tn#'user/hexachords-tn#'user/dyads#'user/trichords#'user/tetrachords#'user/pentachords#'user/hexachords#'user/cmajtriads#'user/nested-transposed-tetrachords



#+BEGIN_SRC clojure
(rand-nth tetrachords-tn)
#+END_SRC

#+RESULTS:
| 0 | 1 | 3 | 7 |
***** as vectors
#+BEGIN_SRC clojure
(def ^:const dyads-tn [[0 1] [0 2] [0 3] [0 4] [0 5] [0 6]])

(def ^:const trichords-tn [[0 1 2] [0 1 3] [0 2 3] [0 1 4] [0 3 4] [0 1 5] [0 4 5] [0 1 6] [0 5 6] [0 2 4] [0 2 5] [0 3 5] [0 2 6] [0 4 6] [0 2 7] [0 3 6] [0 3 7] [0 4 7] [0 4 8]])

(def ^:const tetrachords-tn [[0 1 2 3]
			   [0 1 2 4] 
			   [0 2 3 4] 
			   [0 1 3 4] 
			   [0 1 2 5] 
			   [0 3 4 5] 
			   [0 1 2 6] 
			   [0 4 5 6] 
			   [0 1 2 7] 
			   [0 1 4 5] 
			   [0 1 5 6] 
			   [0 1 6 7] 
			   [0 2 3 5] 
			   [0 1 3 5] 
			   [0 2 4 5] 
			   [0 2 3 6] 
			   [0 3 4 6] 
			   [0 1 3 6] 
			   [0 3 5 6] 
			   [0 2 3 7] 
			   [0 4 5 7] 
			   [0 1 4 6] 
			   [0 2 5 6] 
			   [0 1 5 7] 
			   [0 2 6 7] 
			   [0 3 4 7] 
			   [0 1 4 7] 
			   [0 3 6 7] 
			   [0 1 4 8] 
			   [0 3 4 8] 
			   [0 1 5 8] 
			   [0 2 4 6] 
			   [0 2 4 7] 
			   [0 3 5 7] 
			   [0 2 5 7] 
			   [0 2 4 8] 
			   [0 2 6 8] 
			   [0 3 5 8] 
			   [0 2 5 8] 
			   [0 3 6 8] 
			   [0 3 6 9] 
			   [0 1 3 7] 
			   [0 4 6 7]])

(def ^:const pentachords-tn [[0 1 2 3 4] 
			   [0 1 2 3 5] 
			   [0 2 3 4 5] 
			   [0 1 2 4 5] 
			   [0 1 3 4 5] 
			   [0 1 2 3 6] 
			   [0 3 4 5 6] 
			   [0 1 2 3 7] 
			   [0 4 5 6 7] 
			   [0 1 2 5 6] 
			   [0 1 4 5 6] 
			   [0 1 2 6 7] 
			   [0 1 5 6 7] 
			   [0 2 3 4 6] 
			   [0 1 2 4 6] 
			   [0 2 4 5 6] 
			   [0 1 3 4 6] 
			   [0 2 3 5 6] 
			   [0 2 3 4 7] 
			   [0 3 4 5 7] 
			   [0 1 3 5 6] 
			   [0 1 2 4 8] 
			   [0 2 3 4 8] 
			   [0 1 2 5 7] 
			   [0 2 5 6 7] 
			   [0 1 2 6 8] 
			   [0 1 3 4 7] 
			   [0 3 4 6 7] 
			   [0 1 3 4 8] 
			   [0 1 4 5 7] 
			   [0 2 3 6 7] 
			   [0 1 3 6 7] 
			   [0 1 4 6 7] 
			   [0 1 3 7 8] 
			   [0 1 5 7 8] 
			   [0 1 4 5 8] 
			   [0 3 4 7 8] 
			   [0 1 4 7 8] 
			   [0 2 3 5 7] 
			   [0 2 4 5 7] 
			   [0 1 3 5 7] 
			   [0 2 4 6 7] 
			   [0 2 3 5 8] 
			   [0 3 5 6 8] 
			   [0 2 4 5 8] 
			   [0 3 4 6 8] 
			   [0 1 3 5 8] 
			   [0 3 5 7 8] 
			   [0 2 3 6 8] 
			   [0 2 5 6 8] 
			   [0 1 3 6 8] 
			   [0 2 5 7 8] 
			   [0 1 4 6 8] 
			   [0 2 4 7 8] 
			   [0 1 3 6 9] 
			   [0 2 3 6 9] 
			   [0 1 4 6 9] 
			   [0 1 4 7 9] 
			   [0 2 4 6 8] 
			   [0 2 4 6 9] 
			   [0 2 4 7 9] 
			   [0 1 2 4 7] 
			   [0 3 5 6 7] 
			   [0 3 4 5 8] 
			   [0 1 2 5 8] 
			   [0 3 6 7 8] ] )

(def ^:const hexachords-tn [[0 1 2 3 4 5] 
			  [0 1 2 3 4 6] 
			  [0 2 3 4 5 6] 
			  [0 1 2 3 5 6] 
			  [0 1 3 4 5 6] 
			  [0 1 2 4 5 6] 
			  [0 1 2 3 6 7] 
			  [0 1 4 5 6 7] 
			  [0 1 2 5 6 7] 
			  [0 1 2 6 7 8] 
			  [0 2 3 4 5 7] 
			  [0 1 2 3 5 7] 
			  [0 2 4 5 6 7] 
			  [0 1 3 4 5 7] 
			  [0 2 3 4 6 7] 
			  [0 1 2 4 5 7] 
			  [0 2 3 5 6 7] 
			  [0 1 2 4 6 7] 
			  [0 1 3 5 6 7] 
			  [0 1 3 4 6 7] 
			  [0 1 3 4 5 8] 
			  [0 3 4 5 7 8] 
			  [0 1 2 4 5 8] 
			  [0 3 4 6 7 8] 
			  [0 1 4 5 6 8] 
			  [0 2 3 4 7 8] 
			  [0 1 2 4 7 8] 
			  [0 1 4 6 7 8] 
			  [0 1 2 5 7 8] 
			  [0 1 3 6 7 8] 
			  [0 1 3 4 7 8] 
			  [0 1 4 5 7 8] 
			  [0 1 4 5 8 9] 
			  [0 2 3 4 6 8] 
			  [0 2 4 5 6 8] 
			  [0 1 2 4 6 8] 
			  [0 2 4 6 7 8] 
			  [0 2 3 5 6 8] 
			  [0 1 3 4 6 8] 
			  [0 2 4 5 7 8] 
			  [0 1 3 5 6 8] 
			  [0 2 3 5 7 8] 
			  [0 1 3 5 7 8] 
			  [0 1 3 4 6 9] 
			  [0 2 3 5 6 9] 
			  [0 1 3 5 6 9] 
			  [0 1 3 6 8 9] 
			  [0 1 3 6 7 9] 
			  [0 2 3 6 8 9] 
			  [0 1 3 5 8 9] 
			  [0 1 4 6 8 9] 
			  [0 2 4 5 7 9] 
			  [0 2 3 5 7 9] 
			  [0 2 4 6 7 9] 
			  [0 1 3 5 7 9] 
			  [0 2 4 6 8 9] 
			  [0 2 4 6 8 10] 
			  [0 1 2 3 4 7] 
			  [0 3 4 5 6 7] 
			  [0 1 2 3 4 8] 
			  [0 1 2 3 7 8] 
			  [0 2 3 4 5 8] 
			  [0 3 4 5 6 8] 
			  [0 1 2 3 5 8] 
			  [0 3 5 6 7 8] 
			  [0 1 2 3 6 8] 
			  [0 2 5 6 7 8] 
			  [0 1 2 3 6 9] 
			  [0 1 2 5 6 8] 
			  [0 2 3 6 7 8] 
			  [0 1 2 5 6 9] 
			  [0 1 2 5 8 9] 
			  [0 2 3 4 6 9] 
			  [0 1 2 4 6 9] 
			  [0 2 4 5 6 9] 
			  [0 1 2 4 7 9] 
			  [0 2 3 4 7 9] 
			  [0 1 2 5 7 9] 
			  [0 1 3 4 7 9] 
			  [0 1 4 6 7 9] ] )

;TnI-types
(def ^:const dyads [[0 1] [0 2] [0 3] [0 4] [0 5] [0 6]])

(def ^:const trichords [[0 1 2] [0 1 3] [0 1 4] [0 1 5] [0 1 6] [0 2 4] [0 2 5] [0 2 6] [0 2 7] [0 3 6] [0 3 7] [0 4 8]])

(def ^:const tetrachords [[0 1 2 3] 
			[0 1 2 4] 
			[0 1 3 4] 
			[0 1 2 5] 
			[0 1 2 6] 
			[0 1 2 7] 
			[0 1 4 5] 
			[0 1 5 6] 
			[0 1 6 7] 
			[0 2 3 5] 
			[0 1 3 5] 
			[0 2 3 6] 
			[0 1 3 6] 
			[0 2 3 7] 
			[0 1 3 7] 
			[0 1 4 6] 
			[0 1 5 7] 
			[0 3 4 7] 
			[0 1 4 7] 
			[0 1 4 8] 
			[0 1 5 8] 
			[0 2 4 6] 
			[0 2 4 7] 
			[0 2 5 7] 
			[0 2 4 8] 
			[0 2 6 8] 
			[0 3 5 8] 
			[0 2 5 8] 
			[0 3 6 9] ])

(def ^:const pentachords [[0 1 2 3 4] 
			[0 1 2 3 5] 
			[0 1 2 4 5] 
			[0 1 2 3 6] 
			[0 1 2 3 7] 
			[0 1 2 5 6] 
			[0 1 2 6 7] 
			[0 2 3 4 6] 
			[0 1 2 4 6] 
			[0 1 3 4 6] 
			[0 2 3 4 7] 
			[0 1 3 5 6] 
			[0 1 2 4 8] 
			[0 1 2 5 7] 
			[0 1 2 6 8] 
			[0 1 3 4 7] 
			[0 1 3 4 8] 
			[0 1 4 5 7] 
			[0 1 3 6 7] 
			[0 1 3 7 8] 
			[0 1 4 5 8] 
			[0 1 4 7 8] 
			[0 2 3 5 7] 
			[0 1 3 5 7] 
			[0 2 3 5 8] 
			[0 2 4 5 8] 
			[0 1 3 5 8] 
			[0 2 3 6 8] 
			[0 1 3 6 8] 
			[0 1 4 6 8] 
			[0 1 3 6 9] 
			[0 1 4 6 9] 
			[0 2 4 6 8] 
			[0 2 4 6 9] 
			[0 2 4 7 9] 
			[0 1 2 4 7] 
			[0 3 4 5 8] 
			[0 1 2 5 8]])

(def ^:const hexachords [[0 1 2 3 4 5] 
		       [0 1 2 3 4 6] 
		       [0 1 2 3 5 6] 
		       [0 1 2 4 5 6] 
		       [0 1 2 3 6 7] 
		       [0 1 2 5 6 7] 
		       [0 1 2 6 7 8] 
		       [0 2 3 4 5 7] 
		       [0 1 2 3 5 7] 
		       [0 1 3 4 5 7] 
		       [0 1 2 4 5 7] 
		       [0 1 2 4 6 7] 
		       [0 1 3 4 6 7] 
		       [0 1 3 4 5 8] 
		       [0 1 2 4 5 8] 
		       [0 1 4 5 6 8] 
		       [0 1 2 4 7 8] 
		       [0 1 2 5 7 8] 
		       [0 1 3 4 7 8] 
		       [0 1 4 5 8 9] 
		       [0 2 3 4 6 8] 
		       [0 1 2 4 6 8] 
		       [0 2 3 5 6 8] 
		       [0 1 3 4 6 8] 
		       [0 1 3 5 6 8] 
		       [0 1 3 5 7 8] 
		       [0 1 3 4 6 9] 
		       [0 1 3 5 6 9] 
		       [0 1 3 6 8 9] 
		       [0 1 3 6 7 9] 
		       [0 1 3 5 8 9] 
		       [0 2 4 5 7 9] 
		       [0 2 3 5 7 9] 
		       [0 1 3 5 7 9] 
		       [0 2 4 6 8 10] 
		       [0 1 2 3 4 7] 
		       [0 1 2 3 4 8] 
		       [0 1 2 3 7 8] 
		       [0 2 3 4 5 8] 
		       [0 1 2 3 5 8] 
		       [0 1 2 3 6 8] 
		       [0 1 2 3 6 9] 
		       [0 1 2 5 6 8] 
		       [0 1 2 5 6 9] 
		       [0 2 3 4 6 9] 
		       [0 1 2 4 6 9] 
		       [0 1 2 4 7 9] 
		       [0 1 2 5 7 9] 
		       [0 1 3 4 7 9] 
		       [0 1 4 6 7 9] ] )

;; ((((0 4 7) (0 4 19) (0 4 31))
;;   ((0 16 7) (0 16 19) (0 16 31))
;;   ((0 28 7) (0 28 19) (0 28 31)))
;;  (((12 4 7) (12 4 19) (12 4 31))
;;   ((12 16 7) (12 16 19) (12 16 31))
;;   ((12 28 7) (12 28 19) (12 28 31)))
;;  (((24 4 7) (24 4 19) (24 4 31))
;;   ((24 16 7) (24 16 19) (24 16 31))
;;   ((24 28 7) (24 28 19) (24 28 31))))


;; ((((48 52 55) (48 52 67) (48 52 79))
;;   ((48 64 55) (48 64 67) (48 64 79))
;;   ((48 76 55) (48 76 67) (48 76 79)))
;;  (((60 52 55) (60 52 67) (60 52 79))
;;   ((60 64 55) (60 64 67) (60 64 79))
;;   ((60 76 55) (60 76 67) (60 76 79)))
;;  (((72 52 55) (72 52 67) (72 52 79))
;;   ((72 64 55) (72 64 67) (72 64 79))
;;   ((72 76 55) (72 76 67) (72 76 79))))
#+END_SRC

#+RESULTS:
: #'user/dyads-tn#'user/trichords-tn#'user/tetrachords-tn#'user/pentachords-tn#'user/hexachords-tn#'user/dyads#'user/trichords#'user/tetrachords#'user/pentachords#'user/hexachords

** use overtone code (or anything not loaded by default)
*** what's "loaded"
#+BEGIN_SRC clojure :results output
(map println (loaded-libs))
#+END_SRC

#+BEGIN_SRC clojure 
(def classpat (System/getProperty "java.class.path"))
#+END_SRC
*** what's on the "classpath?"
#+BEGIN_SRC clojure 
(System/getProperty "java.class.path")
#+END_SRC

#+RESULTS:
: /Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/test:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/src:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/dev-resources:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/resources:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/target/classes:
/Users/a/.m2/repository/instaparse/instaparse/1.4.1/instaparse-1.4.1.jar:
/Users/a/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:
/Users/a/.m2/repository/org/tcrawley/dynapath/0.2.3/dynapath-0.2.3.jar:
/Users/a/.m2/repository/org/clojure/java.jdbc/0.5.0/java.jdbc-0.5.0.jar:
/Users/a/.m2/repository/overtone/scsynth-extras/3.5.7.0/scsynth-extras-3.5.7.0.jar:
/Users/a/.m2/repository/net/java/dev/jna/jna/3.4.0/jna-3.4.0.jar:
/Users/a/.m2/repository/overtone/at-at/1.2.0/at-at-1.2.0.jar:
/Users/a/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:
/Users/a/.m2/repository/overtone/byte-spec/0.3.1/byte-spec-0.3.1.jar:
/Users/a/.m2/repository/overtone/osc-clj/0.9.0/osc-clj-0.9.0.jar:
/Users/a/.m2/repository/overtone/libs.handlers/0.2.0/libs.handlers-0.2.0.jar:
/Users/a/.m2/repository/org/postgresql/postgresql/9.4-1201-jdbc41/postgresql-9.4-1201-jdbc41.jar:
/Users/a/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:
/Users/a/.m2/repository/overtone/scsynth/3.5.7.0/scsynth-3.5.7.0.jar:
/Users/a/.m2/repository/commons-net/commons-net/3.0.1/commons-net-3.0.1.jar:
/Users/a/.m2/repository/javax/jmdns/jmdns/3.4.1/jmdns-3.4.1.jar:
/Users/a/.m2/repository/cider/cider-nrepl/0.11.0-SNAPSHOT/cider-nrepl-0.11.0-SNAPSHOT.jar:
/Users/a/.m2/repository/yesql/yesql/0.5.2/yesql-0.5.2.jar:
/Users/a/.m2/repository/clj-glob/clj-glob/1.0.0/clj-glob-1.0.0.jar:
/Users/a/.m2/repository/overtone/overtone/0.9.1/overtone-0.9.1.jar:
/Users/a/.m2/repository/overtone/midi-clj/0.5.0/midi-clj-0.5.0.jar:
/Users/a/.m2/repository/org/clojure/data.json/0.2.3/data.json-0.2.3.jar:
/Users/a/.m2/repository/clj-native/clj-native/0.9.3/clj-native-0.9.3.jar
*** what's available in one of these namespaces
#+BEGIN_SRC clojure :results output
(dir overtone.algo.lists)
#+END_SRC

#+RESULTS:
: fill
: rotate
*** make some code from a library available
#+BEGIN_SRC clojure
(require '[overtone.algo.chance :as chance])
#+END_SRC

#+BEGIN_SRC clojure :results output
(dir overtone.algo.chance)
#+END_SRC

#+RESULTS:
: choose
: choose-n
: chosen-from
: only
: ranged-rand
: weighted-choose
: weighted-coin
* SQL connections
** define a db-spec
#+BEGIN_SRC clojure
(def db-spec {:classname "org.postgresql.Driver"
              :subprotocol "postgresql"
              :subname "//localhost:5432/heroku_psql_tutorial"
              :user "a"
              ;;:password ""
              })
#+END_SRC
** describe the tables of this db
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
\dt
#+END_SRC

#+RESULTS:
| List of relations |                           |       |       |
|-------------------+---------------------------+-------+-------|
| Schema            | Name                      | Type  | Owner |
| public            | chord_event               | table | a     |
| public            | dyad_events               | table | a     |
| public            | hexachord_events_stamped  | table | a     |
| public            | hexachords                | table | a     |
| public            | pcs_event                 | table | a     |
| public            | pentachords               | table | a     |
| public            | tetrachord_events_stamped | table | a     |
| public            | tetrachords               | table | a     |
| public            | trichord_events_stamped   | table | a     |
| public            | trichords                 | table | a     |


| List of relations |                           |       |       |
|-------------------+---------------------------+-------+-------|
| Schema            | Name                      | Type  | Owner |
| public            | chord_event               | table | a     |
| public            | dyad_events               | table | a     |
| public            | hexachord_events          | table | a     |
| public            | hexachord_events_stamped  | table | a     |
| public            | monochord_events          | table | a     |
| public            | pcs_event                 | table | a     |
| public            | pentachord_events         | table | a     |
| public            | tetrachord_events         | table | a     |
| public            | tetrachord_events_stamped | table | a     |
| public            | trichord_events           | table | a     |
| public            | trichord_events_stamped   | table | a     |
** select all from simple chord events
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
-- select * from monochord_events;
select * from dyad_events;
select * from trichord_events;
select * from tetrachord_events;
select * from pentachord_events;
select * from hexachord_events;
#+END_SRC

#+RESULTS:
| chord_id | midi1 | midi2 |
|----------+-------+-------|



| chord_id | midi1 |       |       |       |       |       |
|----------+-------+-------+-------+-------+-------+-------|
|        1 |    60 |       |       |       |       |       |
| chord_id | midi1 | midi2 |       |       |       |       |
| chord_id | midi1 | midi2 | midi3 |       |       |       |
|        1 |    59 |    62 |    65 |       |       |       |
| chord_id | midi1 | midi2 | midi3 | midi4 |       |       |
|        1 |    58 |    62 |    64 |    67 |       |       |
|        2 |    57 |    63 |    64 |    67 |       |       |
| chord_id | midi1 | midi2 | midi3 | midi4 | midi5 |       |
|        1 |    59 |    61 |    64 |    67 |    70 |       |
| chord_id | midi1 | midi2 | midi3 | midi4 | midi5 | midi6 |
|        1 |    59 |    61 |    64 |    67 |    70 |    71 |
** use the YeSQL-Clojure function from sql insert chords
*** functions as returned when evaluating yesql code
#+BEGIN_SRC clojure
"(#'cdb1.core/insert-monochords<! #'cdb1.core/insert-dyads<! #'cdb1.core/insert-trichords<! #'cdb1.core/insert-tetrachords<! #'cdb1.core/insert-pentachords<! #'cdb1.core/insert-hexachords<!)"
#+END_SRC
*** use insert-tetrachords
#+BEGIN_SRC clojure 
(cdb1.core/insert-tetrachords<! {:midi1 57 :midi2 63 :midi3 64 :midi4 67})
#+END_SRC

#+RESULTS:
| :chord_id | 2 | :midi1 | 57 | :midi2 | 63 | :midi3 | 64 | :midi4 | 67 |
* voice random sets and log them
** old voice-rand-set--to be refactored
#+BEGIN_SRC clojure
(defn voice-rand-set [set-type]
  (let [set (rand-nth set-type)
        voiced-set (map #(+ (rand-nth [36 48 60 72]) %) set)
        set-voicing-pair (list set voiced-set)]
    (do
      (println set-voicing-pair)
      set-voicing-pair)))

;; (voice-rand-set post_tonal_overtone.data.set_class_data/tetrachords-tn)

(defn voice-and-transpose-rand-set [set-type tn-level]
  (let [set (rand-nth set-type)
        voiced-set (map #(+ (rand-nth [36 48 60 72]) %) set)
        transposed-set (map #(+ tn-level %) voiced-set)
        set-voicing-group (list set voiced-set tn-level transposed-set)]
    (do
      (println set-voicing-group)
      (last set-voicing-group))))
#+END_SRC

#+RESULTS:
: #'user/voice-rand-set#'user/voice-and-transpose-rand-set

#+BEGIN_SRC clojure
(user/voice-rand-set tetrachords)
#+END_SRC

#+RESULTS:
|  0 |  1 |  4 |  6 |
| 36 | 49 | 76 | 66 |

#+BEGIN_SRC clojure :results output
(user/voice-and-transpose-rand-set tetrachords (rand-int 11))
#+END_SRC

#+RESULTS:
: ((0 2 5 7) (48 38 41 43) 8 (56 46 49 51))

** destructure a voiced random chord into the database
*** select a random tetrachord for manipulation
#+BEGIN_SRC clojure
(def chord-ds (user/voice-rand-set tetrachords))
#+END_SRC

#+RESULTS:
: #'user/chord-ds
#+BEGIN_SRC clojure
(let [pcs (first chord-ds) midis (second chord-ds)]
  midis)
#+END_SRC

#+RESULTS:
| 48 | 75 | 65 | 80 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds]
  )
#+END_SRC

#+RESULTS:
| 0 | 3 | 5 | 8 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
      midi1)
#+END_SRC

#+RESULTS:
: 48

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
      {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4})
#+END_SRC

#+RESULTS:
| :midi1 | 48 | :midi2 | 75 | :midi3 | 65 | :midi4 | 80 |
*** completely destructure and insert the stored chord
#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC

#+RESULTS:
| :chord_id | 3 | :midi1 | 48 | :midi2 | 75 | :midi3 | 65 | :midi4 | 80 |

*** insert the result of calling up a (simple) random tetrachord (with destructure)
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC

#+RESULTS:
| :chord_id | 4 | :midi1 | 48 | :midi2 | 49 | :midi3 | 63 | :midi4 | 42 |
** destructure a voiced random chord into the database
Call voice random set with tetrachord and insert the results straight
into the simple tetrachord database
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC
* expand database table columns
** create tables with timestamp columns
*** select now
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now();
#+END_SRC

#+RESULTS:
| now                           |
|-------------------------------|
| 2016-04-08 22:48:54.351379-04 |
*** look at various timezone formatting options
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select timestamp '2014-01-2 00:30:00' AS a, 
timestamp '2014-01-2 00:30:00' AT TIME ZONE 'UTC' AS b,  
timestamp '2014-01-2 00:30:00' AT TIME ZONE 'UTC' AT TIME ZONE 'PST' AS c, 
timestamp '2014-01-2 00:30:00' AT TIME ZONE 'PST' AS d

#+END_SRC

#+RESULTS:
| a                   | b                      | c                   | d                      |
|---------------------+------------------------+---------------------+------------------------|
| 2014-01-02 00:30:00 | 2014-01-01 19:30:00-05 | 2014-01-01 16:30:00 | 2014-01-02 03:30:00-05 |
*** simple timezone
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select now() AT TIME ZONE 'PST'
#+END_SRC

#+RESULTS:
| timezone                   |
|----------------------------|
| 2016-04-19 12:02:25.210338 |




| timezone                   |
|----------------------------|
| 2016-04-08 18:52:34.663367 |


#+END_SRC
*** compute intervals
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now() AS date1, current_date - 100 AS date2
#+END_SRC

#+RESULTS:
| date1                         |      date2 |
|-------------------------------+------------|
| 2016-04-08 22:37:46.972654-04 | 2015-12-30 |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now()::date + 100 AS date1, current_date - 100 AS date2
#+END_SRC

#+RESULTS:
|      date1 |      date2 |
|------------+------------|
| 2016-07-17 | 2015-12-30 |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now()::date + 100 AS date1, current_date - INTERVAL '100 days' AS date2
#+END_SRC

#+RESULTS:
|      date1 | date2               |
|------------+---------------------|
| 2016-07-17 | 2015-12-30 00:00:00 |
*** create table with timestamp column
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE hexachord_events_stamped (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|



#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO hexachord_events_stamped (midi1, midi2, midi3, midi4, midi5, midi6)  
VALUES (60, 61, 62, 63, 64, 66)
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT * FROM hexachord_events_stamped
#+END_SRC

#+RESULTS:
| chord_id | chord_inserted             | midi1 | midi2 | midi3 | midi4 | midi5 | midi6 |
|----------+----------------------------+-------+-------+-------+-------+-------+-------|
|        1 | 2016-04-08 23:01:47.892927 |    60 |    61 |    62 |    63 |    64 |    66 |
*** create table with timestamp and setclass string
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE tetrachord_events_stamped (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
setclass text,
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int)


#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO tetrachord_events_stamped (setclass, midi1, midi2, midi3, midi4)
VALUES ('0134', 60, 61, 63, 64)
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * FROM tetrachord_events_stamped
#+END_SRC

#+RESULTS:
| chord_id | chord_inserted             | setclass | midi1 | midi2 | midi3 | midi4 |
|----------+----------------------------+----------+-------+-------+-------+-------|
|        1 | 2016-04-08 23:05:33.917363 |     0134 |    60 |    61 |    63 |    64 |
* consider how to design tables to hold all the relevant chord data
** pid, timestamp, setclass ('xxxx' format), tlevel, midis
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE trichord_events_stamped (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
setclass text,
tlevel int,
midi1 int, 
midi2 int, 
midi3 int)
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
insert into trichord_events_stamped (setclass, tlevel, midi1, midi2, midi3)
VALUES ('013', 7, 67, 68, 70)
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
insert into trichord_events_stamped (setclass, tlevel, midi1, midi2, midi3)
VALUES (013, 7, 67, 68, 70)
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * FROM trichord_events_stamped
#+END_SRC

#+RESULTS:
| chord_id | chord_inserted             | setclass | tlevel | midi1 | midi2 | midi3 |
|----------+----------------------------+----------+--------+-------+-------+-------|
|        1 | 2016-04-08 23:10:23.865445 |      013 |      7 |    67 |    68 |    70 |
|        2 | 2016-04-09 10:53:32.253909 |       13 |      7 |    67 |    68 |    70 |
** consider 'setclass', un-transposed 'midis' as list, tlevel, transposed 'midis'
#+BEGIN_SRC clojure :results output
(user/voice-and-transpose-rand-set tetrachords (rand-int 11))
#+END_SRC

#+RESULTS:
: ((0 1 5 6) (72 37 53 78) 3 (75 40 56 81))

#+BEGIN_SRC clojure
(map (fn[x]
   (if (.startsWith (str x) "(quote ") 
     (apply str "'" (rest x)) 
     x)) "'0123'")
#+END_SRC

#+RESULTS:
: (\' \0 \1 \2 \3 \')
* can't write single quoted strings from clojure?
** ask on Zulip?
** separate table for PC set
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis
      [pc1 pc2 pc3 pc4] pcs]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC
* create chord and pc tables
** tables
*** drop *chord_events
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
DROP TABLE monochord_events; 
DROP TABLE dyad_events;
DROP TABLE trichord_events; 
DROP TABLE tetrachord_events;
DROP TABLE pentachord_events;
DROP TABLE hexachord_events;
#+END_SRC

#+RESULTS:
| DROP TABLE |
|------------|
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
*** old create *chord_events (deprecated--see with timestamp versions)
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE monochord_events (chord_id serial PRIMARY KEY, midi1 int);
CREATE TABLE dyad_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int);
CREATE TABLE trichord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int);
CREATE TABLE tetrachord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int, midi4 int);
CREATE TABLE pentachord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int, midi4 int, midi5 int);
CREATE TABLE hexachord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int, midi4 int, midi5 int, midi6 int);
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
** create pc_ and *chord_ events individually (with timestamps)
*** new create monochord_events and with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE monochord_events (
chord_id serial PRIMARY KEY, 
time_chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_monochord_events (
pc_id int REFERENCES monochord_events (chord_id),
time_pc_inserted timestamp REFERENCES monochord_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create dyad_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE dyad_events (
chord_id serial PRIMARY KEY, 
time_chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_dyad_events (
pc_id int REFERENCES dyad_events (chord_id),
time_pc_inserted timestamp REFERENCES dyad_events (time_chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create trichord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE trichord_events (
chord_id serial PRIMARY KEY, 
time_chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_trichord_events (
pc_id int REFERENCES trichord_events (chord_id),
time_pc_inserted timestamp REFERENCES trichord_events (time_chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create tetrachord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE tetrachord_events (
chord_id serial PRIMARY KEY, 
time_chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_tetrachord_events (
pc_id int REFERENCES tetrachord_events (chord_id),
time_pc_inserted timestamp REFERENCES tetrachord_events (time_chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create pentachord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pentachord_events (
chord_id serial PRIMARY KEY, 
time_chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_pentachord_events (
pc_id int REFERENCES pentachord_events (chord_id),
time_pc_inserted timestamp REFERENCES pentachord_events (time_chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create hexachord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE hexachord_events (
chord_id serial PRIMARY KEY, 
time_chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_hexachord_events (
pc_id int REFERENCES hexachord_events (chord_id),
time_pc_inserted timestamp REFERENCES hexachord_events (time_chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
* create tables for static pc-sets a la Forte
** drops
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
drop table trichords;
drop table tetrachords;
drop table pentachords;
drop table hexachords;
#+END_SRC

#+RESULTS:
| DROP TABLE |
|------------|
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |

** table design with a default of 0 for pc1
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
create table trichords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int);
create table tetrachords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int, pc4 int);
create table pentachords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int, pc4 int, pc5 int);
create table hexachords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int, pc4 int, pc5 int, pc6 int);
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
** insert into
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO trichords (pc2, pc3) VALUES (1, 2)
#+END_SRC
** fix
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO tetrachords (midi2, midi3, midi4) VALUES (0, 1, 2, 3)
#+END_SRC
** fix
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO pentachords (midi1, midi2, midi3, midi4, midi5) VALUES (0, 1, 2, 3, 4)
#+END_SRC
** fix
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO hexachords (midi1, midi2, midi3, midi4, midi5, midi6) VALUES (0, 1, 2, 3, 4, 5)
#+END_SRC
* use korma for db interactions
** use korma.db to 'defdb' a connection to postgres
#+BEGIN_SRC clojure
(use 'korma.db)

(defdb prod (postgres {:db "heroku_psql_tutorial"
                       :user "a"
                       :host "localhost"
                       :port "5432"
                       :delimiters ""}))
#+END_SRC

#+RESULTS:
: nil{:pool #delay[{:status :pending, :val nil} 0x5b7acf94], :options {:naming {:keys #function[clojure.core/identity], :fields #function[clojure.core/identity]}, :delimiters [nil nil], :alias-delimiter " AS ", :subprotocol "postgresql"}}
** declare your entities before defining?
#+BEGIN_SRC clojure
(declare trichord-sets ;trichord-voicings 
)
#+END_SRC
** entities
*** --trichords with default pc1 zero field
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity trichord-sets
  (pk :set_id)
  (table :trichords)
  (entity-fields :pc1 :pc2 :pc3))
#+END_SRC

#+RESULTS:
: #'user/trichord-sets
*** trichords entity without default pc1 zero field
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity trichord-sets
  (pk :set_id)
  (table :trichords)
  (entity-fields :pc2 :pc3))
#+END_SRC

#+RESULTS:
: #'user/trichord-sets
*** tetrachord entity
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity tetrachord-sets
  (pk :set_id)
  (table :tetrachords)
  (entity-fields :pc1 :pc2 :pc3 :pc4))
#+END_SRC

#+RESULTS:
: #'user/tetrachord-sets

*** pentachord entity
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity pentachord-sets
  (pk :set_id)
  (table :pentachords)
  (entity-fields :pc1 :pc2 :pc3 :pc4 :pc5))
#+END_SRC

#+RESULTS:
: #'user/pentachord-sets

*** hexachord entity
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity hexachord-sets
  (pk :set_id)
  (table :hexachords)
  (entity-fields :pc1 :pc2 :pc3 :pc4 :pc5 :pc6))
#+END_SRC

#+RESULTS:
: #'user/hexachord-sets

** korma insert into the trichord entity
#+BEGIN_SRC clojure
(insert trichord-sets (values {:pc2 1 :pc3 2}))
#+END_SRC

#+RESULTS:
| :set_id | 1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 |

#+BEGIN_SRC clojure
(insert trichord-sets (values {:pc2 1 :pc3 3}))
#+END_SRC

#+RESULTS:
| :set_id | 2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 |



#+BEGIN_SRC clojure
(insert trichord-sets (values {:pc1 0 :pc2 1 :pc3 4}))
#+END_SRC

#+RESULTS:
| :set_id | 3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 |
* destructing and 'for' sequence
** trying to destructure trichord var
#+BEGIN_SRC clojure :results output
(println (count trichords)
         (count trichords-tn))
#+END_SRC

#+RESULTS:
: 12 19

#+BEGIN_SRC clojure
(first trichords)
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |

#+BEGIN_SRC clojure

#+END_SRC
** using 'for' sequence comprehensions
:PROPERTIES:
:topic:    sequence comprehensions
:END:
#+BEGIN_SRC clojure
(for [zero [0 12 24]
      one [1 13 25]
      three [3 15 27]]
       [zero one three])
#+END_SRC

#+RESULTS:
|  0 |  1 |  3 |
|  0 |  1 | 15 |
|  0 |  1 | 27 |
|  0 | 13 |  3 |
|  0 | 13 | 15 |
|  0 | 13 | 27 |
|  0 | 25 |  3 |
|  0 | 25 | 15 |
|  0 | 25 | 27 |
| 12 |  1 |  3 |
| 12 |  1 | 15 |
| 12 |  1 | 27 |
| 12 | 13 |  3 |
| 12 | 13 | 15 |
| 12 | 13 | 27 |
| 12 | 25 |  3 |
| 12 | 25 | 15 |
| 12 | 25 | 27 |
| 24 |  1 |  3 |
| 24 |  1 | 15 |
| 24 |  1 | 27 |
| 24 | 13 |  3 |
| 24 | 13 | 15 |
| 24 | 13 | 27 |
| 24 | 25 |  3 |
| 24 | 25 | 15 |
| 24 | 25 | 27 |

#+BEGIN_SRC clojure
(count (for [zero [0 12 24]
      one [1 13 25]
      three [3 15 27]]
       [zero one three]))
#+END_SRC

#+BEGIN_SRC clojure
;; (for [pcset [[0 1 2] [0 1 3]]
;;       n [0 12 24 36 48 60]]
;;   (map #(+ n pcset) pcset))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC clojure
(map #(+ 2 %) [0 1 2])
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 |

#+BEGIN_SRC clojure
(for [n (range 3)]
  (map #(+ n %) [0 1 2]))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 1 | 2 | 3 |
| 2 | 3 | 4 |

#+BEGIN_SRC clojure
(for [n (range 3)
      pcset [[0 1 2] [0 1 3]]]
  (map #(+ n %) pcset))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 0 | 1 | 3 |
| 1 | 2 | 3 |
| 1 | 2 | 4 |
| 2 | 3 | 4 |
| 2 | 3 | 5 |

#+BEGIN_SRC clojure
(for [pcset [[0 1 2] [0 1 3]]
      n (range 3)]
  (map #(+ n %) pcset))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 1 | 2 | 3 |
| 2 | 3 | 4 |
| 0 | 1 | 3 |
| 1 | 2 | 4 |
| 2 | 3 | 5 |

#+BEGIN_SRC clojure
(for [pcset [[0 1 2] [0 1 3]]
      
      n (range 3)]
  (map #(+ n %) pcset))
#+END_SRC
** for loop and destructure pcs from trichord sets
#+BEGIN_SRC clojure
(for [set trichords]
  (let [[a b c] set]
    c))
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 | 5 | 6 | 4 | 5 | 6 | 7 | 6 | 7 | 8 |

#+BEGIN_SRC clojure
(for [set trichords]
  (let [[a b c] set]
    {:a a :b b :c c}))
#+END_SRC

#+RESULTS:
| :a | 0 | :b | 1 | :c | 2 |
| :a | 0 | :b | 1 | :c | 3 |
| :a | 0 | :b | 1 | :c | 4 |
| :a | 0 | :b | 1 | :c | 5 |
| :a | 0 | :b | 1 | :c | 6 |
| :a | 0 | :b | 2 | :c | 4 |
| :a | 0 | :b | 2 | :c | 5 |
| :a | 0 | :b | 2 | :c | 6 |
| :a | 0 | :b | 2 | :c | 7 |
| :a | 0 | :b | 3 | :c | 6 |
| :a | 0 | :b | 3 | :c | 7 |
| :a | 0 | :b | 4 | :c | 8 |
* loop over pc_set vars and insert into set entity
** trichords
#+BEGIN_SRC clojure
(for [set trichords]
  (let [[a b c] set]
    (insert trichord-sets (values {:pc1 a :pc2 b :pc3 c}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 6 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 5 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 6 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 7 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 6 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 7 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 4 | :pc3 | 8 |

| 2 | 3 | 4 | 5 | 6 | 4 | 5 | 6 | 7 | 6 | 7 | 8 |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * from trichords;
#+END_SRC

#+RESULTS:
| set_id | comment | pc1 | pc2 | pc3 |
|--------+---------+-----+-----+-----|
|      1 |         |   0 |   1 |   2 |
|      2 |         |   0 |   1 |   3 |
|      3 |         |   0 |   1 |   4 |
|      4 |         |   0 |   1 |   5 |
|      5 |         |   0 |   1 |   6 |
|      6 |         |   0 |   2 |   4 |
|      7 |         |   0 |   2 |   5 |
|      8 |         |   0 |   2 |   6 |
|      9 |         |   0 |   2 |   7 |
|     10 |         |   0 |   3 |   6 |
|     11 |         |   0 |   3 |   7 |
|     12 |         |   0 |   4 |   8 |
** tetrachords
#+BEGIN_SRC clojure
(for [set tetrachords]
  (let [[a b c d] set]
    (insert tetrachord-sets (values {:pc1 a :pc2 b :pc3 c :pc4 d}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 7 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 | :pc4 | 6 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 6 | :pc4 | 7 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 6 |
| :set_id | 13 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 |
| :set_id | 14 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 7 |
| :set_id | 15 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 7 |
| :set_id | 16 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 |
| :set_id | 17 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 | :pc4 | 7 |
| :set_id | 18 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 4 | :pc4 | 7 |
| :set_id | 19 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 7 |
| :set_id | 20 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 8 |
| :set_id | 21 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 | :pc4 | 8 |
| :set_id | 22 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 |
| :set_id | 23 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 7 |
| :set_id | 24 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 5 | :pc4 | 7 |
| :set_id | 25 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 8 |
| :set_id | 26 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 6 | :pc4 | 8 |
| :set_id | 27 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 5 | :pc4 | 8 |
| :set_id | 28 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 5 | :pc4 | 8 |
| :set_id | 29 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 6 | :pc4 | 9 |
** pentachords
#+BEGIN_SRC clojure
(for [set pentachords]
  (let [[a b c d e] set]
    (insert pentachord-sets (values {:pc1 a :pc2 b :pc3 c :pc4 d :pc5 e}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 7 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 | :pc5 | 7 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 |
| :set_id | 13 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 8 |
| :set_id | 14 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 15 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 16 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 |
| :set_id | 17 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 8 |
| :set_id | 18 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 19 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 7 |
| :set_id | 20 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 7 | :pc5 | 8 |
| :set_id | 21 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 22 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 7 | :pc5 | 8 |
| :set_id | 23 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 24 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 25 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 26 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 27 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 28 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 29 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 30 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 31 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 9 |
| :set_id | 32 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 | :pc5 | 9 |
| :set_id | 33 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 34 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 | :pc5 | 9 |
| :set_id | 35 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 7 | :pc5 | 9 |
| :set_id | 36 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 7 |
| :set_id | 37 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 38 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 8 |
** hexachords
#+BEGIN_SRC clojure
(for [set hexachords]
  (let [[a b c d e f] set]
    (insert hexachord-sets (values {:pc1 a :pc2 b :pc3 c :pc4 d :pc5 e :pc6 f}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  5 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  6 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 | :pc6 |  6 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 | :pc6 |  6 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 | :pc6 |  7 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 | :pc6 |  7 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 | :pc5 | 7 | :pc6 |  8 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  7 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 | :pc6 |  7 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  7 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 | :pc6 |  7 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 | :pc6 |  7 |
| :set_id | 13 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  7 |
| :set_id | 14 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 15 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 16 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 17 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 18 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 19 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 20 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 | :pc6 |  9 |
| :set_id | 21 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 22 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 23 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 24 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 25 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 26 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 27 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 28 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 29 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 8 | :pc6 |  9 |
| :set_id | 30 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 31 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 8 | :pc6 |  9 |
| :set_id | 32 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 33 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 34 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 35 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 | :pc5 | 8 | :pc6 | 10 |
| :set_id | 36 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  7 |
| :set_id | 37 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  8 |
| :set_id | 38 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 39 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 40 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 41 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 42 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 43 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 44 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 45 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 46 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 47 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 48 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 49 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 50 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 | :pc5 | 7 | :pc6 |  9 |
* create voicings versions of pc_sets
** transpose all trichords in with a 'for'
#+BEGIN_SRC clojure
(for [pcset trichords
      n (range 12)]
  (map #(+ n %) pcset))
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 |
|  1 |  2 |  3 |
|  2 |  3 |  4 |
|  3 |  4 |  5 |
|  4 |  5 |  6 |
|  5 |  6 |  7 |
|  6 |  7 |  8 |
|  7 |  8 |  9 |
|  8 |  9 | 10 |
|  9 | 10 | 11 |
| 10 | 11 | 12 |
| 11 | 12 | 13 |
|  0 |  1 |  3 |
|  1 |  2 |  4 |
|  2 |  3 |  5 |
|  3 |  4 |  6 |
|  4 |  5 |  7 |
|  5 |  6 |  8 |
|  6 |  7 |  9 |
|  7 |  8 | 10 |
|  8 |  9 | 11 |
|  9 | 10 | 12 |
| 10 | 11 | 13 |
| 11 | 12 | 14 |
|  0 |  1 |  4 |
|  1 |  2 |  5 |
|  2 |  3 |  6 |
|  3 |  4 |  7 |
|  4 |  5 |  8 |
|  5 |  6 |  9 |
|  6 |  7 | 10 |
|  7 |  8 | 11 |
|  8 |  9 | 12 |
|  9 | 10 | 13 |
| 10 | 11 | 14 |
| 11 | 12 | 15 |
|  0 |  1 |  5 |
|  1 |  2 |  6 |
|  2 |  3 |  7 |
|  3 |  4 |  8 |
|  4 |  5 |  9 |
|  5 |  6 | 10 |
|  6 |  7 | 11 |
|  7 |  8 | 12 |
|  8 |  9 | 13 |
|  9 | 10 | 14 |
| 10 | 11 | 15 |
| 11 | 12 | 16 |
|  0 |  1 |  6 |
|  1 |  2 |  7 |
|  2 |  3 |  8 |
|  3 |  4 |  9 |
|  4 |  5 | 10 |
|  5 |  6 | 11 |
|  6 |  7 | 12 |
|  7 |  8 | 13 |
|  8 |  9 | 14 |
|  9 | 10 | 15 |
| 10 | 11 | 16 |
| 11 | 12 | 17 |
|  0 |  2 |  4 |
|  1 |  3 |  5 |
|  2 |  4 |  6 |
|  3 |  5 |  7 |
|  4 |  6 |  8 |
|  5 |  7 |  9 |
|  6 |  8 | 10 |
|  7 |  9 | 11 |
|  8 | 10 | 12 |
|  9 | 11 | 13 |
| 10 | 12 | 14 |
| 11 | 13 | 15 |
|  0 |  2 |  5 |
|  1 |  3 |  6 |
|  2 |  4 |  7 |
|  3 |  5 |  8 |
|  4 |  6 |  9 |
|  5 |  7 | 10 |
|  6 |  8 | 11 |
|  7 |  9 | 12 |
|  8 | 10 | 13 |
|  9 | 11 | 14 |
| 10 | 12 | 15 |
| 11 | 13 | 16 |
|  0 |  2 |  6 |
|  1 |  3 |  7 |
|  2 |  4 |  8 |
|  3 |  5 |  9 |
|  4 |  6 | 10 |
|  5 |  7 | 11 |
|  6 |  8 | 12 |
|  7 |  9 | 13 |
|  8 | 10 | 14 |
|  9 | 11 | 15 |
| 10 | 12 | 16 |
| 11 | 13 | 17 |
|  0 |  2 |  7 |
|  1 |  3 |  8 |
|  2 |  4 |  9 |
|  3 |  5 | 10 |
|  4 |  6 | 11 |
|  5 |  7 | 12 |
|  6 |  8 | 13 |
|  7 |  9 | 14 |
|  8 | 10 | 15 |
|  9 | 11 | 16 |
| 10 | 12 | 17 |
| 11 | 13 | 18 |
|  0 |  3 |  6 |
|  1 |  4 |  7 |
|  2 |  5 |  8 |
|  3 |  6 |  9 |
|  4 |  7 | 10 |
|  5 |  8 | 11 |
|  6 |  9 | 12 |
|  7 | 10 | 13 |
|  8 | 11 | 14 |
|  9 | 12 | 15 |
| 10 | 13 | 16 |
| 11 | 14 | 17 |
|  0 |  3 |  7 |
|  1 |  4 |  8 |
|  2 |  5 |  9 |
|  3 |  6 | 10 |
|  4 |  7 | 11 |
|  5 |  8 | 12 |
|  6 |  9 | 13 |
|  7 | 10 | 14 |
|  8 | 11 | 15 |
|  9 | 12 | 16 |
| 10 | 13 | 17 |
| 11 | 14 | 18 |
|  0 |  4 |  8 |
|  1 |  5 |  9 |
|  2 |  6 | 10 |
|  3 |  7 | 11 |
|  4 |  8 | 12 |
|  5 |  9 | 13 |
|  6 | 10 | 14 |
|  7 | 11 | 15 |
|  8 | 12 | 16 |
|  9 | 13 | 17 |
| 10 | 14 | 18 |
| 11 | 15 | 19 |
** strain to organize pitch collections with 'for'
#+BEGIN_SRC clojure
(def trichord-transpositions-plus12 
  (for [pcset trichords
        n (range 12)]
    (map #(+ n %) pcset)))
#+END_SRC

#+RESULTS:
: #'user/trichord-transpositions-plus12

#+BEGIN_SRC clojure
(rand-nth trichord-transpositions-plus12)
#+END_SRC

#+RESULTS:
| 5 | 8 | 11 |

#+BEGIN_SRC clojure
(for [pc [0 1 2]
      n [0 12 24]]
(+ pc n))
  
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 1 | 13 | 25 | 2 | 14 | 26 |

#+BEGIN_SRC clojure
(for [n [0 12 24]
      pc [[0 1 2]]]
  (map #(+ n %) pc))
  
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 |
| 12 | 13 | 14 |
| 24 | 25 | 26 |

#+BEGIN_SRC clojure
(for [a [[0 1 2] [0 1 3]]]
  (for [n a] a))
#+END_SRC

#+RESULTS:
| (0 1 2) | (0 1 2) | (0 1 2) |
| (0 1 3) | (0 1 3) | (0 1 3) |

#+BEGIN_SRC clojure
(for [a [[0 1 2] [0 1 3]]]
  (for [n a] a))
#+END_SRC

add to x the result of multiplying n by 12, where n ranges from 1 to 5
** naturally create a vector of octave-equivalent pcs by partitioning a 'for' loop
#+BEGIN_SRC clojure
(partition 9 (for [x (range 12)
      n [0 12 24 36 48 60 72 84 96]]
(+ x n)))
#+END_SRC

#+RESULTS:
|  0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 |  96 |
|  1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 |  97 |
|  2 | 14 | 26 | 38 | 50 | 62 | 74 | 86 |  98 |
|  3 | 15 | 27 | 39 | 51 | 63 | 75 | 87 |  99 |
|  4 | 16 | 28 | 40 | 52 | 64 | 76 | 88 | 100 |
|  5 | 17 | 29 | 41 | 53 | 65 | 77 | 89 | 101 |
|  6 | 18 | 30 | 42 | 54 | 66 | 78 | 90 | 102 |
|  7 | 19 | 31 | 43 | 55 | 67 | 79 | 91 | 103 |
|  8 | 20 | 32 | 44 | 56 | 68 | 80 | 92 | 104 |
|  9 | 21 | 33 | 45 | 57 | 69 | 81 | 93 | 105 |
| 10 | 22 | 34 | 46 | 58 | 70 | 82 | 94 | 106 |
| 11 | 23 | 35 | 47 | 59 | 71 | 83 | 95 | 107 |
* play and record
** use overtone
*** require and prefix overtone and korma functions
#+BEGIN_SRC clojure
(require '[overtone.live :as o]
         '[korma.core :as k])
#+END_SRC

#+RESULTS:
: nil
*** simply 'use sampled-piano and live
This is a blocking call--can you put it on a thread to execute behind
the scenes and not lock up the repl?
#+BEGIN_SRC clojure
(use 'overtone.live)
(use 'overtone.inst.sampled-piano)
#+END_SRC

#+RESULTS:
: nil

** make sound, import sound, record sound
*** play piano chords using doseq and sampled-piano
  #+BEGIN_SRC clojure :tangle yes
(defn play-piano-chord [a-chord]
        (doseq [note a-chord] (sampled-piano note)))


 #+END_SRC

  #+RESULTS:
  : #'overtone.music.pitch/play-piano-chord

#+RESULTS:
: nil

*** use 'sample' to load a sample (type 'PlayableSample')
#+BEGIN_SRC clojure
(def pang (sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/pang-short.wav"))
#+END_SRC

#+RESULTS:
: #'user/pang

#+BEGIN_SRC clojure
(type pang)
#+END_SRC

#+RESULTS:
: overtone.sc.sample.PlayableSample


#+BEGIN_SRC clojure
;; playback contents of buffer
(pang)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtoddd/stereo-partial-player 117>

*** use load-sample to load a sample into a buffer (type 'Sample')
#+BEGIN_SRC clojure
(def pang-buf (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/pang-short.wav"))
#+END_SRC

#+RESULTS:
: #'user/pang-buf

#+BEGIN_SRC clojure
(type pang-buf)
#+END_SRC

#+RESULTS:
: overtone.sc.sample.Sample

#+BEGIN_SRC clojure
;; (scope :buf pang-buf)
#+END_SRC

#+RESULTS:

*** play back contents of a buffer by: 'play-buf' given to 'out' inside a 'defsynth'
#+BEGIN_SRC clojure
(defsynth play-pang-buf [] (out 0 (play-buf 1 pang-buf)))

(play-pang-buf)
#+END_SRC

#+RESULTS:
: #<synth: play-pang-buf>#<synth-node[loading]: user/play-pang-buf 119>

#+BEGIN_SRC clojure
(defsynth reverb-on-left []
  (let [dry (play-buf 1 pang-buf)
    wet (free-verb dry 1)]
    (out 0 [wet dry])))

#+END_SRC

#+RESULTS:
: #<synth: reverb-on-left>

#+BEGIN_SRC clojure
(reverb-on-left)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/reverb-on-left 118>
*** record played sound to a file on disk

#+BEGIN_SRC clojure
(play-piano-chord (range 48 72 5))
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(play-piano-chord (range 48 72 5))
;; (48 53 58 63 68)
(recording-start "~/Desktop/five-fourths.wav")
;; make some noise. i.e.

;; stop recording
#+END_SRC

#+RESULTS:
: nil:recording-started

#+BEGIN_SRC clojure
(recording-stop)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/five-fourths.wav
*** load recording back as a playable-sample (and play)
#+BEGIN_SRC clojure
(def fivefourths (sample "~/Desktop/five-fourths.wav"))
#+END_SRC
#+RESULTS:
: #'user/fivefourths

#+BEGIN_SRC clojure
(fivefourths)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.sc.saddd/stereo-player 81>
*** load recording back into a buffer with load-sample
#+BEGIN_SRC clojure
(def fivefourthss (load-sample "~/Desktop/five-fourths.wav"))
#+END_SRC

#+RESULTS:
: #'user/fivefourthss

#+END_SRC
*** save sound in a buffer into a file
#+BEGIN_SRC clojure
(buffer-save b "~/Desktop/bong.wav") 
#+END_SRC
** timing
*** sleep a thread to create an execution delay
#+BEGIN_SRC clojure
(Thread/sleep 1000)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure :results output
(time (let [a (range 1e7)]
              (last a)))
#+END_SRC

#+RESULTS:
: "Elapsed time: 1099.191 msecs"
*** make a recording using Thread sleeping
#+BEGIN_SRC clojure

;; (48 53 58 63 68)
(recording-start "~/Desktop/five-fourths.wav")
;; make some noise. i.e.

;; stop recording
#+END_SRC

#+RESULTS:
: :recording-started

#+BEGIN_SRC clojure
(do (Thread/sleep 3000) (play-piano-chord (range 48 72 5)))
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(recording-stop)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/five-fourths.wav
*** try to play buffer back from an offset
**** calculate offset for 1.5 secs
#+BEGIN_SRC clojure
(* 44100 1.5)
#+END_SRC

#+RESULTS:
: 66150.0
**** a play-buf ugen
#+BEGIN_SRC clojure
(play-buf 1 fivefourthss)
#+END_SRC

#+RESULTS:
: #<sc-ugen: play-buf:ar [0]>
**** a synth to "play" a play-buf ugen
#+BEGIN_SRC clojure
(defsynth foths [] (out 0 [my_fourths_playbuffer]))
(foths)
#+END_SRC

#+RESULTS:
: #<synth: foths>#<synth-node[loading]: user/foths 127>
**** convenient function for playing a buffer
#+BEGIN_SRC clojure
(mono-partial-player 92 )
#+END_SRC

#+BEGIN_SRC clojure
;; deprecated?
(mono-player 92)
#+END_SRC
*** use freesound samples in buffers
**** load a sample into a buffer and print associated info
#+BEGIN_SRC clojure
(def floot (freesound 154237))
(floot)
#+END_SRC

#+RESULTS:
: #'user/floot#<synth-node[loading]: overtoddd/stereo-partial-player 470>
**** getting info from freesound samples--:filesize 775361 :duration 4.38873
#+BEGIN_SRC clojure
(freesound-info 154237)
#+END_SRC

:analysis_frames https://www.freesound.org/data/analysis/154/154237_2626346_frames.json
:duration 4.38873
:filesize 775361
:bitrate 1380

#+RESULTS:
| :description | This is an  Instrumental sample of a Transverse-Flute playing an C in the 4th Octave. The attack and sustain of the note is Tenuto and Non-Vibrato. The tuning frequency (concert pitch) used is 442 and the dynamic intention is of  mezzoforte. This sample belongs to a Multisample pack\r\n\r\nOrchestral Instrument: Transverse-Flute\r\nInstrument: Aerophone\r\nAerophone: Woodwind\r\nNote: C\r\nOctave: 4\r\nConcert Pitch: 442Hz\r\nDynamic: mezzoforte\r\nAttack: Tenuto\r\nSustain: Non-Vibrato\r\nMicrophone: Zoom-H2N\r\nMicrophone Setup: XY |

| :samplerate | 44100.0 |

#+BEGIN_SRC clojure
(for [[a b] (freesound-info 154237)]
            (println a b))
:description This is an  Instrumental sample of a Transverse-Flute playing an C in the 4th Octave. The attack and sustain of the note is Tenuto and Non-Vibrato. The tuning frequency (concert pitch) used is 442 and the dynamic intention is of  mezzoforte. This sample belongs to a Multisample pack

Orchestral Instrument: Transverse-Flute
Instrument: Aerophone
Aerophone: Woodwind
Note: C
Octave: 4
Concert Pitch: 442Hz
Dynamic: mezzoforte
Attack: Tenuto
Sustain: Non-Vibrato
Microphone: Zoom-H2N
Microphone Setup: XY
:samplerate 44100.0
:tags [flute multisample zoom-h2n non-vibrato tenuto mezzoforte c-4 woodwind aerophone transverse-flute]
:analysis_stats https://www.freesound.org/apiv2/sounds/154237/analysis/
:bookmark https://www.freesound.org/apiv2/sounds/154237/bookmark/
:previews {:preview-lq-ogg https://www.freesound.org/data/previews/154/154237_2626346-lq.ogg, :preview-lq-mp3 https://www.freesound.org/data/previews/154/154237_2626346-lq.mp3, :preview-hq-ogg https://www.freesound.org/data/previews/154/154237_2626346-hq.ogg, :preview-hq-mp3 https://www.freesound.org/data/previews/154/154237_2626346-hq.mp3}
:channels 2
:license http://creativecommons.org/licenses/by-nc/3.0/
:avg_rating 5.0
:images {:waveform_l https://www.freesound.org/data/displays/154/154237_2626346_wave_L.png, :waveform_m https://www.freesound.org/data/displays/154/154237_2626346_wave_M.png, :spectral_m https://www.freesound.org/data/displays/154/154237_2626346_spec_M.jpg, :spectral_l https://www.freesound.org/data/displays/154/154237_2626346_spec_L.jpg}
:name Transverse-Flute C-4 Tenuto Non-Vibrato
:comments https://www.freesound.org/apiv2/sounds/154237/comments/
:username Carlos_Vaquero
:type wav
:created 2012-05-03T18:01:30.369
:analysis_frames https://www.freesound.org/data/analysis/154/154237_2626346_frames.json
:duration 4.38873
:num_downloads 250
:rate https://www.freesound.org/apiv2/sounds/154237/rate/
:analysis No descriptors specified. You should indicate which descriptors you want with the 'descriptors' request parameter.
:id 154237
:comment https://www.freesound.org/apiv2/sounds/154237/comment/
:url https://www.freesound.org/people/Carlos_Vaquero/sounds/154237/
:filesize 775361
:bitrate 1380
:similar_sounds https://www.freesound.org/apiv2/sounds/154237/similar/
:num_comments 0
:bitdepth 16
:geotag nil
:download https://www.freesound.org/apiv2/sounds/154237/download/
:pack https://www.freesound.org/apiv2/packs/9548/
:num_ratings 1
#+END_SRC
**** freesound-sample num-frames
***** debug this
#+BEGIN_SRC clojure
(def fl-buf (freesound-sample 154237))

(num-frames fl-buf)

(defsynth fl-short [] (out 0 (play-buf 1 fl-buf :start-pos 96771)))
(fl-short)

(buffer-save fl-buf "~/Desktop/floots1.wav" :start-frame 96771)

(buffer-save fl-buf "~/Desktop/floots2.wav" "wav" "int16" 44100 96771)
#+END_SRC

#+BEGIN_SRC clojure
(def fl-buf (freesound-sample 154237))
#+END_SRC

#+BEGIN_SRC clojure :results output
(let [buf fl-buf]
  (println (buffer-info buf)
           (num-frames buf)
	   (buffer-id buf)))
#+END_SRC
#+RESULTS:
: #<buffer-info: 4.388730s stereo 91> 193543 91

#+RESULTS:

#+BEGIN_SRC clojure
(defsynth fl-short [] (out 0 (play-buf 1 fl-buf :start-pos 96771)))
(fl-short)
#+END_SRC

#+RESULTS:
: #<synth: fl-short>#<synth-node[loading]: user/fl-short 496>

#+BEGIN_SRC clojure
(mono-partial-player 91 :start 0.63)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtoneddd/mono-partial-player 493>
#+BEGIN_SRC clojure
(buffer-save fl-buf "~/Desktop/floots1.wav" :start-frame 96771)
#+END_SRC

#+BEGIN_SRC clojure
(buffer-save fl-buf "~/Desktop/floots2.wav" "wav" "int16" 44100 96771)
#+END_SRC

#+RESULTS:
: :buffer-saved

#+BEGIN_SRC clojure
(buffer-save  "~/Desktop/foths5.wav"
             ;; :header "wav"
             ;; :samples "int32"
             :n-frames 1000
             :start-frame 1
             )
#+END_SRC
**** load-sample a wav file from disk into a buffer
#+BEGIN_SRC clojure
(def my_fourths_playbuffer1 (load-sample "~/Desktop/five-fourths.wav"))
#+END_SRC

#+RESULTS:
: #'user/my_fourths_playbuffer1

#+BEGIN_SRC clojure :results output
(println (buffer-info my_fourths_playbuffer1)
(num-frames my_fourths_playbuffer1)
(buffer-id my_fourths_playbuffer1))
#+END_SRC

#+RESULTS:
: #<buffer-info: 8.916463s stereo 92> 393216 92
**** define a synth to play back buffer from given start-position
#+BEGIN_SRC clojure
(defsynth foths1 [] (out 0 (play-buf 1 my_fourths_playbuffer1 :start-pos 66150)))
(foths1)
#+END_SRC

#+RESULTS:
: #<synth: foths1>#<synth-node[loading]: user/foths1 132>
**** create a second ugen for buffer playback
#+BEGIN_SRC clojure
(def my_fourths_playbuffer2 (play-buf
                             :num-channels 1
                             :bufnum 92
                             :rate 1.0
			     :trigger 1.0
			     :start-pos 66510
			     :loop 0
			     :action 0))
#+END_SRC

#+RESULTS:
: #'user/my_fourths_playbuffer2

#+BEGIN_SRC clojure
(type my_fourths_playbuffer2)
#+END_SRC

#+RESULTS:
: overtone.sc.machinery.ugen.sc_ugen.SCUGen

#+BEGIN_SRC clojure
(defsynth foths2 [] (out 0 [my_fourths_playbuffer2]))
(foths2)
#+END_SRC

#+RESULTS:
: #<synth: foths2>#<synth-node[loading]: user/foths2 191>

#+BEGIN_SRC clojure :results output
(let [bf (rand-int 93)]
  (defsynth foths2 [] (out 0 (play-buf :num-channels 1 :bufnum bf)))
  (println bf)
  (foths2))


#+END_SRC

#+RESULTS:
: 68
**** writing to disk a number of frames of a buffer--buffer-save
#+BEGIN_SRC clojure
(buffer-save my_fourths_playbuffer1 "~/Desktop/foths5.wav"
             ;; :header "wav"
             ;; :samples "int32"
             :n-frames 1000
             :start-frame 1
             )
#+END_SRC

#+RESULTS:
: :buffer-saved
**** does not write the expected number of frames?
**** use :start-pos in mono-partial-player 
#+BEGIN_SRC clojure
(mono-player 92 :start-pos 366510 :loop? 0)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.sc.sample/mono-player 197>nil
**** various miscellaneous buffers
#+BEGIN_SRC clojure
(buffer? my_fourths_playbuffer1)
#+END_SRC

#+RESULTS:
: true

#+BEGIN_SRC clojure
(def my_fourths_playbuffer3 (load-sample "~/Desktop/foths3.wav"))
(buffer-id my_fourths_playbuffer3)
#+END_SRC

#+RESULTS:
: #'user/my_fourths_playbuffer399

#+BEGIN_SRC clojure :results output
(println (buffer-info my_fourths_playbuffer3)
(num-frames my_fourths_playbuffer3)
(buffer-id my_fourths_playbuffer3))
#+END_SRC

#+RESULTS:
: #<buffer-info: 8.916463s stereo 99> 393216 99
** idiomatic overtone timing functions
*** overtone.live/apply-by
overtone.live/apply-by
([ms-time f args* argseq])
  Ahead-of-schedule function appliction. Works identically to
   apply, except that it takes an additional initial argument:
   ms-time. If ms-time is in the future, function application is delayed
   until *apply-ahead* ms before that time, if ms-time is in the past
   function application is immediate.

   If you wish to apply at a specific time rather than slightly before
   it, see apply-at.

   Can be used to implement the 'temporal recursion' pattern. This is
   where a function has a call to apply-by at its tail:

   (defn foo
     [t freq]
     (at t (my-synth freq))
     (let [next-t (+ t 200)
           next-f (+ freq 100]
       (apply-by next-t #'foo [next-t next-f])))

   (foo (now) 100)

   The fn foo is written in a recursive style, yet the recursion is
   scheduled for application 200ms in the future. By passing a function
   using #'foo syntax instead of the symbole foo, when later called by
   the scheduler it will lookup based on the symbol rather than using
   the instance of the function defined earlier. This allows us to
   redefine foo whilst the temporal recursion is continuing to execute.

   Note that by using apply-by, we can schedule events to happen at
   exactly time t within the body of the fn, as the scheduled recursion
   of the fn itself happens ahead of t. apply-by is therefore typically
   used in conjunction with the at macro for scheduling SuperCollider
   server events.

   To stop an executing temporal recursion pattern, either redefine the
   function to not call itself, or use (stop).
*** overtone.live/apply-at
([ms-time f args* argseq])
  Scheduled function appliction. Works identically to apply, except
   that it takes an additional initial argument: ms-time. If ms-time is
   in the future, function application is delayed until that time, if
   ms-time is in the past function application is immediate.

   If you wish to apply slightly before specific time rather than
   exactly at it, see apply-by.

   Can be used to implement the 'temporal recursion' pattern. This is
   where a function has a call to apply-at at its tail:

   (defn foo
     [t val]
     (println val)
     (let [next-t (+ t 200)]
       (apply-at next-t #'foo [next-t (inc val)])))

   (foo (now) 0) ;=> 0, 1, 2, 3...

   The fn foo is written in a recursive style, yet the recursion is
   scheduled for application 200ms in the future. By passing a function
   using #'foo syntax instead of the symbole foo, when later called by
   the scheduler it will lookup based on the symbol rather than using
   the instance of the function defined earlier. This allows us to
   redefine foo whilst the temporal recursion is continuing to execute.

   To stop an executing temporal recursion pattern, either redefine the
   function to not call itself, or use (stop).
*** clojure.core/apply
([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args])
  Applies fn f to the argument list formed by prepending intervening
  arguments to args.
#+BEGIN_SRC clojure
(apply + 1 [2])
#+END_SRC

#+RESULTS:
: 3

*** 
#+BEGIN_SRC clojure
   (defn foo
     [t val]
     (println val)
     (let [next-t (+ t 200)]
       (apply-at next-t #'foo [next-t (inc val)])))

   (foo (now) 0)
#+END_SRC

#+RESULTS:
: #'user/foo#<ScheduledJob id: 1, created-at: Mon 10:12:26s, initial-delay: 200, desc: "Overtone delayed fn", scheduled? true>

** stop playing everything
#+BEGIN_SRC clojure
(stop)
#+END_SRC

** record and stop
#+BEGIN_SRC clojure
(defn record-and-stop [start-time duration]
  (recording-start "~/Desktop/new.wav")
  (play-piano-chord (range 48 72 5))
  (Thread/sleep duration)
  (recording-stop))
#+END_SRC

#+RESULTS:
: #'user/record-and-stop

#+BEGIN_SRC clojure
(record-and-stop (now) 4000)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/new.wav

#+BEGIN_SRC clojure
(def counter (atom 0))

@counter
#+END_SRC

#+RESULTS:
: #'user/counter0

#+BEGIN_SRC clojure
(swap! counter inc)

#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC clojure
(str "stuff" @counter ".wav")
#+END_SRC

#+RESULTS:
: stuff2.wav

#+BEGIN_SRC clojure
(str "stuff" (swap! counter inc) ".wav")
#+END_SRC

#+RESULTS:
: stuff4.wav

#+BEGIN_SRC clojure
(def sc012 [[0 1 2][1 2 3]])
#+END_SRC

#+RESULTS:
: #'user/sc012

#+BEGIN_SRC clojure
(
#+END_SRC
* collection of octaves of pcs
** 9 octaves
#+BEGIN_SRC clojure
(def zeros (vec (range 0 108 12)))
(def ones (vec (range 1 108 12)))
(def twos (vec (range 2 108 12)))
(def threes (vec (range 3 108 12)))
(def fours (vec (range 4 108 12)))
(def fives (vec (range 5 108 12)))
(def sixes (vec (range 6 108 12)))
(def sevens (vec (range 7 108 12)))
(def eights (vec (range 8 108 12)))
(def nines (vec (range 9 108 12)))
(def tens (vec (range 10 108 12)))
(def elevens (vec (range 11 108 12)))

#+END_SRC

#+RESULTS:
: #'user/zeros#'user/ones#'user/twos#'user/threes#'user/fours#'user/fives#'user/sixes#'user/sevens#'user/eights#'user/nines#'user/tens#'user/elevens

#+BEGIN_SRC clojure
(count zeros)
#+END_SRC

#+RESULTS:
: 9

#+BEGIN_SRC clojure
(count (for [a zeros b twos]  [a b]))
#+END_SRC

#+RESULTS:
: 81

#+BEGIN_SRC clojure
(count (for [a zeros b twos c threes]  [a b c]))
#+END_SRC

#+RESULTS:
: 729

#+BEGIN_SRC clojure
(count (for [a zeros b twos c threes d fours]  [a b c]))
#+END_SRC

#+RESULTS:
: 6561

** piano range 21-108
#+BEGIN_SRC clojure
(def pc0 (vec (range 24 108 12)))
(def pc1 (vec (range 25 108 12)))
(def pc2 (vec (range 26 108 12)))
(def pc3 (vec (range 27 108 12)))
(def pc4 (vec (range 28 108 12)))
(def pc5 (vec (range 29 108 12)))
(def pc6 (vec (range 30 108 12)))
(def pc7 (vec (range 31 108 12)))
(def pc8 (vec (range 32 108 12)))
(def pc9 (vec (range 21 108 12)))
(def pc10 (vec (range 22 108 12)))
(def pc11 (vec (range 23 108 12)))

#+END_SRC

#+RESULTS:
: #'user/pc0#'user/pc1#'user/pc2#'user/pc3#'user/pc4#'user/pc5#'user/pc6#'user/pc7#'user/pc8#'user/pc9#'user/pc10#'user/pc11

#+BEGIN_SRC clojure
pc11
#+END_SRC

#+RESULTS:
| 23 | 35 | 47 | 59 | 71 | 83 | 95 | 107 |

** cartesian products
#+BEGIN_SRC clojure
(for [a ["a" "b" "c"] b ["a" "b" "c"] c ["a" "b" "c"]] [a b c])
#+END_SRC

#+RESULTS:
| a | a | a |
| a | a | b |
| a | a | c |
| a | b | a |
| a | b | b |
| a | b | c |
| a | c | a |
| a | c | b |
| a | c | c |
| b | a | a |
| b | a | b |
| b | a | c |
| b | b | a |
| b | b | b |
| b | b | c |
| b | c | a |
| b | c | b |
| b | c | c |
| c | a | a |
| c | a | b |
| c | a | c |
| c | b | a |
| c | b | b |
| c | b | c |
| c | c | a |
| c | c | b |
| c | c | c |

#+BEGIN_SRC clojure
(count (for [a ["a" "b" "c"] b ["a" "b" "c"] c ["a" "b" "c"]] [a b c]))
#+END_SRC


#+RESULTS:
: 27

#+BEGIN_SRC clojure
(count trichords-tn)
#+END_SRC

#+RESULTS:
: 19

#+BEGIN_SRC clojure
(first trichords-tn)
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |

** cartesian products of 013s
#+BEGIN_SRC clojure
(count (for [a pc0
      b pc1 
      c pc3 ]
       [a b c]))
#+END_SRC

#+RESULTS:
: 343

#+BEGIN_SRC clojure
(def tris (for [a pc0
      b pc1 
      c pc3 ]
       [a b c]))
#+END_SRC

#+RESULTS:
: #'user/tris

#+BEGIN_SRC clojure
(subvec (vec tris) 0 4)
#+END_SRC

#+RESULTS:
| 24 | 25 | 27 |
| 24 | 25 | 39 |
| 24 | 25 | 51 |
| 24 | 25 | 63 |

#+BEGIN_SRC clojure
tris
#+END_SRC

#+RESULTS:
| 24 | 25 | 27 |
| 24 | 25 | 39 |
| 24 | 25 | 51 |
| 24 | 25 | 63 |
| 24 | 25 | 75 |
| 24 | 25 | 87 |
| 24 | 25 | 99 |
| 24 | 37 | 27 |
| 24 | 37 | 39 |
| 24 | 37 | 51 |
| 24 | 37 | 63 |
| 24 | 37 | 75 |
| 24 | 37 | 87 |
| 24 | 37 | 99 |
| 24 | 49 | 27 |
| 24 | 49 | 39 |
| 24 | 49 | 51 |
| 24 | 49 | 63 |
| 24 | 49 | 75 |
| 24 | 49 | 87 |
| 24 | 49 | 99 |
| 24 | 61 | 27 |
| 24 | 61 | 39 |
| 24 | 61 | 51 |
| 24 | 61 | 63 |
| 24 | 61 | 75 |
| 24 | 61 | 87 |
| 24 | 61 | 99 |
| 24 | 73 | 27 |
| 24 | 73 | 39 |
| 24 | 73 | 51 |
| 24 | 73 | 63 |
| 24 | 73 | 75 |
| 24 | 73 | 87 |
| 24 | 73 | 99 |
| 24 | 85 | 27 |
| 24 | 85 | 39 |
| 24 | 85 | 51 |
| 24 | 85 | 63 |
| 24 | 85 | 75 |
| 24 | 85 | 87 |
| 24 | 85 | 99 |
| 24 | 97 | 27 |
| 24 | 97 | 39 |
| 24 | 97 | 51 |
| 24 | 97 | 63 |
| 24 | 97 | 75 |
| 24 | 97 | 87 |
| 24 | 97 | 99 |
| 36 | 25 | 27 |
| 36 | 25 | 39 |
| 36 | 25 | 51 |
| 36 | 25 | 63 |
| 36 | 25 | 75 |
| 36 | 25 | 87 |
| 36 | 25 | 99 |
| 36 | 37 | 27 |
| 36 | 37 | 39 |
| 36 | 37 | 51 |
| 36 | 37 | 63 |
| 36 | 37 | 75 |
| 36 | 37 | 87 |
| 36 | 37 | 99 |
| 36 | 49 | 27 |
| 36 | 49 | 39 |
| 36 | 49 | 51 |
| 36 | 49 | 63 |
| 36 | 49 | 75 |
| 36 | 49 | 87 |
| 36 | 49 | 99 |
| 36 | 61 | 27 |
| 36 | 61 | 39 |
| 36 | 61 | 51 |
| 36 | 61 | 63 |
| 36 | 61 | 75 |
| 36 | 61 | 87 |
| 36 | 61 | 99 |
| 36 | 73 | 27 |
| 36 | 73 | 39 |
| 36 | 73 | 51 |
| 36 | 73 | 63 |
| 36 | 73 | 75 |
| 36 | 73 | 87 |
| 36 | 73 | 99 |
| 36 | 85 | 27 |
| 36 | 85 | 39 |
| 36 | 85 | 51 |
| 36 | 85 | 63 |
| 36 | 85 | 75 |
| 36 | 85 | 87 |
| 36 | 85 | 99 |
| 36 | 97 | 27 |
| 36 | 97 | 39 |
| 36 | 97 | 51 |
| 36 | 97 | 63 |
| 36 | 97 | 75 |
| 36 | 97 | 87 |
| 36 | 97 | 99 |
| 48 | 25 | 27 |
| 48 | 25 | 39 |
| 48 | 25 | 51 |
| 48 | 25 | 63 |
| 48 | 25 | 75 |
| 48 | 25 | 87 |
| 48 | 25 | 99 |
| 48 | 37 | 27 |
| 48 | 37 | 39 |
| 48 | 37 | 51 |
| 48 | 37 | 63 |
| 48 | 37 | 75 |
| 48 | 37 | 87 |
| 48 | 37 | 99 |
| 48 | 49 | 27 |
| 48 | 49 | 39 |
| 48 | 49 | 51 |
| 48 | 49 | 63 |
| 48 | 49 | 75 |
| 48 | 49 | 87 |
| 48 | 49 | 99 |
| 48 | 61 | 27 |
| 48 | 61 | 39 |
| 48 | 61 | 51 |
| 48 | 61 | 63 |
| 48 | 61 | 75 |
| 48 | 61 | 87 |
| 48 | 61 | 99 |
| 48 | 73 | 27 |
| 48 | 73 | 39 |
| 48 | 73 | 51 |
| 48 | 73 | 63 |
| 48 | 73 | 75 |
| 48 | 73 | 87 |
| 48 | 73 | 99 |
| 48 | 85 | 27 |
| 48 | 85 | 39 |
| 48 | 85 | 51 |
| 48 | 85 | 63 |
| 48 | 85 | 75 |
| 48 | 85 | 87 |
| 48 | 85 | 99 |
| 48 | 97 | 27 |
| 48 | 97 | 39 |
| 48 | 97 | 51 |
| 48 | 97 | 63 |
| 48 | 97 | 75 |
| 48 | 97 | 87 |
| 48 | 97 | 99 |
| 60 | 25 | 27 |
| 60 | 25 | 39 |
| 60 | 25 | 51 |
| 60 | 25 | 63 |
| 60 | 25 | 75 |
| 60 | 25 | 87 |
| 60 | 25 | 99 |
| 60 | 37 | 27 |
| 60 | 37 | 39 |
| 60 | 37 | 51 |
| 60 | 37 | 63 |
| 60 | 37 | 75 |
| 60 | 37 | 87 |
| 60 | 37 | 99 |
| 60 | 49 | 27 |
| 60 | 49 | 39 |
| 60 | 49 | 51 |
| 60 | 49 | 63 |
| 60 | 49 | 75 |
| 60 | 49 | 87 |
| 60 | 49 | 99 |
| 60 | 61 | 27 |
| 60 | 61 | 39 |
| 60 | 61 | 51 |
| 60 | 61 | 63 |
| 60 | 61 | 75 |
| 60 | 61 | 87 |
| 60 | 61 | 99 |
| 60 | 73 | 27 |
| 60 | 73 | 39 |
| 60 | 73 | 51 |
| 60 | 73 | 63 |
| 60 | 73 | 75 |
| 60 | 73 | 87 |
| 60 | 73 | 99 |
| 60 | 85 | 27 |
| 60 | 85 | 39 |
| 60 | 85 | 51 |
| 60 | 85 | 63 |
| 60 | 85 | 75 |
| 60 | 85 | 87 |
| 60 | 85 | 99 |
| 60 | 97 | 27 |
| 60 | 97 | 39 |
| 60 | 97 | 51 |
| 60 | 97 | 63 |
| 60 | 97 | 75 |
| 60 | 97 | 87 |
| 60 | 97 | 99 |
| 72 | 25 | 27 |
| 72 | 25 | 39 |
| 72 | 25 | 51 |
| 72 | 25 | 63 |
| 72 | 25 | 75 |
| 72 | 25 | 87 |
| 72 | 25 | 99 |
| 72 | 37 | 27 |
| 72 | 37 | 39 |
| 72 | 37 | 51 |
| 72 | 37 | 63 |
| 72 | 37 | 75 |
| 72 | 37 | 87 |
| 72 | 37 | 99 |
| 72 | 49 | 27 |
| 72 | 49 | 39 |
| 72 | 49 | 51 |
| 72 | 49 | 63 |
| 72 | 49 | 75 |
| 72 | 49 | 87 |
| 72 | 49 | 99 |
| 72 | 61 | 27 |
| 72 | 61 | 39 |
| 72 | 61 | 51 |
| 72 | 61 | 63 |
| 72 | 61 | 75 |
| 72 | 61 | 87 |
| 72 | 61 | 99 |
| 72 | 73 | 27 |
| 72 | 73 | 39 |
| 72 | 73 | 51 |
| 72 | 73 | 63 |
| 72 | 73 | 75 |
| 72 | 73 | 87 |
| 72 | 73 | 99 |
| 72 | 85 | 27 |
| 72 | 85 | 39 |
| 72 | 85 | 51 |
| 72 | 85 | 63 |
| 72 | 85 | 75 |
| 72 | 85 | 87 |
| 72 | 85 | 99 |
| 72 | 97 | 27 |
| 72 | 97 | 39 |
| 72 | 97 | 51 |
| 72 | 97 | 63 |
| 72 | 97 | 75 |
| 72 | 97 | 87 |
| 72 | 97 | 99 |
| 84 | 25 | 27 |
| 84 | 25 | 39 |
| 84 | 25 | 51 |
| 84 | 25 | 63 |
| 84 | 25 | 75 |
| 84 | 25 | 87 |
| 84 | 25 | 99 |
| 84 | 37 | 27 |
| 84 | 37 | 39 |
| 84 | 37 | 51 |
| 84 | 37 | 63 |
| 84 | 37 | 75 |
| 84 | 37 | 87 |
| 84 | 37 | 99 |
| 84 | 49 | 27 |
| 84 | 49 | 39 |
| 84 | 49 | 51 |
| 84 | 49 | 63 |
| 84 | 49 | 75 |
| 84 | 49 | 87 |
| 84 | 49 | 99 |
| 84 | 61 | 27 |
| 84 | 61 | 39 |
| 84 | 61 | 51 |
| 84 | 61 | 63 |
| 84 | 61 | 75 |
| 84 | 61 | 87 |
| 84 | 61 | 99 |
| 84 | 73 | 27 |
| 84 | 73 | 39 |
| 84 | 73 | 51 |
| 84 | 73 | 63 |
| 84 | 73 | 75 |
| 84 | 73 | 87 |
| 84 | 73 | 99 |
| 84 | 85 | 27 |
| 84 | 85 | 39 |
| 84 | 85 | 51 |
| 84 | 85 | 63 |
| 84 | 85 | 75 |
| 84 | 85 | 87 |
| 84 | 85 | 99 |
| 84 | 97 | 27 |
| 84 | 97 | 39 |
| 84 | 97 | 51 |
| 84 | 97 | 63 |
| 84 | 97 | 75 |
| 84 | 97 | 87 |
| 84 | 97 | 99 |
| 96 | 25 | 27 |
| 96 | 25 | 39 |
| 96 | 25 | 51 |
| 96 | 25 | 63 |
| 96 | 25 | 75 |
| 96 | 25 | 87 |
| 96 | 25 | 99 |
| 96 | 37 | 27 |
| 96 | 37 | 39 |
| 96 | 37 | 51 |
| 96 | 37 | 63 |
| 96 | 37 | 75 |
| 96 | 37 | 87 |
| 96 | 37 | 99 |
| 96 | 49 | 27 |
| 96 | 49 | 39 |
| 96 | 49 | 51 |
| 96 | 49 | 63 |
| 96 | 49 | 75 |
| 96 | 49 | 87 |
| 96 | 49 | 99 |
| 96 | 61 | 27 |
| 96 | 61 | 39 |
| 96 | 61 | 51 |
| 96 | 61 | 63 |
| 96 | 61 | 75 |
| 96 | 61 | 87 |
| 96 | 61 | 99 |
| 96 | 73 | 27 |
| 96 | 73 | 39 |
| 96 | 73 | 51 |
| 96 | 73 | 63 |
| 96 | 73 | 75 |
| 96 | 73 | 87 |
| 96 | 73 | 99 |
| 96 | 85 | 27 |
| 96 | 85 | 39 |
| 96 | 85 | 51 |
| 96 | 85 | 63 |
| 96 | 85 | 75 |
| 96 | 85 | 87 |
| 96 | 85 | 99 |
| 96 | 97 | 27 |
| 96 | 97 | 39 |
| 96 | 97 | 51 |
| 96 | 97 | 63 |
| 96 | 97 | 75 |
| 96 | 97 | 87 |
| 96 | 97 | 99 |

* make a sequencer function to play single line melodies at 60bpms
** sequencer
Note, are or how are these functions that sleep blocking??
#+BEGIN_SRC clojure
(defn sequencer [midis]
  (map #(do (Thread/sleep 1000) (sampled-piano %)) midis))
#+END_SRC

#+RESULTS:
: #'user/sequencer

#+BEGIN_SRC clojure
(sequencer [48 59])
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 2375> #<synth-node(loading): overtone.inst.973/sampled-piano 2376>)

#+BEGIN_SRC clojure
(sequencer (range 21 108 11))
(sequencer (range 21 108 7))
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 69> #<synth-node(live): overtone.inst.973/sampled-piano 70> #<synth-node(live): overtone.inst.973/sampled-piano 71> #<synth-node(live): overtone.inst.973/sampled-piano 72> #<synth-node(live): overtone.inst.973/sampled-piano 73> #<synth-node(live): overtone.inst.973/sampled-piano 74> #<synth-node(live): overtone.inst.973/sampled-piano 75> #<synth-node(loading): overtone.inst.973/sampled-piano 76>)

** chord-sequencer
#+BEGIN_SRC clojure
(defn chord-sequencer [midis]
  (map #(do (Thread/sleep 1000) (play-piano-chord %)) midis))
#+END_SRC

#+RESULTS:
: #'overtone.music.pitch/chord-sequencer

#+BEGIN_SRC clojure
(chord-sequencer [[24 59 74] [25 60 75]])
#+END_SRC

#+RESULTS:


** [#A] chord-sequencer-fn--HOF that takes a millisecond amt and returns a play chord fn
#+BEGIN_SRC clojure
(defn chord-sequencer-fn [ms]
  (fn [midis] (map #(do (Thread/sleep ms) (play-piano-chord %)) midis)))
#+END_SRC

#+RESULTS:
: #'user/chord-sequencer-fn

#+BEGIN_SRC clojure
((chord-sequencer-fn 2000) [[24 59 74] [25 60 75]])
#+END_SRC

#+RESULTS:



#+BEGIN_SRC clojure
(sequencer (flatten (subvec (vec tris) 10 100)))
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 137> #<synth-node(live): overtone.inst.973/sampled-piano 138> #<synth-node(loading): overtone.inst.973/sampled-piano 139>)

#+BEGIN_SRC clojure
(defn chord-sequencer-fn-print [ms]
  (fn [midis] (map #(do (println midis) (Thread/sleep ms) (play-piano-chord %)) midis)))
#+END_SRC
** mapping octave requirement predicates over sets
#+BEGIN_SRC clojure
(map (fn [vov] (every? #(< % 36) vov)) [[24 36 48] [0 1 3]])
#+END_SRC

#+RESULTS:
| false | true |

#+BEGIN_SRC clojure
(let [args [0 24 36]]
  (cond (every? #(< % 36) args) args))
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(let [args [[0 24 36] [37 38 39]]
  (cond (every? #(< % 36) args) args))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure :results output
(for [args [[0 24 36] [37 38 39]]] (cond (every? #(> % 36) args) (println "booya")))
#+END_SRC

#+RESULTS:
: booya


Note that in org-babel results return values of 'nil' are left out of
the results block but are included in the results when same function
is called from the repl

#+BEGIN_SRC clojure
(for [args [[0 24 36] [37 38 39]]] (cond (every? #(> % 36) args) args))
#+END_SRC

#+RESULTS:
| 37 | 38 | 39 |



#+RESULTS:
| 48 | 37 | 39 |
| 48 | 37 | 51 |
| 48 | 37 | 63 |
| 48 | 37 | 75 |
| 48 | 37 | 87 |
| 48 | 37 | 99 |
| 48 | 49 | 39 |
| 48 | 49 | 51 |
| 48 | 49 | 63 |
| 48 | 49 | 75 |
| 48 | 49 | 87 |
| 48 | 49 | 99 |
| 48 | 61 | 39 |
| 48 | 61 | 51 |
| 48 | 61 | 63 |
| 48 | 61 | 75 |
| 48 | 61 | 87 |
| 48 | 61 | 99 |
| 48 | 73 | 39 |
| 48 | 73 | 51 |
| 48 | 73 | 63 |
| 48 | 73 | 75 |
| 48 | 73 | 87 |
| 48 | 73 | 99 |
| 48 | 85 | 39 |
| 48 | 85 | 51 |
| 48 | 85 | 63 |
| 48 | 85 | 75 |
| 48 | 85 | 87 |
| 48 | 85 | 99 |
| 48 | 97 | 39 |
| 48 | 97 | 51 |
| 48 | 97 | 63 |
| 48 | 97 | 75 |
| 48 | 97 | 87 |
| 48 | 97 | 99 |
| 60 | 37 | 39 |
| 60 | 37 | 51 |
| 60 | 37 | 63 |
| 60 | 37 | 75 |
| 60 | 37 | 87 |
| 60 | 37 | 99 |
| 60 | 49 | 39 |
| 60 | 49 | 51 |
| 60 | 49 | 63 |
| 60 | 49 | 75 |
| 60 | 49 | 87 |
| 60 | 49 | 99 |
| 60 | 61 | 39 |
| 60 | 61 | 51 |
| 60 | 61 | 63 |
| 60 | 61 | 75 |
| 60 | 61 | 87 |
| 60 | 61 | 99 |
| 60 | 73 | 39 |
| 60 | 73 | 51 |
| 60 | 73 | 63 |
| 60 | 73 | 75 |
| 60 | 73 | 87 |
| 60 | 73 | 99 |
| 60 | 85 | 39 |
| 60 | 85 | 51 |
| 60 | 85 | 63 |
| 60 | 85 | 75 |
| 60 | 85 | 87 |
| 60 | 85 | 99 |
| 60 | 97 | 39 |
| 60 | 97 | 51 |
| 60 | 97 | 63 |
| 60 | 97 | 75 |
| 60 | 97 | 87 |
| 60 | 97 | 99 |
| 72 | 37 | 39 |
| 72 | 37 | 51 |
| 72 | 37 | 63 |
| 72 | 37 | 75 |
| 72 | 37 | 87 |
| 72 | 37 | 99 |
| 72 | 49 | 39 |
| 72 | 49 | 51 |
| 72 | 49 | 63 |
| 72 | 49 | 75 |
| 72 | 49 | 87 |
| 72 | 49 | 99 |
| 72 | 61 | 39 |
| 72 | 61 | 51 |
| 72 | 61 | 63 |
| 72 | 61 | 75 |
| 72 | 61 | 87 |
| 72 | 61 | 99 |
| 72 | 73 | 39 |
| 72 | 73 | 51 |
| 72 | 73 | 63 |
| 72 | 73 | 75 |
| 72 | 73 | 87 |
| 72 | 73 | 99 |
| 72 | 85 | 39 |
| 72 | 85 | 51 |
| 72 | 85 | 63 |
| 72 | 85 | 75 |
| 72 | 85 | 87 |
| 72 | 85 | 99 |
| 72 | 97 | 39 |
| 72 | 97 | 51 |
| 72 | 97 | 63 |
| 72 | 97 | 75 |
| 72 | 97 | 87 |
| 72 | 97 | 99 |
| 84 | 37 | 39 |
| 84 | 37 | 51 |
| 84 | 37 | 63 |
| 84 | 37 | 75 |
| 84 | 37 | 87 |
| 84 | 37 | 99 |
| 84 | 49 | 39 |
| 84 | 49 | 51 |
| 84 | 49 | 63 |
| 84 | 49 | 75 |
| 84 | 49 | 87 |
| 84 | 49 | 99 |
| 84 | 61 | 39 |
| 84 | 61 | 51 |
| 84 | 61 | 63 |
| 84 | 61 | 75 |
| 84 | 61 | 87 |
| 84 | 61 | 99 |
| 84 | 73 | 39 |
| 84 | 73 | 51 |
| 84 | 73 | 63 |
| 84 | 73 | 75 |
| 84 | 73 | 87 |
| 84 | 73 | 99 |
| 84 | 85 | 39 |
| 84 | 85 | 51 |
| 84 | 85 | 63 |
| 84 | 85 | 75 |
| 84 | 85 | 87 |
| 84 | 85 | 99 |
| 84 | 97 | 39 |
| 84 | 97 | 51 |
| 84 | 97 | 63 |
| 84 | 97 | 75 |
| 84 | 97 | 87 |
| 84 | 97 | 99 |
| 96 | 37 | 39 |
| 96 | 37 | 51 |
| 96 | 37 | 63 |
| 96 | 37 | 75 |
| 96 | 37 | 87 |
| 96 | 37 | 99 |
| 96 | 49 | 39 |
| 96 | 49 | 51 |
| 96 | 49 | 63 |
| 96 | 49 | 75 |
| 96 | 49 | 87 |
| 96 | 49 | 99 |
| 96 | 61 | 39 |
| 96 | 61 | 51 |
| 96 | 61 | 63 |
| 96 | 61 | 75 |
| 96 | 61 | 87 |
| 96 | 61 | 99 |
| 96 | 73 | 39 |
| 96 | 73 | 51 |
| 96 | 73 | 63 |
| 96 | 73 | 75 |
| 96 | 73 | 87 |
| 96 | 73 | 99 |
| 96 | 85 | 39 |
| 96 | 85 | 51 |
| 96 | 85 | 63 |
| 96 | 85 | 75 |
| 96 | 85 | 87 |
| 96 | 85 | 99 |
| 96 | 97 | 39 |
| 96 | 97 | 51 |
| 96 | 97 | 63 |
| 96 | 97 | 75 |
| 96 | 97 | 87 |
| 96 | 97 | 99 |

** play chords that pass the octave requirement
#+BEGIN_SRC clojure
(for [args tris] (cond (every? #(> % 36) args) (chord-sequencer args)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(def happy-tris (for [args tris] (cond (every? #(> % 36) args) args)))
#+END_SRC

#+RESULTS:
: #'user/happy-tris

#+BEGIN_SRC clojure
(remove nil? happy-tris)
#+END_SRC

#+RESULTS:
| 48 | 37 | 39 |
| 48 | 37 | 51 |
| 48 | 37 | 63 |
| 48 | 37 | 75 |
| 48 | 37 | 87 |
| 48 | 37 | 99 |
| 48 | 49 | 39 |
| 48 | 49 | 51 |
| 48 | 49 | 63 |
| 48 | 49 | 75 |
| 48 | 49 | 87 |
| 48 | 49 | 99 |
| 48 | 61 | 39 |
| 48 | 61 | 51 |
| 48 | 61 | 63 |
| 48 | 61 | 75 |
| 48 | 61 | 87 |
| 48 | 61 | 99 |
| 48 | 73 | 39 |
| 48 | 73 | 51 |
| 48 | 73 | 63 |
| 48 | 73 | 75 |
| 48 | 73 | 87 |
| 48 | 73 | 99 |
| 48 | 85 | 39 |
| 48 | 85 | 51 |
| 48 | 85 | 63 |
| 48 | 85 | 75 |
| 48 | 85 | 87 |
| 48 | 85 | 99 |
| 48 | 97 | 39 |
| 48 | 97 | 51 |
| 48 | 97 | 63 |
| 48 | 97 | 75 |
| 48 | 97 | 87 |
| 48 | 97 | 99 |
| 60 | 37 | 39 |
| 60 | 37 | 51 |
| 60 | 37 | 63 |
| 60 | 37 | 75 |
| 60 | 37 | 87 |
| 60 | 37 | 99 |
| 60 | 49 | 39 |
| 60 | 49 | 51 |
| 60 | 49 | 63 |
| 60 | 49 | 75 |
| 60 | 49 | 87 |
| 60 | 49 | 99 |
| 60 | 61 | 39 |
| 60 | 61 | 51 |
| 60 | 61 | 63 |
| 60 | 61 | 75 |
| 60 | 61 | 87 |
| 60 | 61 | 99 |
| 60 | 73 | 39 |
| 60 | 73 | 51 |
| 60 | 73 | 63 |
| 60 | 73 | 75 |
| 60 | 73 | 87 |
| 60 | 73 | 99 |
| 60 | 85 | 39 |
| 60 | 85 | 51 |
| 60 | 85 | 63 |
| 60 | 85 | 75 |
| 60 | 85 | 87 |
| 60 | 85 | 99 |
| 60 | 97 | 39 |
| 60 | 97 | 51 |
| 60 | 97 | 63 |
| 60 | 97 | 75 |
| 60 | 97 | 87 |
| 60 | 97 | 99 |
| 72 | 37 | 39 |
| 72 | 37 | 51 |
| 72 | 37 | 63 |
| 72 | 37 | 75 |
| 72 | 37 | 87 |
| 72 | 37 | 99 |
| 72 | 49 | 39 |
| 72 | 49 | 51 |
| 72 | 49 | 63 |
| 72 | 49 | 75 |
| 72 | 49 | 87 |
| 72 | 49 | 99 |
| 72 | 61 | 39 |
| 72 | 61 | 51 |
| 72 | 61 | 63 |
| 72 | 61 | 75 |
| 72 | 61 | 87 |
| 72 | 61 | 99 |
| 72 | 73 | 39 |
| 72 | 73 | 51 |
| 72 | 73 | 63 |
| 72 | 73 | 75 |
| 72 | 73 | 87 |
| 72 | 73 | 99 |
| 72 | 85 | 39 |
| 72 | 85 | 51 |
| 72 | 85 | 63 |
| 72 | 85 | 75 |
| 72 | 85 | 87 |
| 72 | 85 | 99 |
| 72 | 97 | 39 |
| 72 | 97 | 51 |
| 72 | 97 | 63 |
| 72 | 97 | 75 |
| 72 | 97 | 87 |
| 72 | 97 | 99 |
| 84 | 37 | 39 |
| 84 | 37 | 51 |
| 84 | 37 | 63 |
| 84 | 37 | 75 |
| 84 | 37 | 87 |
| 84 | 37 | 99 |
| 84 | 49 | 39 |
| 84 | 49 | 51 |
| 84 | 49 | 63 |
| 84 | 49 | 75 |
| 84 | 49 | 87 |
| 84 | 49 | 99 |
| 84 | 61 | 39 |
| 84 | 61 | 51 |
| 84 | 61 | 63 |
| 84 | 61 | 75 |
| 84 | 61 | 87 |
| 84 | 61 | 99 |
| 84 | 73 | 39 |
| 84 | 73 | 51 |
| 84 | 73 | 63 |
| 84 | 73 | 75 |
| 84 | 73 | 87 |
| 84 | 73 | 99 |
| 84 | 85 | 39 |
| 84 | 85 | 51 |
| 84 | 85 | 63 |
| 84 | 85 | 75 |
| 84 | 85 | 87 |
| 84 | 85 | 99 |
| 84 | 97 | 39 |
| 84 | 97 | 51 |
| 84 | 97 | 63 |
| 84 | 97 | 75 |
| 84 | 97 | 87 |
| 84 | 97 | 99 |
| 96 | 37 | 39 |
| 96 | 37 | 51 |
| 96 | 37 | 63 |
| 96 | 37 | 75 |
| 96 | 37 | 87 |
| 96 | 37 | 99 |
| 96 | 49 | 39 |
| 96 | 49 | 51 |
| 96 | 49 | 63 |
| 96 | 49 | 75 |
| 96 | 49 | 87 |
| 96 | 49 | 99 |
| 96 | 61 | 39 |
| 96 | 61 | 51 |
| 96 | 61 | 63 |
| 96 | 61 | 75 |
| 96 | 61 | 87 |
| 96 | 61 | 99 |
| 96 | 73 | 39 |
| 96 | 73 | 51 |
| 96 | 73 | 63 |
| 96 | 73 | 75 |
| 96 | 73 | 87 |
| 96 | 73 | 99 |
| 96 | 85 | 39 |
| 96 | 85 | 51 |
| 96 | 85 | 63 |
| 96 | 85 | 75 |
| 96 | 85 | 87 |
| 96 | 85 | 99 |
| 96 | 97 | 39 |
| 96 | 97 | 51 |
| 96 | 97 | 63 |
| 96 | 97 | 75 |
| 96 | 97 | 87 |
| 96 | 97 | 99 |

#+BEGIN_SRC clojure
(chord-sequencer happy-tris)
#+END_SRC

** play random orderings of "happy-trichords" var
#+BEGIN_SRC clojure
(shuffle [0 1 2])
#+END_SRC

#+RESULTS:
| 1 | 2 | 0 |

#+BEGIN_SRC clojure
(shuffle [[0 1 2] [0 1 3] [0 1 4]])
#+END_SRC

#+RESULTS:
| 0 | 1 | 4 |
| 0 | 1 | 3 |
| 0 | 1 | 2 |

#+BEGIN_SRC clojure
(chord-sequencer (take 10 (shuffle happy-tris)))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC clojure
(count happy-tris)
#+END_SRC

#+RESULTS:
: 180

#+BEGIN_SRC clojure
(chord-sequencer (take 45 (shuffle happy-tris)))
#+END_SRC

#+BEGIN_SRC clojure
((chord-sequencer-fn 2500) (take 180 (shuffle happy-tris)))
#+END_SRC

#+RESULTS:

still blocking when you finally dereference it
#+BEGIN_SRC clojure
(def future-wrapped (future ((chord-sequencer-fn 2500) (take 5 (shuffle happy-tris)))))
#+END_SRC

#+RESULTS:
: #'user/future-wrapped

#+BEGIN_SRC clojure
@future-wrapped
#+END_SRC

* maps
** basic maps 
#+BEGIN_SRC clojure
;; fails
(hash-map [:a 0 :b 1 :c 2])
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(hash-map :a 0 :b 1 :c 2)
#+END_SRC

#+RESULTS:
| :c | 2 | :b | 1 | :a | 0 |
** convert a vector of keys and values to an official map
#+BEGIN_SRC clojure
(apply hash-map [:a 0 :b 1 :c 2])
#+END_SRC

#+RESULTS:
| :c | 2 | :b | 1 | :a | 0 |
** interleave a vector of keys with a vector of values
#+BEGIN_SRC clojure
(interleave [:a :b :c :d :e] [0 1 2 3 4])
#+END_SRC

#+RESULTS:
| :a | 0 | :b | 1 | :c | 2 | :d | 3 | :e | 4 |

#+BEGIN_SRC clojure
(apply hash-map (interleave [:a :b :c :d :e] [0 1 2 3 4]))
#+END_SRC

#+RESULTS:
| :e | 4 | :c | 2 | :b | 1 | :d | 3 | :a | 0 |

#+BEGIN_SRC clojure
(take 10 (repeat []))
#+END_SRC
** setup a map with default values (nil)
#+BEGIN_SRC clojure
(interleave [:a :b :c :d :e] (take 5 (repeat nil)))
#+END_SRC

#+RESULTS:
| :a | nil | :b | nil | :c | nil | :d | nil | :e | nil |



#+RESULTS:
: pc[0 1 2]
** convert strings to vectors (with join)
#+BEGIN_SRC clojure
(str "pc" (str [0 1 2]))
#+END_SRC

#+RESULTS:
: pc[0 1 2]

#+BEGIN_SRC clojure
(clojure.string/join [0 1 2])
#+END_SRC

#+RESULTS:
: 012


#+BEGIN_SRC clojure
(str "pc-" (clojure.string/join [0 1 2]))
#+END_SRC

#+RESULTS:
: pc-012
** create a function for turning lists of vectors into string names
#+BEGIN_SRC clojure
((fn [pcsets] (map #(str "pc-" (clojure.string/join %)) pcsets)) (take 3 trichords))
#+END_SRC

#+BEGIN_SRC clojure
(defn stringify-set [pcsets] (map #(str "pc-" (clojure.string/join %)) pcsets))
#+END_SRC

#+RESULTS:
: #'user/stringify-set

#+BEGIN_SRC clojure
(stringify-set trichords)
#+END_SRC

#+RESULTS:
| pc-012 | pc-013 | pc-014 | pc-015 | pc-016 | pc-024 | pc-025 | pc-026 | pc-027 | pc-036 | pc-037 | pc-048 |
** create a list of trichords converted to keywords
#+BEGIN_SRC clojure
(def trichord-keys (map keyword ((fn [pcsets] (map #(str "pc-" (clojure.string/join %)) pcsets)) trichords)))
#+END_SRC

#+RESULTS:
: #'user/trichord-keys

#+BEGIN_SRC clojure
trichord-keys
#+END_SRC

#+RESULTS:
| :pc-012 | :pc-013 | :pc-014 | :pc-015 | :pc-016 | :pc-024 | :pc-025 | :pc-026 | :pc-027 | :pc-036 | :pc-037 | :pc-048 |
** create the map of trichord keys with trichord values
#+BEGIN_SRC clojure
(apply hash-map (interleave trichord-keys trichords))
#+END_SRC

#+RESULTS:
| :pc-016 | (0 1 6) | :pc-012 | (0 1 2) | :pc-027 | (0 2 7) | :pc-024 | (0 2 4) | :pc-025 | (0 2 5) | :pc-013 | (0 1 3) | :pc-026 | (0 2 6) | :pc-037 | (0 3 7) | :pc-048 | (0 4 8) | :pc-015 | (0 1 5) | :pc-014 | (0 1 4) | :pc-036 | (0 3 6) |
** use map destructuring
#+BEGIN_SRC clojure
(let [[k v] {:pc-016 [0 1 6]}] v)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(let [[k v] [[0 1 3][0 1 4]]] (list v k))
#+END_SRC

#+RESULTS:
| 0 | 1 | 4 |
| 0 | 1 | 3 |

#+BEGIN_SRC clojure
(let [[k v] [{:pc-016 [0 1 6]}]] v)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(let [{a :pc-016} {:pc-016 [0 1 6]}] a)
#+END_SRC

#+RESULTS:
| 0 | 1 | 6 |
** for loops over pc-sets
#+BEGIN_SRC clojure
(take 3 (for [a pc0 
      b pc1 
      c pc3]
  [a b c]))
#+END_SRC

#+RESULTS:
| 24 | 25 | 27 |
| 24 | 25 | 39 |
| 24 | 25 | 51 |



#+BEGIN_SRC clojure
;; fails
(for [a [[0 1 2 4] [0 2 3 5]]]
  (for [[w x y z] a]
    (list z x y w)))

#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(for [set [[0 1 3] [0 2 4]]]
  (let [[a b c] set]
    c))
#+END_SRC

#+RESULTS:
| 3 | 4 |

#+BEGIN_SRC clojure
(for [a [[0 1 2 4] [0 2 3 5]]]
  (let [[w x y z] a]
    (list z x y w)))

#+END_SRC

#+RESULTS:
| 4 | 1 | 2 | 0 |
| 5 | 2 | 3 | 0 |

#+BEGIN_SRC clojure
(for [a [[0 1 2 4] [0 2 3 5]]]
  (let [[w x y z] a]
    (vector (range w 48 12) (range x 48 12) (range y 48 12) (range z 48 12))))

#+END_SRC

#+RESULTS:
| (0 12 24 36) | (1 13 25 37) | (2 14 26 38) | (4 16 28 40) |
| (0 12 24 36) | (2 14 26 38) | (3 15 27 39) | (5 17 29 41) |

#+BEGIN_SRC clojure
(first (for [a [[0 1 2 4] [0 2 3 5]]]
  (let [[w x y z] a]
    (vector (range w 48 12) (range x 48 12) (range y 48 12) (range z 48 12)))))

#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 |
| 1 | 13 | 25 | 37 |
| 2 | 14 | 26 | 38 |
| 4 | 16 | 28 | 40 |

#+BEGIN_SRC clojure
(for [[a b] {:z 1}]
  [b a])

#+END_SRC

#+RESULTS:
| 1 | :z |

#+BEGIN_SRC clojure
(for [[a b c] {"dis" 1 "dat" 2}]
  a)

#+END_SRC

#+RESULTS:
| dis | dat |

#+BEGIN_SRC clojure
(for [[a b c] '("dis" 1 "dat")]
  a)

#+END_SRC

#+BEGIN_SRC clojure
(let [[x y z] [0 24 36]]
  (- z x))
#+END_SRC

#+RESULTS:
: 36

#+BEGIN_SRC clojure
(for [[x y z] [0 24 36]]
  (- z x))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(for [[x y] (list [:a 1] [:b 2] [:c 3])] y)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

#+BEGIN_SRC clojure
(for [[x y] [[:a 1] [:b 2] [:c 3]]] y)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

#+BEGIN_SRC clojure
(for [[x y z] [[0 1 2] [0 1 3] [0 1 4]]] z)
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 |

#+BEGIN_SRC clojure
(for [[x y z] [[[0 1 2] [0 1 3] [0 1 4]]]] z)
#+END_SRC

#+RESULTS:
| 0 | 1 | 4 |

#+BEGIN_SRC clojure
(map #(+ 12 %) [0 1 3])
#+END_SRC

#+RESULTS:
| 12 | 13 | 15 |

#+BEGIN_SRC clojure
(for [n (range 12)]
  (map #(+ n %) [0 1 3]))
#+END_SRC

#+RESULTS:
|  0 |  1 |  3 |
|  1 |  2 |  4 |
|  2 |  3 |  5 |
|  3 |  4 |  6 |
|  4 |  5 |  7 |
|  5 |  6 |  8 |
|  6 |  7 |  9 |
|  7 |  8 | 10 |
|  8 |  9 | 11 |
|  9 | 10 | 12 |
| 10 | 11 | 13 |
| 11 | 12 | 14 |

#+BEGIN_SRC clojure
(defn tn0-11 [args]
(for [n (range 12)]
  (map #(+ n %) args)))


#+END_SRC

#+RESULTS:
: #'user/tn0-11
#+BEGIN_SRC clojure
(tn0-11 [0 1 4])
#+END_SRC

#+RESULTS:
|  0 |  1 |  4 |
|  1 |  2 |  5 |
|  2 |  3 |  6 |
|  3 |  4 |  7 |
|  4 |  5 |  8 |
|  5 |  6 |  9 |
|  6 |  7 | 10 |
|  7 |  8 | 11 |
|  8 |  9 | 12 |
|  9 | 10 | 13 |
| 10 | 11 | 14 |
| 11 | 12 | 15 |


#+BEGIN_SRC clojure
(for [[x y z] [[[0 1 2] [0 1 3] [0 1 4]]]] [(tn0-11 x) (tn0-11 y) (tn0-11 z)])
#+END_SRC

#+RESULTS:
| ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8) (7 8 9) (8 9 10) (9 10 11) (10 11 12) (11 12 13)) | ((0 1 3) (1 2 4) (2 3 5) (3 4 6) (4 5 7) (5 6 8) (6 7 9) (7 8 10) (8 9 11) (9 10 12) (10 11 13) (11 12 14)) | ((0 1 4) (1 2 5) (2 3 6) (3 4 7) (4 5 8) (5 6 9) (6 7 10) (7 8 11) (8 9 12) (9 10 13) (10 11 14) (11 12 15)) |

#+BEGIN_SRC clojure
(for [[x y z] (take 3 (vector trichords)) ] [(tn0-11 x) (tn0-11 y) (tn0-11 z)])
#+END_SRC

#+RESULTS:
| ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8) (7 8 9) (8 9 10) (9 10 11) (10 11 12) (11 12 13)) | ((0 1 3) (1 2 4) (2 3 5) (3 4 6) (4 5 7) (5 6 8) (6 7 9) (7 8 10) (8 9 11) (9 10 12) (10 11 13) (11 12 14)) | ((0 1 4) (1 2 5) (2 3 6) (3 4 7) (4 5 8) (5 6 9) (6 7 10) (7 8 11) (8 9 12) (9 10 13) (10 11 14) (11 12 15)) |

#+BEGIN_SRC clojure
(for [[x y z] (take 3 (vector trichords)) ] (map #(tn0-11 %) [x y z]))
#+END_SRC

#+RESULTS:
| ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8) (7 8 9) (8 9 10) (9 10 11) (10 11 12) (11 12 13)) | ((0 1 3) (1 2 4) (2 3 5) (3 4 6) (4 5 7) (5 6 8) (6 7 9) (7 8 10) (8 9 11) (9 10 12) (10 11 13) (11 12 14)) | ((0 1 4) (1 2 5) (2 3 6) (3 4 7) (4 5 8) (5 6 9) (6 7 10) (7 8 11) (8 9 12) (9 10 13) (10 11 14) (11 12 15)) |

#+BEGIN_SRC clojure :results output
(clojure.pprint/cl-format true "~{~{~a ~%~}~}" deepnest)
#+END_SRC

#+RESULTS:
: ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8) (7 8 9) (8 9 10) (9 10 11) (10 11 12) (11 12 13)) 
: ((0 1 3) (1 2 4) (2 3 5) (3 4 6) (4 5 7) (5 6 8) (6 7 9) (7 8 10) (8 9 11) (9 10 12) (10 11 13) (11 12 14)) 
: ((0 1 4) (1 2 5) (2 3 6) (3 4 7) (4 5 8) (5 6 9) (6 7 10) (7 8 11) (8 9 12) (9 10 13) (10 11 14) (11 12 15)) 

#+BEGIN_SRC clojure
(map (fn [arg] arg) trichords)
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 0 | 1 | 3 |
| 0 | 1 | 4 |
| 0 | 1 | 5 |
| 0 | 1 | 6 |
| 0 | 2 | 4 |
| 0 | 2 | 5 |
| 0 | 2 | 6 |
| 0 | 2 | 7 |
| 0 | 3 | 6 |
| 0 | 3 | 7 |
| 0 | 4 | 8 |

#+BEGIN_SRC clojure
(map #(tn0-11 %) trichords)
#+END_SRC

#+RESULTS:
| (0 1 2) | (1 2 3) | (2 3 4)  | (3 4 5)  | (4 5 6)  | (5 6 7)  | (6 7 8)   | (7 8 9)   | (8 9 10)  | (9 10 11) | (10 11 12) | (11 12 13) |
| (0 1 3) | (1 2 4) | (2 3 5)  | (3 4 6)  | (4 5 7)  | (5 6 8)  | (6 7 9)   | (7 8 10)  | (8 9 11)  | (9 10 12) | (10 11 13) | (11 12 14) |
| (0 1 4) | (1 2 5) | (2 3 6)  | (3 4 7)  | (4 5 8)  | (5 6 9)  | (6 7 10)  | (7 8 11)  | (8 9 12)  | (9 10 13) | (10 11 14) | (11 12 15) |
| (0 1 5) | (1 2 6) | (2 3 7)  | (3 4 8)  | (4 5 9)  | (5 6 10) | (6 7 11)  | (7 8 12)  | (8 9 13)  | (9 10 14) | (10 11 15) | (11 12 16) |
| (0 1 6) | (1 2 7) | (2 3 8)  | (3 4 9)  | (4 5 10) | (5 6 11) | (6 7 12)  | (7 8 13)  | (8 9 14)  | (9 10 15) | (10 11 16) | (11 12 17) |
| (0 2 4) | (1 3 5) | (2 4 6)  | (3 5 7)  | (4 6 8)  | (5 7 9)  | (6 8 10)  | (7 9 11)  | (8 10 12) | (9 11 13) | (10 12 14) | (11 13 15) |
| (0 2 5) | (1 3 6) | (2 4 7)  | (3 5 8)  | (4 6 9)  | (5 7 10) | (6 8 11)  | (7 9 12)  | (8 10 13) | (9 11 14) | (10 12 15) | (11 13 16) |
| (0 2 6) | (1 3 7) | (2 4 8)  | (3 5 9)  | (4 6 10) | (5 7 11) | (6 8 12)  | (7 9 13)  | (8 10 14) | (9 11 15) | (10 12 16) | (11 13 17) |
| (0 2 7) | (1 3 8) | (2 4 9)  | (3 5 10) | (4 6 11) | (5 7 12) | (6 8 13)  | (7 9 14)  | (8 10 15) | (9 11 16) | (10 12 17) | (11 13 18) |
| (0 3 6) | (1 4 7) | (2 5 8)  | (3 6 9)  | (4 7 10) | (5 8 11) | (6 9 12)  | (7 10 13) | (8 11 14) | (9 12 15) | (10 13 16) | (11 14 17) |
| (0 3 7) | (1 4 8) | (2 5 9)  | (3 6 10) | (4 7 11) | (5 8 12) | (6 9 13)  | (7 10 14) | (8 11 15) | (9 12 16) | (10 13 17) | (11 14 18) |
| (0 4 8) | (1 5 9) | (2 6 10) | (3 7 11) | (4 8 12) | (5 9 13) | (6 10 14) | (7 11 15) | (8 12 16) | (9 13 17) | (10 14 18) | (11 15 19) |
** basic mapping an adder function over items in a list
#+BEGIN_SRC clojure
(map #(+ 12 %) [0 1 2])
#+END_SRC

#+RESULTS:
| 12 | 13 | 14 |

#+BEGIN_SRC clojure
(range 2 108 12)
#+END_SRC

#+RESULTS:
| 2 | 14 | 26 | 38 | 50 | 62 | 74 | 86 | 98 |
** returning a vector of lists (of ranged/stepped numbers) from a 'for' loop
#+BEGIN_SRC clojure
(for [n (range 3)] [(range n 108 12)])
#+END_SRC

#+RESULTS:
| (0 12 24 36 48 60 72 84 96) |
| (1 13 25 37 49 61 73 85 97) |
| (2 14 26 38 50 62 74 86 98) |
** embedding two maps in a vector--a saga towards 'into'
#+BEGIN_SRC clojure
[{:0 [0 12 24 36 48 60 72 84 96]}
{:1 [1 13 25 37 49 61 73 85 97]}]
#+END_SRC

#+RESULTS:
| :0 | (0 12 24 36 48 60 72 84 96) |
| :1 | (1 13 25 37 49 61 73 85 97) |


#+BEGIN_SRC clojure
(for [n (range 3)] [:n (range n 108 12)])
#+END_SRC

#+RESULTS:
| :n | (0 12 24 36 48 60 72 84 96) |
| :n | (1 13 25 37 49 61 73 85 97) |
| :n | (2 14 26 38 50 62 74 86 98) |


#+BEGIN_SRC clojure
(for [n (range 3)] [(vector (keyword (str n)) (range n 108 12))])
#+END_SRC

#+RESULTS:
| (:0 (0 12 24 36 48 60 72 84 96)) |
| (:1 (1 13 25 37 49 61 73 85 97)) |
| (:2 (2 14 26 38 50 62 74 86 98)) |

#+BEGIN_SRC clojure
(def pc-octaves (for [n (range 12)] [(vector (keyword (str n)) (range n 108 12))]))
#+END_SRC

#+RESULTS:
: #'user/pc-octaves

#+BEGIN_SRC clojure
((keyword (str 0)) pc-octaves)
#+END_SRC

#+RESULTS:
: nil


#+BEGIN_SRC clojure
(:one {:one [1]})
#+END_SRC

#+RESULTS:
| 1 |

#+BEGIN_SRC clojure
(def pc-octaves (for [n (range 12)] [(hash-map (keyword (str n)) (range n 108 12))]))
#+END_SRC

#+RESULTS:
: #'user/pc-octaves

#+BEGIN_SRC clojure
pc-octaves
#+END_SRC

#+RESULTS:
| (:0 (0 12 24 36 48 60 72 84 96))    |
| (:1 (1 13 25 37 49 61 73 85 97))    |
| (:2 (2 14 26 38 50 62 74 86 98))    |
| (:3 (3 15 27 39 51 63 75 87 99))    |
| (:4 (4 16 28 40 52 64 76 88 100))   |
| (:5 (5 17 29 41 53 65 77 89 101))   |
| (:6 (6 18 30 42 54 66 78 90 102))   |
| (:7 (7 19 31 43 55 67 79 91 103))   |
| (:8 (8 20 32 44 56 68 80 92 104))   |
| (:9 (9 21 33 45 57 69 81 93 105))   |
| (:10 (10 22 34 46 58 70 82 94 106)) |
| (:11 (11 23 35 47 59 71 83 95 107)) |


#+BEGIN_SRC clojure
(hash-map (keyword (str 1)) (range 1 108 12))
#+END_SRC

#+RESULTS:
| :1 | (1 13 25 37 49 61 73 85 97) |

#+BEGIN_SRC clojure
(:1 (hash-map (keyword (str 1)) (range 1 108 12)))
#+END_SRC

#+RESULTS:
| 1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 | 97 |

#+BEGIN_SRC clojure
(def pc-octaves (for [n (range 12)] (hash-map (keyword (str n)) (range n 108 12))))
#+END_SRC

#+RESULTS:
: #'user/pc-octaves

#+BEGIN_SRC clojure
pc-octaves
#+END_SRC

#+RESULTS:
| :0  | (0 12 24 36 48 60 72 84 96)   |
| :1  | (1 13 25 37 49 61 73 85 97)   |
| :2  | (2 14 26 38 50 62 74 86 98)   |
| :3  | (3 15 27 39 51 63 75 87 99)   |
| :4  | (4 16 28 40 52 64 76 88 100)  |
| :5  | (5 17 29 41 53 65 77 89 101)  |
| :6  | (6 18 30 42 54 66 78 90 102)  |
| :7  | (7 19 31 43 55 67 79 91 103)  |
| :8  | (8 20 32 44 56 68 80 92 104)  |
| :9  | (9 21 33 45 57 69 81 93 105)  |
| :10 | (10 22 34 46 58 70 82 94 106) |
| :11 | (11 23 35 47 59 71 83 95 107) |

#+BEGIN_SRC clojure
(map :1 pc-octaves)
#+END_SRC

#+RESULTS:
| 1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 | 97 |

#+BEGIN_SRC clojure
(type pc-octaves)
#+END_SRC

#+RESULTS:
: clojure.lang.LazySeq

#+BEGIN_SRC clojure
(flatten (for [n (range 12)] (hash-map (keyword (str n)) (range n 108 12))))
#+END_SRC

#+RESULTS:
| :0  | (0 12 24 36 48 60 72 84 96)   |
| :1  | (1 13 25 37 49 61 73 85 97)   |
| :2  | (2 14 26 38 50 62 74 86 98)   |
| :3  | (3 15 27 39 51 63 75 87 99)   |
| :4  | (4 16 28 40 52 64 76 88 100)  |
| :5  | (5 17 29 41 53 65 77 89 101)  |
| :6  | (6 18 30 42 54 66 78 90 102)  |
| :7  | (7 19 31 43 55 67 79 91 103)  |
| :8  | (8 20 32 44 56 68 80 92 104)  |
| :9  | (9 21 33 45 57 69 81 93 105)  |
| :10 | (10 22 34 46 58 70 82 94 106) |
| :11 | (11 23 35 47 59 71 83 95 107) |

#+BEGIN_SRC clojure
(for [n (range 12)] (hash-map (keyword (str n)) (range n 108 12)))
#+END_SRC

#+RESULTS:
| :0  | (0 12 24 36 48 60 72 84 96)   |
| :1  | (1 13 25 37 49 61 73 85 97)   |
| :2  | (2 14 26 38 50 62 74 86 98)   |
| :3  | (3 15 27 39 51 63 75 87 99)   |
| :4  | (4 16 28 40 52 64 76 88 100)  |
| :5  | (5 17 29 41 53 65 77 89 101)  |
| :6  | (6 18 30 42 54 66 78 90 102)  |
| :7  | (7 19 31 43 55 67 79 91 103)  |
| :8  | (8 20 32 44 56 68 80 92 104)  |
| :9  | (9 21 33 45 57 69 81 93 105)  |
| :10 | (10 22 34 46 58 70 82 94 106) |
| :11 | (11 23 35 47 59 71 83 95 107) |

#+BEGIN_SRC clojure
(defn rec [n] (cond (zero? n) () :else (cons n (rec (dec n)))))
(rec 3)
#+END_SRC

#+RESULTS:
: #'user/rec(3 2 1)

#+BEGIN_SRC clojure
(defn rec [n]
  (cond
    (zero? n) ()
    :else (cons (keyword (str n)) (rec (dec n)))))

(rec 3)
#+END_SRC

#+RESULTS:
: #'user/rec(:3 :2 :1)
** use 'into' to extract top-level forms into a particular collection type
#+BEGIN_SRC clojure
(into {} (for [n (range 12)] [(keyword (str n)) (range n 108 12)]))
#+END_SRC

#+RESULTS:
| :11 | (11 23 35 47 59 71 83 95 107) | :10 | (10 22 34 46 58 70 82 94 106) | :0 | (0 12 24 36 48 60 72 84 96) | :4 | (4 16 28 40 52 64 76 88 100) | :7 | (7 19 31 43 55 67 79 91 103) | :1 | (1 13 25 37 49 61 73 85 97) | :8 | (8 20 32 44 56 68 80 92 104) | :9 | (9 21 33 45 57 69 81 93 105) | :2 | (2 14 26 38 50 62 74 86 98) | :5 | (5 17 29 41 53 65 77 89 101) | :3 | (3 15 27 39 51 63 75 87 99) | :6 | (6 18 30 42 54 66 78 90 102) |

#+BEGIN_SRC clojure
(def pc-octaves (into {} (for [n (range 12)] (hash-map (keyword (str n)) (range n 108 12)))))
#+END_SRC

#+RESULTS:
: #'user/pc-octaves

#+BEGIN_SRC clojure
((keyword (str 0)) pc-octaves)
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 | 96 |

#+BEGIN_SRC clojure
(:0 pc-octaves)
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 | 96 |

#+BEGIN_SRC clojure
(let [[a b c] [0 1 3]]
 ((keyword (str a)) pc-octaves))
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 | 96 |
** extract the list of octave equivalents for a given pc-set
#+BEGIN_SRC clojure
(let [[a b c] [0 1 3]] (vector ((keyword (str a)) pc-octaves) ((keyword (str b)) pc-octaves) ((keyword (str c)) pc-octaves)))
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 | 96 |
| 1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 | 97 |
| 3 | 15 | 27 | 39 | 51 | 63 | 75 | 87 | 99 |


#+BEGIN_SRC clojure
(into [] ((keyword (str 0)) pc-octaves))
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 | 96 |

#+BEGIN_SRC clojure
(for [n [0 1 2]] (keyword (str n)))
#+END_SRC

#+RESULTS:
| :0 | :1 | :2 |


#+BEGIN_SRC clojure
(vector (for [n [0 1 3]] (into [] ((keyword (str n)) pc-octaves))))
#+END_SRC

#+RESULTS:
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (3 15 27 39 51 63 75 87 99) |

#+BEGIN_SRC clojure
(into [] (for [n [0 1 3]] (into [] ((keyword (str n)) pc-octaves))))
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 | 96 |
| 1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 | 97 |
| 3 | 15 | 27 | 39 | 51 | 63 | 75 | 87 | 99 |
* create a macro to accomplish "cartesian expansion"
** for requires a vector for its binding in user:1
#+BEGIN_SRC clojure
(for (into [] (interleave ['a 'b 'c] [[0 1 2] [1 2 3] [2 3 4]])) [a b c])
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(defmacro cartes [arg] (list 'for (into [] (interleave ['a 'b 'c] [[0 1 2] [1 2 3] [2 3 4]]))
#+END_SRC
** 
#+BEGIN_SRC clojure
(def big-013
  (let [a [0 12 24 36 48 60 72 84 96] 
        b [1 13 25 37 49 61 73 85 97]
        c [3 15 27 39 51 63 75 87 99]]
    (for [aa a bb b cc c]
      [aa bb cc])))

(take 3 big-013)
#+END_SRC

#+RESULTS:
: #'user/big-013([0 1 3] [0 1 15] [0 1 27])

#+BEGIN_SRC clojure
(let [a (:0 pc-octaves) b (:1 pc-octaves) c (:4 pc-octaves)] [a b c])
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 |  96 |
| 1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 |  97 |
| 4 | 16 | 28 | 40 | 52 | 64 | 76 | 88 | 100 |

#+BEGIN_SRC clojure
(for [pcset [[0 1 2] [0 1 3]]]
  (let [[a b c] pcset] (vector ((keyword (str a)) pc-octaves) ((keyword (str b)) pc-octaves) ((keyword (str c)) pc-octaves))))
#+END_SRC

#+RESULTS:
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (2 14 26 38 50 62 74 86 98) |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (3 15 27 39 51 63 75 87 99) |

#+BEGIN_SRC clojure
(for [pcset [[0 1 2] [0 1 3]]]
  (let [[a b c] pcset] [(into [] ((keyword (str a)) pc-octaves))
                        (into [] ((keyword (str b)) pc-octaves))
                        (into [] ((keyword (str c)) pc-octaves))]))
#+END_SRC

#+RESULTS:
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (2 14 26 38 50 62 74 86 98) |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (3 15 27 39 51 63 75 87 99) |
** weirdly babel doesn't read the results out into vectors
#+BEGIN_SRC clojure
(for [pcset trichords]
  (let [[a b c] pcset] [(into [] ((keyword (str a)) pc-octaves))
                        (into [] ((keyword (str b)) pc-octaves))
                        (into [] ((keyword (str c)) pc-octaves))]))
#+END_SRC

#+RESULTS:
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97)  | (2 14 26 38 50 62 74 86 98)  |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97)  | (3 15 27 39 51 63 75 87 99)  |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97)  | (4 16 28 40 52 64 76 88 100) |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97)  | (5 17 29 41 53 65 77 89 101) |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97)  | (6 18 30 42 54 66 78 90 102) |
| (0 12 24 36 48 60 72 84 96) | (2 14 26 38 50 62 74 86 98)  | (4 16 28 40 52 64 76 88 100) |
| (0 12 24 36 48 60 72 84 96) | (2 14 26 38 50 62 74 86 98)  | (5 17 29 41 53 65 77 89 101) |
| (0 12 24 36 48 60 72 84 96) | (2 14 26 38 50 62 74 86 98)  | (6 18 30 42 54 66 78 90 102) |
| (0 12 24 36 48 60 72 84 96) | (2 14 26 38 50 62 74 86 98)  | (7 19 31 43 55 67 79 91 103) |
| (0 12 24 36 48 60 72 84 96) | (3 15 27 39 51 63 75 87 99)  | (6 18 30 42 54 66 78 90 102) |
| (0 12 24 36 48 60 72 84 96) | (3 15 27 39 51 63 75 87 99)  | (7 19 31 43 55 67 79 91 103) |
| (0 12 24 36 48 60 72 84 96) | (4 16 28 40 52 64 76 88 100) | (8 20 32 44 56 68 80 92 104) |
** def tris-octaves
#+BEGIN_SRC clojure
(def tris-octaves
  (for [pcset trichords]
    (let [[a b c] pcset] [(into [] ((keyword (str a)) pc-octaves))
                          (into [] ((keyword (str b)) pc-octaves))
                          (into [] ((keyword (str c)) pc-octaves))])))

#+END_SRC

#+RESULTS:
: #'user/tris-octaves([[0 12 24 36 48 60 72 84 96] [1 13 25 37 49 61 73 85 97] [2 14 26 38 50 62 74 86 98]] [[0 12 24 36 48 60 72 84 96] [1 13 25 37 49 61 73 85 97] [3 15 27 39 51 63 75 87 99]] [[0 12 24 36 48 60 72 84 96] [1 13 25 37 49 61 73 85 97] [4 16 28 40 52 64 76 88 100]])

#+BEGIN_SRC clojure
(take 2 tris-octaves)
#+END_SRC

#+RESULTS:
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (2 14 26 38 50 62 74 86 98) |
| (0 12 24 36 48 60 72 84 96) | (1 13 25 37 49 61 73 85 97) | (3 15 27 39 51 63 75 87 99) |

#+BEGIN_SRC clojure
(take 2 (for [octave-collection tris-octaves]
  (for [[a b c] octave-collection]
    [a b c])))
#+END_SRC

#+RESULTS:
| (0 12 24) | (1 13 25) | (2 14 26) |
| (0 12 24) | (1 13 25) | (3 15 27) |

#+BEGIN_SRC clojure
(def one-octave-collection (first tris-octaves))
;; one-octave-collection
  (for [[a b c] one-octave-collection]
    [b a c])
#+END_SRC

#+RESULTS:
: #'user/one-octave-collection([12 0 24] [13 1 25] [14 2 26])

#+BEGIN_SRC clojure
(def big-012-midi-list
  (let [[a b c] one-octave-collection]
    (for [aa a bb b cc c] [aa bb cc])))
(count big-012-midi-list)
#+END_SRC

#+RESULTS:
: #'user/big-012-midi-list729

#+BEGIN_SRC clojure
(defn big-one [octave-collec] 
  (for [oc octave-collec]
    (let [[a b c] oc]
      (for [aa a bb b cc c] [aa bb cc]))))
#+END_SRC

#+RESULTS:
: #'user/big-one

#+BEGIN_SRC clojure
(count (flatten (big-one (take 2 tris-octaves))))
#+END_SRC

#+BEGIN_SRC clojure
(def all-trichord-midi-voicings (big-one tris-octaves))
#+END_SRC

#+RESULTS:
: #'user/all-trichord-midi-voicings
** 
#+BEGIN_SRC clojure
(def most-happy-tris 
  (for [args all-trichord-midi-voicings]
    (cond (every? #(> % 36) args) args)))
#+END_SRC

#+RESULTS:
: #'user/most-happy-tris

#+BEGIN_SRC clojure
(def the-bomb (remove nil? most-happy-tris))
#+END_SRC

#+RESULTS:
: #'user/the-bomb


#+BEGIN_SRC clojure
(sequencer (flatten (first all-trichord-midi-voicings))) 
#+END_SRC

#+RESULTS:
: 12

* "vectors are functions of their indices"
#+BEGIN_SRC clojure
([[0 1 2] [0 1 3] [0 1 4]] 1)
#+END_SRC

#+RESULTS:
| 0 | 1 | 3 |

* uuid
#+BEGIN_SRC clojure
(defn uuid [] (str (java.util.UUID/randomUUID)))
#+END_SRC

#+RESULTS:
: #'user/uuid

#+BEGIN_SRC clojure
(uuid)
#+END_SRC

#+RESULTS:
: 0a898966-b54c-41bf-84dd-302363642f06

* quick-steps for restarting
** use overtone.live and sampled-piano; define trichords as const
#+END_SRC

#+BEGIN_SRC clojure :tangle yes
(use 'overtone.live)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure :tangle yes
(use 'overtone.inst.sampled-piano)

(def ^:const trichords '((0 1 2) (0 1 3) (0 1 4) (0 1 5) (0 1 6) (0 2 4) (0 2 5) (0 2 6) (0 2 7) (0 3 6) (0 3 7) (0 4 8)))
#+END_SRC

#+RESULTS:
: nil#'user/trichords

#+BEGIN_SRC clojure
(sampled-piano)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.inst.973/sampled-piano 38>

** create a sequencer function using Thread/sleep in a 'do'
#+BEGIN_SRC clojure :tangle yes
(defn sequencer-500 [midis]
  (map #(do (Thread/sleep 500) (sampled-piano %)) midis))
#+END_SRC

#+RESULTS:
: #'user/sequencer-500

#+BEGIN_SRC clojure
(sequencer-500 [48 59])
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 41> #<synth-node(loading): overtone.inst.973/sampled-piano 42>)

** define the large octave hash-map with zero-indexed PCs as keys
#+BEGIN_SRC clojure :tangle yes
(def pc-octaves (into {} (for [n (range 12)] (hash-map (keyword (str n)) (range n 108 12)))))
(first pc-octaves)
#+END_SRC

#+RESULTS:
: #'user/pc-octaves[:11 (11 23 35 47 59 71 83 95 107)]

#+BEGIN_SRC clojure
(type (for [n (range 12)] (hash-map (keyword (str n)) (range n 108 12))))
#+END_SRC

#+RESULTS:
: clojure.lang.LazySeq

** 
#+BEGIN_SRC clojure :tangle yes
(def tris-octaves
  (for [pcset trichords]
    (let [[a b c] pcset] [(into [] ((keyword (str a)) pc-octaves))
                          (into [] ((keyword (str b)) pc-octaves))
                          (into [] ((keyword (str c)) pc-octaves))])))
(first tris-octaves)
#+END_SRC

#+RESULTS:
: #'user/tris-octaves[[0 12 24 36 48 60 72 84 96] [1 13 25 37 49 61 73 85 97] [2 14 26 38 50 62 74 86 98]]

** define a nested for loop function to destructure and cartesian product across a set collection
:PROPERTIES:
:function_name: big-one
:END:

#+BEGIN_SRC clojure :tangle yes
(defn big-one [octave-collec] 
  (for [oc octave-collec]
    (let [[a b c] oc]
      (for [aa a bb b cc c] [aa bb cc]))))
#+END_SRC

#+RESULTS:
: #'user/big-one

** create all trichord midi voicings
#+BEGIN_SRC clojure :tangle yes
(def all-trichord-midi-voicings (big-one tris-octaves))
#+END_SRC

#+RESULTS:
: #'user/all-trichord-midi-voicings

#+BEGIN_SRC clojure
(str (count all-trichord-midi-voicings) " "
     (count (first all-trichord-midi-voicings)) " "
     (subvec (vec (first all-trichord-midi-voicings)) 0 9))
#+END_SRC

#+RESULTS:
: 12 729 [[0 1 2] [0 1 14] [0 1 26] [0 1 38] [0 1 50] [0 1 62] [0 1 74] [0 1 86] [0 1 98]]

** 12 trichords with 729 distinct voicings, where each voicing comprises 3 notes == 26244
#+BEGIN_SRC clojure
(str (* 12 729) " " (* 3 729) " " (* 12 3 729))
#+END_SRC

#+RESULTS:
: 8748 2187 26244

#+BEGIN_SRC clojure
;; play 26244 notes at one note per second (60bpm)
(/ 26244 60.0)
#+END_SRC

#+RESULTS:
: 437.4


#+BEGIN_SRC clojure
;; 437 minutes is about 7 hours and 15 minutes
(/ (/ 26244 60.0) 60)
#+END_SRC

#+RESULTS:
: 7.29

#+BEGIN_SRC clojure
(count (flatten all-trichord-midi-voicings))
#+END_SRC

#+BEGIN_SRC clojure
(take 9 (first (subvec (vec all-trichord-midi-voicings) 0 1)))
#+END_SRC

#+RESULTS:
| 0 | 1 |  2 |
| 0 | 1 | 14 |
| 0 | 1 | 26 |
| 0 | 1 | 38 |
| 0 | 1 | 50 |
| 0 | 1 | 62 |
| 0 | 1 | 74 |
| 0 | 1 | 86 |
| 0 | 1 | 98 |

** begin filtering 
#+BEGIN_SRC clojure
;;; don't evaluate
;;  (for 
[args all-trichord-midi-voicings]
    (cond (every? #(> % 36) args) args)))
#+END_SRC

#+RESULTS:
: #'user/most-happy-tris

** define a sample of 27 chords from an abritrary slice of all voicings
#+BEGIN_SRC clojure
(def samp (take 27 (subvec (vec (first (subvec (vec all-trichord-midi-voicings) 0 1))) 343 370)))
#+END_SRC

#+RESULTS:
: #'user/samp

#+BEGIN_SRC clojure
samp
#+END_SRC

#+RESULTS:
| 48 | 25 | 14 |
| 48 | 25 | 26 |
| 48 | 25 | 38 |
| 48 | 25 | 50 |
| 48 | 25 | 62 |
| 48 | 25 | 74 |
| 48 | 25 | 86 |
| 48 | 25 | 98 |
| 48 | 37 |  2 |
| 48 | 37 | 14 |
| 48 | 37 | 26 |
| 48 | 37 | 38 |
| 48 | 37 | 50 |
| 48 | 37 | 62 |
| 48 | 37 | 74 |
| 48 | 37 | 86 |
| 48 | 37 | 98 |
| 48 | 49 |  2 |
| 48 | 49 | 14 |
| 48 | 49 | 26 |
| 48 | 49 | 38 |
| 48 | 49 | 50 |
| 48 | 49 | 62 |
| 48 | 49 | 74 |
| 48 | 49 | 86 |
| 48 | 49 | 98 |
| 48 | 61 |  2 |

** filter out voicing containing a midi less than 36
#+BEGIN_SRC clojure
  (def refined-samp (for [args samp]
    (cond (every? #(> % 36) args) args)))
#+END_SRC

#+RESULTS:
: #'user/refined-samp

** remove nils from refined-samp
#+BEGIN_SRC clojure
(def refined-samp (remove nil? refined-samp))
#+END_SRC

#+RESULTS:
: #'user/refined-samp

** play the refined-samp segment
#+BEGIN_SRC clojure
(sequencer-500 (flatten refined-samp))
#+END_SRC

#+RESULTS:

** define a function that will select a random segment of a collection
#+BEGIN_SRC clojure
;; fails because?
(defn rand-seq [v length]
  (let [n (rand-int (dec length))
        o (+ n length)]
    (subvec v n o)))
#+END_SRC

#+RESULTS:
: #'user/rand-seq


#+BEGIN_SRC clojure
(#(let [start (rand-int %1) end (+ start %2)] (list start end)) 36 3)
#+END_SRC

#+RESULTS:
| 20 | 23 |

#+BEGIN_SRC clojure
(defn rand-seq [v v-length]
  (let [start (rand-int (dec (count v)))
        end (+ start v-length)]
    (subvec v start end)))
#+END_SRC

#+RESULTS:
: #'user/rand-seq

#+BEGIN_SRC clojure :tangle yes

(defn rand-seq-debug [v v-length]
  (let [start (rand-int (dec (count v)))
        end (+ start v-length)]
(println (str "START: " start " end: " end))
    (subvec v start end)))

#+END_SRC

#+RESULTS:
: #'user/rand-seq-debug

** understand ranges and counting--use inc!
#+BEGIN_SRC clojure
(#(let [l (range (inc %)) length (count l)] [l length]) (rand-int 10))
#+END_SRC

#+RESULTS:
| (0 1 2 3 4 5 6) | 7 |

** range returns a sequence of length n, comprising numbers start through n - 1
#+BEGIN_SRC clojure
(vector (range 4))
;; returns
;; [(0 1 2 3)]
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 | 3 |

#+BEGIN_SRC clojure
(rand-seq (vec (range 36)) 4)
#+END_SRC

#+RESULTS:
| 13 | 14 | 15 | 16 |


#+BEGIN_SRC clojure
(vec refined-samp)
#+END_SRC

#+RESULTS:
| 48 | 37 | 38 |
| 48 | 37 | 50 |
| 48 | 37 | 62 |
| 48 | 37 | 74 |
| 48 | 37 | 86 |
| 48 | 37 | 98 |
| 48 | 49 | 38 |
| 48 | 49 | 50 |
| 48 | 49 | 62 |
| 48 | 49 | 74 |
| 48 | 49 | 86 |
| 48 | 49 | 98 |

** rand-seq fails if the sequence length is too long for the arbitrary starting point
#+BEGIN_SRC clojure
(rand-seq (vec refined-samp) 3) 
#+END_SRC

#+RESULTS:
| 48 | 49 | 38 |
| 48 | 49 | 50 |
| 48 | 49 | 62 |


#+BEGIN_SRC clojure :results output
(rand-seq-debug (vec refined-samp) 3) 
#+END_SRC

#+RESULTS:
: START: 1 end: 4

#+BEGIN_SRC clojure
(rand-seq-debug (vec refined-samp) 3) 
;; START: 2 end: 5
[nil nil nil]

(rand-seq-debug (vec refined-samp) 3) 
;; START: 9 end: 12
[nil nil [48 37 38]]

(rand-seq-debug (vec refined-samp) 3) 
;; START: 21 end: 24
[[48 49 50] [48 49 62] [48 49 74]]
#+END_SRC

** 'most-happy-tris'
#+BEGIN_SRC clojure
(take 3  (nth (vec all-trichord-midi-voicings) 4))
#+END_SRC

#+RESULTS:
| 0 | 1 |  6 |
| 0 | 1 | 18 |
| 0 | 1 | 30 |

#+BEGIN_SRC clojure
(def most-happy-tris 
  (for [args all-trichord-midi-voicings]
    (cond (every? #(> % 36) args) args)))

(def refined-happy-tris (remove nil? most-happy-tris))
#+END_SRC


#+BEGIN_SRC clojure
(for [args all-trichord-midi-voicings] (count args))
#+END_SRC

#+RESULTS:
| 729 | 729 | 729 | 729 | 729 | 729 | 729 | 729 | 729 | 729 | 729 | 729 |

#+BEGIN_SRC clojure
;; big!
(def first-of-all-trichord (take 729 (first all-trichord-midi-voicings)))
#+END_SRC

#+RESULTS:
: #'user/first-of-all-trichord

#+BEGIN_SRC clojure
(count first-of-all-trichord)
#+END_SRC

#+RESULTS:
: 729

#+BEGIN_SRC clojure
(take 10 first-of-all-trichord)
#+END_SRC

#+RESULTS:
| 0 |  1 |  2 |
| 0 |  1 | 14 |
| 0 |  1 | 26 |
| 0 |  1 | 38 |
| 0 |  1 | 50 |
| 0 |  1 | 62 |
| 0 |  1 | 74 |
| 0 |  1 | 86 |
| 0 |  1 | 98 |
| 0 | 13 |  2 |

#+BEGIN_SRC clojure
(count (first all-trichord-midi-voicings))
#+END_SRC

#+RESULTS:
: 729


#+BEGIN_SRC clojure
(count first-of-all-trichord)
#+END_SRC

#+RESULTS:
: 729

** using concat
#+BEGIN_SRC clojure
(apply concat [[[0 1 2] [0 1 14]] [[0 1 3] [0 1 15]]])
#+END_SRC

#+RESULTS:
| 0 | 1 |  2 |
| 0 | 1 | 14 |
| 0 | 1 |  3 |
| 0 | 1 | 15 |

#+BEGIN_SRC clojure
(def nest [[[0 1 2] [0 1 14]] [[0 1 3] [0 1 15]]])
#+END_SRC

#+RESULTS:
: #'user/nest

#+BEGIN_SRC clojure
(apply concat nest)
#+END_SRC

#+RESULTS:
| 0 | 1 |  2 |
| 0 | 1 | 14 |
| 0 | 1 |  3 |
| 0 | 1 | 15 |

#+BEGIN_SRC clojure
(count all-trichord-midi-voicings)
#+END_SRC

#+RESULTS:
: 12

#+BEGIN_SRC clojure
(str (count (apply concat all-trichord-midi-voicings)) " " (* 12 729))
#+END_SRC

#+RESULTS:
: 8748 8748

#+BEGIN_SRC clojure
(def flat-tris (apply concat all-trichord-midi-voicings))
#+END_SRC

#+RESULTS:
: #'user/flat-tris

#+BEGIN_SRC clojure
(count flat-tris)
#+END_SRC

#+RESULTS:
: 8748

** use special fn with every? and remove to restrict refined list to > 36 midis
#+BEGIN_SRC clojure
(remove (fn [arg] (not (every? #(> % 36) arg))) [[0 36 37 1] [37 38 39]])
#+END_SRC

#+RESULTS:
| 37 | 38 | 39 |

#+BEGIN_SRC clojure
(def refined-flat-tris (remove (fn [arg] (not (every? #(> % 36) arg))) flat-tris))

#+END_SRC

#+RESULTS:
: #'user/refined-flat-tris


#+BEGIN_SRC clojure
(count refined-flat-tris)
#+END_SRC

#+RESULTS:
: 2160


#+BEGIN_SRC clojure
(take 81 refined-flat-tris)
#+END_SRC

#+RESULTS:
| 48 | 37 | 38 |
| 48 | 37 | 50 |
| 48 | 37 | 62 |
| 48 | 37 | 74 |
| 48 | 37 | 86 |
| 48 | 37 | 98 |
| 48 | 49 | 38 |
| 48 | 49 | 50 |
| 48 | 49 | 62 |
| 48 | 49 | 74 |
| 48 | 49 | 86 |
| 48 | 49 | 98 |
| 48 | 61 | 38 |
| 48 | 61 | 50 |
| 48 | 61 | 62 |
| 48 | 61 | 74 |
| 48 | 61 | 86 |
| 48 | 61 | 98 |
| 48 | 73 | 38 |
| 48 | 73 | 50 |
| 48 | 73 | 62 |
| 48 | 73 | 74 |
| 48 | 73 | 86 |
| 48 | 73 | 98 |
| 48 | 85 | 38 |
| 48 | 85 | 50 |
| 48 | 85 | 62 |
| 48 | 85 | 74 |
| 48 | 85 | 86 |
| 48 | 85 | 98 |
| 48 | 97 | 38 |
| 48 | 97 | 50 |
| 48 | 97 | 62 |
| 48 | 97 | 74 |
| 48 | 97 | 86 |
| 48 | 97 | 98 |
| 60 | 37 | 38 |
| 60 | 37 | 50 |
| 60 | 37 | 62 |
| 60 | 37 | 74 |
| 60 | 37 | 86 |
| 60 | 37 | 98 |
| 60 | 49 | 38 |
| 60 | 49 | 50 |
| 60 | 49 | 62 |
| 60 | 49 | 74 |
| 60 | 49 | 86 |
| 60 | 49 | 98 |
| 60 | 61 | 38 |
| 60 | 61 | 50 |
| 60 | 61 | 62 |
| 60 | 61 | 74 |
| 60 | 61 | 86 |
| 60 | 61 | 98 |
| 60 | 73 | 38 |
| 60 | 73 | 50 |
| 60 | 73 | 62 |
| 60 | 73 | 74 |
| 60 | 73 | 86 |
| 60 | 73 | 98 |
| 60 | 85 | 38 |
| 60 | 85 | 50 |
| 60 | 85 | 62 |
| 60 | 85 | 74 |
| 60 | 85 | 86 |
| 60 | 85 | 98 |
| 60 | 97 | 38 |
| 60 | 97 | 50 |
| 60 | 97 | 62 |
| 60 | 97 | 74 |
| 60 | 97 | 86 |
| 60 | 97 | 98 |
| 72 | 37 | 38 |
| 72 | 37 | 50 |
| 72 | 37 | 62 |
| 72 | 37 | 74 |
| 72 | 37 | 86 |
| 72 | 37 | 98 |
| 72 | 49 | 38 |
| 72 | 49 | 50 |
| 72 | 49 | 62 |

** define sequencer fn (that takes any millisecond length) and record
#+BEGIN_SRC clojure :tangle yes
(defn sequencer-any-ms [midis ms]
  (map #(do (Thread/sleep ms) (sampled-piano %)) midis))
#+END_SRC

#+RESULTS:
: #'user/sequencer-any-ms

#+BEGIN_SRC clojure
(recording-start "~/Desktop/dissonant-tris1.wav")
(sequencer-any-ms (flatten (take 81 refined-flat-tris)) 100)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(recording-stop)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/dissonant-tris1.wav

#+BEGIN_SRC clojure
(sequencer-any-ms (flatten (take 81 refined-flat-tris)) 100)
#+END_SRC

#+BEGIN_SRC clojure
(rand-seq-debug (vec (range 10)) 3)
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 |

#+BEGIN_SRC clojure
(rand-seq-debug (vec refined-flat-tris) 3)
#+END_SRC

#+RESULTS:
| 48 | 86 | 102 |
| 48 | 98 |  42 |
| 48 | 98 |  54 |

#+BEGIN_SRC clojure :results output
(sequencer-any-ms (flatten (rand-seq-debug (vec refined-flat-tris) 81)) 100)
#+END_SRC

#+RESULTS:
: START: 1370 end: 1400

#+BEGIN_SRC clojure
;;(shuffle [0 1 2])
(shuffle [[0 1 2] [12 13 14] [24 25 26]])
#+END_SRC

#+RESULTS:
| 12 | 13 | 14 |
| 24 | 25 | 26 |
|  0 |  1 |  2 |

#+BEGIN_SRC clojure
(sequencer-any-ms (take 100 (flatten (shuffle refined-flat-tris))) 100)
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 14287> #<synth-node(live): overtone.inst.973/sampled-piano 14288> #<synth-node(live): overtone.inst.973/sampled-piano 14289> #<synth-node(live): overtone.inst.973/sampled-piano 14290> #<synth-node(live): overtone.inst.973/sampled-piano 14291> #<synth-node(live): overtone.inst.973/sampled-piano 14292> #<synth-node(live): overtone.inst.973/sampled-piano 14293> #<synth-node(live): overtone.inst.973/sampled-piano 14294> #<synth-node(live): overtone.inst.973/sampled-piano 14295> #<synth-node(live): overtone.inst.973/sampled-piano 14296> #<synth-node(live): overtone.inst.973/sampled-piano 14297> #<synth-node(live): overtone.inst.973/sampled-piano 14298> #<synth-node(live): overtone.inst.973/sampled-piano 14299> #<synth-node(live): overtone.inst.973/sampled-piano 14300> #<synth-node(live): overtone.inst.973/sampled-piano 14301> #<synth-node(live): overtone.inst.973/sampled-piano 14302> #<synth-node(live): overtone.inst.973/sampled-piano 14303> #<synth-node(live): overtone.inst.973/sampled-piano 14304> #<synth-node(live): overtone.inst.973/sampled-piano 14305> #<synth-node(live): overtone.inst.973/sampled-piano 14306> #<synth-node(live): overtone.inst.973/sampled-piano 14307> #<synth-node(live): overtone.inst.973/sampled-piano 14308> #<synth-node(live): overtone.inst.973/sampled-piano 14309> #<synth-node(live): overtone.inst.973/sampled-piano 14310> #<synth-node(live): overtone.inst.973/sampled-piano 14311> #<synth-node(live): overtone.inst.973/sampled-piano 14312> #<synth-node(live): overtone.inst.973/sampled-piano 14313> #<synth-node(live): overtone.inst.973/sampled-piano 14314> #<synth-node(live): overtone.inst.973/sampled-piano 14315> #<synth-node(live): overtone.inst.973/sampled-piano 14316> #<synth-node(live): overtone.inst.973/sampled-piano 14317> #<synth-node(live): overtone.inst.973/sampled-piano 14318> #<synth-node(live): overtone.inst.973/sampled-piano 14319> #<synth-node(live): overtone.inst.973/sampled-piano 14320> #<synth-node(live): overtone.inst.973/sampled-piano 14321> #<synth-node(live): overtone.inst.973/sampled-piano 14322> #<synth-node(live): overtone.inst.973/sampled-piano 14323> #<synth-node(live): overtone.inst.973/sampled-piano 14324> #<synth-node(live): overtone.inst.973/sampled-piano 14325> #<synth-node(live): overtone.inst.973/sampled-piano 14326> #<synth-node(live): overtone.inst.973/sampled-piano 14327> #<synth-node(live): overtone.inst.973/sampled-piano 14328> #<synth-node(live): overtone.inst.973/sampled-piano 14329> #<synth-node(live): overtone.inst.973/sampled-piano 14330> #<synth-node(live): overtone.inst.973/sampled-piano 14331> #<synth-node(live): overtone.inst.973/sampled-piano 14332> #<synth-node(live): overtone.inst.973/sampled-piano 14333> #<synth-node(live): overtone.inst.973/sampled-piano 14334> #<synth-node(live): overtone.inst.973/sampled-piano 14335> #<synth-node(live): overtone.inst.973/sampled-piano 14336> #<synth-node(live): overtone.inst.973/sampled-piano 14337> #<synth-node(live): overtone.inst.973/sampled-piano 14338> #<synth-node(live): overtone.inst.973/sampled-piano 14339> #<synth-node(live): overtone.inst.973/sampled-piano 14340> #<synth-node(live): overtone.inst.973/sampled-piano 14341> #<synth-node(live): overtone.inst.973/sampled-piano 14342> #<synth-node(live): overtone.inst.973/sampled-piano 14343> #<synth-node(live): overtone.inst.973/sampled-piano 14344> #<synth-node(live): overtone.inst.973/sampled-piano 14345> #<synth-node(live): overtone.inst.973/sampled-piano 14346> #<synth-node(live): overtone.inst.973/sampled-piano 14347> #<synth-node(live): overtone.inst.973/sampled-piano 14348> #<synth-node(live): overtone.inst.973/sampled-piano 14349> #<synth-node(live): overtone.inst.973/sampled-piano 14350> #<synth-node(live): overtone.inst.973/sampled-piano 14351> #<synth-node(live): overtone.inst.973/sampled-piano 14352> #<synth-node(live): overtone.inst.973/sampled-piano 14353> #<synth-node(live): overtone.inst.973/sampled-piano 14354> #<synth-node(live): overtone.inst.973/sampled-piano 14355> #<synth-node(live): overtone.inst.973/sampled-piano 14356> #<synth-node(live): overtone.inst.973/sampled-piano 14357> #<synth-node(live): overtone.inst.973/sampled-piano 14358> #<synth-node(live): overtone.inst.973/sampled-piano 14359> #<synth-node(live): overtone.inst.973/sampled-piano 14360> #<synth-node(live): overtone.inst.973/sampled-piano 14361> #<synth-node(live): overtone.inst.973/sampled-piano 14362> #<synth-node(live): overtone.inst.973/sampled-piano 14363> #<synth-node(live): overtone.inst.973/sampled-piano 14364> #<synth-node(live): overtone.inst.973/sampled-piano 14365> #<synth-node(live): overtone.inst.973/sampled-piano 14366> #<synth-node(live): overtone.inst.973/sampled-piano 14367> #<synth-node(live): overtone.inst.973/sampled-piano 14368> #<synth-node(live): overtone.inst.973/sampled-piano 14369> #<synth-node(live): overtone.inst.973/sampled-piano 14370> #<synth-node(live): overtone.inst.973/sampled-piano 14371> #<synth-node(live): overtone.inst.973/sampled-piano 14372> #<synth-node(live): overtone.inst.973/sampled-piano 14373> #<synth-node(live): overtone.inst.973/sampled-piano 14374> #<synth-node(live): overtone.inst.973/sampled-piano 14375> #<synth-node(live): overtone.inst.973/sampled-piano 14376> #<synth-node(live): overtone.inst.973/sampled-piano 14377> #<synth-node(live): overtone.inst.973/sampled-piano 14378> #<synth-node(live): overtone.inst.973/sampled-piano 14379> #<synth-node(live): overtone.inst.973/sampled-piano 14380> #<synth-node(live): overtone.inst.973/sampled-piano 14381> #<synth-node(live): overtone.inst.973/sampled-piano 14382> #<synth-node(live): overtone.inst.973/sampled-piano 14383> #<synth-node(live): overtone.inst.973/sampled-piano 14384> #<synth-node(live): overtone.inst.973/sampled-piano 14385> #<synth-node(loading): overtone.inst.973/sampled-piano 14386>)

#+BEGIN_SRC clojure

(recording-start "/Users/a/Google Drive/wav-file-uploads/shuffled-arpeggios2.wav" )
(sequencer-any-ms (take 1000 (flatten (shuffle refined-flat-tris))) 100)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(recording-stop)
#+END_SRC

#+RESULTS:
: /Users/a/Google Drive/wav-file-uploads/shuffled-arpeggios2.wav

#+BEGIN_SRC clojure
(repeatedly 10 #(rand-int 12))
#+END_SRC

#+RESULTS:
| 2 | 1 | 0 | 9 | 1 | 5 | 9 | 5 | 9 | 11 |


#+BEGIN_SRC clojure
(repeatedly 10 #(+ 36 (rand-int 36)))
#+END_SRC

#+RESULTS:
| 68 | 63 | 49 | 53 | 69 | 68 | 71 | 38 | 52 | 70 |


#+BEGIN_SRC clojure
(sequencer-any-ms (vec (repeatedly 10 #(+ 36 (rand-int 36)))) 100)
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 13877> #<synth-node(live): overtone.inst.973/sampled-piano 13878> #<synth-node(live): overtone.inst.973/sampled-piano 13879> #<synth-node(live): overtone.inst.973/sampled-piano 13880> #<synth-node(live): overtone.inst.973/sampled-piano 13881> #<synth-node(live): overtone.inst.973/sampled-piano 13882> #<synth-node(live): overtone.inst.973/sampled-piano 13883> #<synth-node(live): overtone.inst.973/sampled-piano 13884> #<synth-node(live): overtone.inst.973/sampled-piano 13885> #<synth-node(loading): overtone.inst.973/sampled-piano 13886>)

** give weighted random values to sampled-piano "level"
#+BEGIN_SRC clojure :results output
(doc sampled-piano)
#+END_SRC

#+RESULTS:
: -------------------------
: overtone.inst.sampled-piano/sampled-piano
: ([note level rate loop? attack decay sustain release curve gate])
:   nil

#+BEGIN_SRC clojure
(sampled-piano 60 (rand))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.inst.973/sampled-piano 13449>


#+BEGIN_SRC clojure
(repeatedly 10 #(weighted-choose {2 0.1, 1 0.9}))
#+END_SRC

#+RESULTS:
| 1 | 1 | 1 | 2 | 2 | 1 | 1 | 1 | 1 | 1 |

** Konrad Hinsen's 'uniform' function
#+BEGIN_SRC clojure
(defn uniform
  "Return a distribution in which each of the elements of coll
   has the same probability."
  [coll]
  (let [n (count coll)
	p (/ 1 n)]
    (into {} (for [x (seq coll)] [x p]))))
#+END_SRC

#+RESULTS:
: #'user/uniform

#+BEGIN_SRC clojure
(uniform [0 1 2 3])
#+END_SRC

#+RESULTS:
| 0 | 1/4 | 1 | 1/4 | 2 | 1/4 | 3 | 1/4 |

#+BEGIN_SRC clojure
;; {0 1/4, 1 1/4, 2 1/4, 3 1/4}
(weighted-choose {1 0.5, 2 0.3, 3 0.125, 4 0.075})
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC clojure
(weighted-choose {1 1/4, 2 1/4 , 3 1/4, 4 1/4})
#+END_SRC

#+BEGIN_SRC clojure
(weighted-choose {1 (float 1/4), 2 (float 1/4) , 3 (float 1/4), 4 (float 1/4)})

#+END_SRC

#+RESULTS:
: 4

#+BEGIN_SRC clojure
(into {} (for [[k v] (uniform [0 1 2 3])] [k (float v)]))
#+END_SRC

#+RESULTS:
| 0 | 0.25 | 1 | 0.25 | 2 | 0.25 | 3 | 0.25 |

#+BEGIN_SRC clojure
(weighted-choose (into {} (for [[k v] (uniform [0 1 2 3])] [k (float v)])))

#+END_SRC

#+RESULTS:
: 1

** struggle with reversing key values and inserting into a map
#+BEGIN_SRC clojure
(map reverse (partition 2 [0 1 2 3]))
#+END_SRC

#+RESULTS:
| 1 | 0 |
| 3 | 2 |

#+BEGIN_SRC clojure
(partition 2 (uniform [0 1 2 3]))
#+END_SRC

#+RESULTS:
| (0 1/4) | (1 1/4) |
| (2 1/4) | (3 1/4) |

#+BEGIN_SRC clojure
(map reverse (partition 2 (uniform [0 1 2 3])))
#+END_SRC

#+RESULTS:
| (1 1/4) | (0 1/4) |
| (3 1/4) | (2 1/4) |

#+BEGIN_SRC clojure
(type (map reverse (partition 2 (uniform [0 1 2 3]))))
#+END_SRC

#+RESULTS:
: clojure.lang.LazySeq

#+BEGIN_SRC clojure
(type (vec (map reverse (partition 2 (uniform [0 1 2 3])))))
#+END_SRC

#+RESULTS:
: clojure.lang.PersistentVector

#+BEGIN_SRC clojure

(into {} (vec (map reverse (partition 2 (uniform [0 1 2 3])))))
#+END_SRC

#+RESULTS:
| 1 | 1/4 | 0 | 1/4 | 3 | 1/4 | 2 | 1/4 |

#+END_SRC

#+BEGIN_SRC clojure
(type (first (into {} (vec (map reverse (partition 2 (uniform [0 1 2 3])))))))
#+END_SRC

#+RESULTS:
: clojure.lang.MapEntry

#+BEGIN_SRC clojure
(type (map reverse (partition 2 (flatten (vec (uniform [0 1 2]))))))
#+END_SRC

#+RESULTS:
: clojure.lang.LazySeq

#+BEGIN_SRC clojure

(type (first (map reverse (partition 2 (flatten (vec (uniform [0 1 2])))))))

#+END_SRC

#+RESULTS:
: clojure.lang.PersistentList

#+BEGIN_SRC clojure
(into {} (map reverse (partition 2 (uniform [0 1 2 3]))))
#+END_SRC

#+RESULTS:
| 1 | 1/4 | 0 | 1/4 | 3 | 1/4 | 2 | 1/4 |



#+RESULTS:

** define dynamic ranges and weightings for sampled-piano sequencer

#+BEGIN_SRC clojure
(defn convert-vals-to-floats [m] (into {} (for [[k v] m] [k (float v)])))
#+END_SRC

#+RESULTS:
: #'user/convert-vals-to-floats

#+BEGIN_SRC clojure
(def dynamics-dist (uniform [0 1 2 3]))
#+END_SRC

#+RESULTS:
: #'user/dynamics-dist

#+BEGIN_SRC clojure
dynamics-dist
#+END_SRC

#+RESULTS:
| 0 | 1/4 | 1 | 1/4 | 2 | 1/4 | 3 | 1/4 |


#+BEGIN_SRC clojure
(def dynamics-dist-floats (convert-vals-to-floats dynamics-dist))
#+END_SRC

#+RESULTS:
: #'user/dynamics-dist-floats

#+BEGIN_SRC clojure
(def new-dynamics-dist-floats {0.1 0.25, 0.4 0.25, 0.6 0.4, 0.9 0.1})
#+END_SRC

#+RESULTS:
: #'user/new-dynamics-dist-floats


** define a sequencer using dynamics-piano
#+BEGIN_SRC clojure
(repeatedly 10 #(weighted-choose new-dynamics-dist-floats))
#+END_SRC

#+RESULTS:
| 0.4 | 0.6 | 0.2 | 0.2 | 0.2 | 0.6 | 0.6 | 0.2 | 0.4 | 0.4 |


#+BEGIN_SRC clojure
(sampled-piano 60 (weighted-choose new-dynamics-dist-floats))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.inst.973/sampled-piano 13456>



#+BEGIN_SRC clojure
(defn sequencer-500-dynamics [midis]
  (map #(do (Thread/sleep 500)
            (sampled-piano % (weighted-choose new-dynamics-dist-floats))
            midis)))
#+END_SRC

#+RESULTS:
: #'user/sequencer-500-dynamics


#+BEGIN_SRC clojure :tangle yes
(defn sequencer-any-ms [midis ms]
  (map #(do (Thread/sleep ms) (sampled-piano % (weighted-choose new-dynamics-dist-floats))) midis))
#+END_SRC

#+RESULTS:
: #'user/sequencer-any-ms

#+BEGIN_SRC clojure
(sequencer-any-ms (vec (repeatedly 100 #(+ 36 (rand-int 36)))) 100)
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 13777> #<synth-node(live): overtone.inst.973/sampled-piano 13778> #<synth-node(live): overtone.inst.973/sampled-piano 13779> #<synth-node(live): overtone.inst.973/sampled-piano 13780> #<synth-node(live): overtone.inst.973/sampled-piano 13781> #<synth-node(live): overtone.inst.973/sampled-piano 13782> #<synth-node(live): overtone.inst.973/sampled-piano 13783> #<synth-node(live): overtone.inst.973/sampled-piano 13784> #<synth-node(live): overtone.inst.973/sampled-piano 13785> #<synth-node(live): overtone.inst.973/sampled-piano 13786> #<synth-node(live): overtone.inst.973/sampled-piano 13787> #<synth-node(live): overtone.inst.973/sampled-piano 13788> #<synth-node(live): overtone.inst.973/sampled-piano 13789> #<synth-node(live): overtone.inst.973/sampled-piano 13790> #<synth-node(live): overtone.inst.973/sampled-piano 13791> #<synth-node(live): overtone.inst.973/sampled-piano 13792> #<synth-node(live): overtone.inst.973/sampled-piano 13793> #<synth-node(live): overtone.inst.973/sampled-piano 13794> #<synth-node(live): overtone.inst.973/sampled-piano 13795> #<synth-node(live): overtone.inst.973/sampled-piano 13796> #<synth-node(live): overtone.inst.973/sampled-piano 13797> #<synth-node(live): overtone.inst.973/sampled-piano 13798> #<synth-node(live): overtone.inst.973/sampled-piano 13799> #<synth-node(live): overtone.inst.973/sampled-piano 13800> #<synth-node(live): overtone.inst.973/sampled-piano 13801> #<synth-node(live): overtone.inst.973/sampled-piano 13802> #<synth-node(live): overtone.inst.973/sampled-piano 13803> #<synth-node(live): overtone.inst.973/sampled-piano 13804> #<synth-node(live): overtone.inst.973/sampled-piano 13805> #<synth-node(live): overtone.inst.973/sampled-piano 13806> #<synth-node(live): overtone.inst.973/sampled-piano 13807> #<synth-node(live): overtone.inst.973/sampled-piano 13808> #<synth-node(live): overtone.inst.973/sampled-piano 13809> #<synth-node(live): overtone.inst.973/sampled-piano 13810> #<synth-node(live): overtone.inst.973/sampled-piano 13811> #<synth-node(live): overtone.inst.973/sampled-piano 13812> #<synth-node(live): overtone.inst.973/sampled-piano 13813> #<synth-node(live): overtone.inst.973/sampled-piano 13814> #<synth-node(live): overtone.inst.973/sampled-piano 13815> #<synth-node(live): overtone.inst.973/sampled-piano 13816> #<synth-node(live): overtone.inst.973/sampled-piano 13817> #<synth-node(live): overtone.inst.973/sampled-piano 13818> #<synth-node(live): overtone.inst.973/sampled-piano 13819> #<synth-node(live): overtone.inst.973/sampled-piano 13820> #<synth-node(live): overtone.inst.973/sampled-piano 13821> #<synth-node(live): overtone.inst.973/sampled-piano 13822> #<synth-node(live): overtone.inst.973/sampled-piano 13823> #<synth-node(live): overtone.inst.973/sampled-piano 13824> #<synth-node(live): overtone.inst.973/sampled-piano 13825> #<synth-node(live): overtone.inst.973/sampled-piano 13826> #<synth-node(live): overtone.inst.973/sampled-piano 13827> #<synth-node(live): overtone.inst.973/sampled-piano 13828> #<synth-node(live): overtone.inst.973/sampled-piano 13829> #<synth-node(live): overtone.inst.973/sampled-piano 13830> #<synth-node(live): overtone.inst.973/sampled-piano 13831> #<synth-node(live): overtone.inst.973/sampled-piano 13832> #<synth-node(live): overtone.inst.973/sampled-piano 13833> #<synth-node(live): overtone.inst.973/sampled-piano 13834> #<synth-node(live): overtone.inst.973/sampled-piano 13835> #<synth-node(live): overtone.inst.973/sampled-piano 13836> #<synth-node(live): overtone.inst.973/sampled-piano 13837> #<synth-node(live): overtone.inst.973/sampled-piano 13838> #<synth-node(live): overtone.inst.973/sampled-piano 13839> #<synth-node(live): overtone.inst.973/sampled-piano 13840> #<synth-node(live): overtone.inst.973/sampled-piano 13841> #<synth-node(live): overtone.inst.973/sampled-piano 13842> #<synth-node(live): overtone.inst.973/sampled-piano 13843> #<synth-node(live): overtone.inst.973/sampled-piano 13844> #<synth-node(live): overtone.inst.973/sampled-piano 13845> #<synth-node(live): overtone.inst.973/sampled-piano 13846> #<synth-node(live): overtone.inst.973/sampled-piano 13847> #<synth-node(live): overtone.inst.973/sampled-piano 13848> #<synth-node(live): overtone.inst.973/sampled-piano 13849> #<synth-node(live): overtone.inst.973/sampled-piano 13850> #<synth-node(live): overtone.inst.973/sampled-piano 13851> #<synth-node(live): overtone.inst.973/sampled-piano 13852> #<synth-node(live): overtone.inst.973/sampled-piano 13853> #<synth-node(live): overtone.inst.973/sampled-piano 13854> #<synth-node(live): overtone.inst.973/sampled-piano 13855> #<synth-node(live): overtone.inst.973/sampled-piano 13856> #<synth-node(live): overtone.inst.973/sampled-piano 13857> #<synth-node(live): overtone.inst.973/sampled-piano 13858> #<synth-node(live): overtone.inst.973/sampled-piano 13859> #<synth-node(live): overtone.inst.973/sampled-piano 13860> #<synth-node(live): overtone.inst.973/sampled-piano 13861> #<synth-node(live): overtone.inst.973/sampled-piano 13862> #<synth-node(live): overtone.inst.973/sampled-piano 13863> #<synth-node(live): overtone.inst.973/sampled-piano 13864> #<synth-node(live): overtone.inst.973/sampled-piano 13865> #<synth-node(live): overtone.inst.973/sampled-piano 13866> #<synth-node(live): overtone.inst.973/sampled-piano 13867> #<synth-node(live): overtone.inst.973/sampled-piano 13868> #<synth-node(live): overtone.inst.973/sampled-piano 13869> #<synth-node(live): overtone.inst.973/sampled-piano 13870> #<synth-node(live): overtone.inst.973/sampled-piano 13871> #<synth-node(live): overtone.inst.973/sampled-piano 13872> #<synth-node(live): overtone.inst.973/sampled-piano 13873> #<synth-node(live): overtone.inst.973/sampled-piano 13874> #<synth-node(live): overtone.inst.973/sampled-piano 13875> #<synth-node(loading): overtone.inst.973/sampled-piano 13876>)

#+BEGIN_SRC clojure
(rand-seq-debug (vec refined-flat-tris) 10)
#+END_SRC

#+RESULTS:
| 84 | 51 |  42 |
| 84 | 51 |  54 |
| 84 | 51 |  66 |
| 84 | 51 |  78 |
| 84 | 51 |  90 |
| 84 | 51 | 102 |
| 84 | 63 |  42 |
| 84 | 63 |  54 |
| 84 | 63 |  66 |
| 84 | 63 |  78 |

#+BEGIN_SRC clojure
(sequencer-any-ms (take 100 (flatten (rand-seq-debug (vec refined-flat-tris) 100))) 100)
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 14487> #<synth-node(live): overtone.inst.973/sampled-piano 14488> #<synth-node(live): overtone.inst.973/sampled-piano 14489> #<synth-node(live): overtone.inst.973/sampled-piano 14490> #<synth-node(live): overtone.inst.973/sampled-piano 14491> #<synth-node(live): overtone.inst.973/sampled-piano 14492> #<synth-node(live): overtone.inst.973/sampled-piano 14493> #<synth-node(live): overtone.inst.973/sampled-piano 14494> #<synth-node(live): overtone.inst.973/sampled-piano 14495> #<synth-node(live): overtone.inst.973/sampled-piano 14496> #<synth-node(live): overtone.inst.973/sampled-piano 14497> #<synth-node(live): overtone.inst.973/sampled-piano 14498> #<synth-node(live): overtone.inst.973/sampled-piano 14499> #<synth-node(live): overtone.inst.973/sampled-piano 14500> #<synth-node(live): overtone.inst.973/sampled-piano 14501> #<synth-node(live): overtone.inst.973/sampled-piano 14502> #<synth-node(live): overtone.inst.973/sampled-piano 14503> #<synth-node(live): overtone.inst.973/sampled-piano 14504> #<synth-node(live): overtone.inst.973/sampled-piano 14505> #<synth-node(live): overtone.inst.973/sampled-piano 14506> #<synth-node(live): overtone.inst.973/sampled-piano 14507> #<synth-node(live): overtone.inst.973/sampled-piano 14508> #<synth-node(live): overtone.inst.973/sampled-piano 14509> #<synth-node(live): overtone.inst.973/sampled-piano 14510> #<synth-node(live): overtone.inst.973/sampled-piano 14511> #<synth-node(live): overtone.inst.973/sampled-piano 14512> #<synth-node(live): overtone.inst.973/sampled-piano 14513> #<synth-node(live): overtone.inst.973/sampled-piano 14514> #<synth-node(live): overtone.inst.973/sampled-piano 14515> #<synth-node(live): overtone.inst.973/sampled-piano 14516> #<synth-node(live): overtone.inst.973/sampled-piano 14517> #<synth-node(live): overtone.inst.973/sampled-piano 14518> #<synth-node(live): overtone.inst.973/sampled-piano 14519> #<synth-node(live): overtone.inst.973/sampled-piano 14520> #<synth-node(live): overtone.inst.973/sampled-piano 14521> #<synth-node(live): overtone.inst.973/sampled-piano 14522> #<synth-node(live): overtone.inst.973/sampled-piano 14523> #<synth-node(live): overtone.inst.973/sampled-piano 14524> #<synth-node(live): overtone.inst.973/sampled-piano 14525> #<synth-node(live): overtone.inst.973/sampled-piano 14526> #<synth-node(live): overtone.inst.973/sampled-piano 14527> #<synth-node(live): overtone.inst.973/sampled-piano 14528> #<synth-node(live): overtone.inst.973/sampled-piano 14529> #<synth-node(live): overtone.inst.973/sampled-piano 14530> #<synth-node(live): overtone.inst.973/sampled-piano 14531> #<synth-node(live): overtone.inst.973/sampled-piano 14532> #<synth-node(live): overtone.inst.973/sampled-piano 14533> #<synth-node(live): overtone.inst.973/sampled-piano 14534> #<synth-node(live): overtone.inst.973/sampled-piano 14535> #<synth-node(live): overtone.inst.973/sampled-piano 14536> #<synth-node(live): overtone.inst.973/sampled-piano 14537> #<synth-node(live): overtone.inst.973/sampled-piano 14538> #<synth-node(live): overtone.inst.973/sampled-piano 14539> #<synth-node(live): overtone.inst.973/sampled-piano 14540> #<synth-node(live): overtone.inst.973/sampled-piano 14541> #<synth-node(live): overtone.inst.973/sampled-piano 14542> #<synth-node(live): overtone.inst.973/sampled-piano 14543> #<synth-node(live): overtone.inst.973/sampled-piano 14544> #<synth-node(live): overtone.inst.973/sampled-piano 14545> #<synth-node(live): overtone.inst.973/sampled-piano 14546> #<synth-node(live): overtone.inst.973/sampled-piano 14547> #<synth-node(live): overtone.inst.973/sampled-piano 14548> #<synth-node(live): overtone.inst.973/sampled-piano 14549> #<synth-node(live): overtone.inst.973/sampled-piano 14550> #<synth-node(live): overtone.inst.973/sampled-piano 14551> #<synth-node(live): overtone.inst.973/sampled-piano 14552> #<synth-node(live): overtone.inst.973/sampled-piano 14553> #<synth-node(live): overtone.inst.973/sampled-piano 14554> #<synth-node(live): overtone.inst.973/sampled-piano 14555> #<synth-node(live): overtone.inst.973/sampled-piano 14556> #<synth-node(live): overtone.inst.973/sampled-piano 14557> #<synth-node(live): overtone.inst.973/sampled-piano 14558> #<synth-node(live): overtone.inst.973/sampled-piano 14559> #<synth-node(live): overtone.inst.973/sampled-piano 14560> #<synth-node(live): overtone.inst.973/sampled-piano 14561> #<synth-node(live): overtone.inst.973/sampled-piano 14562> #<synth-node(live): overtone.inst.973/sampled-piano 14563> #<synth-node(live): overtone.inst.973/sampled-piano 14564> #<synth-node(live): overtone.inst.973/sampled-piano 14565> #<synth-node(live): overtone.inst.973/sampled-piano 14566> #<synth-node(live): overtone.inst.973/sampled-piano 14567> #<synth-node(live): overtone.inst.973/sampled-piano 14568> #<synth-node(live): overtone.inst.973/sampled-piano 14569> #<synth-node(live): overtone.inst.973/sampled-piano 14570> #<synth-node(live): overtone.inst.973/sampled-piano 14571> #<synth-node(live): overtone.inst.973/sampled-piano 14572> #<synth-node(live): overtone.inst.973/sampled-piano 14573> #<synth-node(live): overtone.inst.973/sampled-piano 14574> #<synth-node(live): overtone.inst.973/sampled-piano 14575> #<synth-node(live): overtone.inst.973/sampled-piano 14576> #<synth-node(live): overtone.inst.973/sampled-piano 14577> #<synth-node(live): overtone.inst.973/sampled-piano 14578> #<synth-node(live): overtone.inst.973/sampled-piano 14579> #<synth-node(live): overtone.inst.973/sampled-piano 14580> #<synth-node(live): overtone.inst.973/sampled-piano 14581> #<synth-node(live): overtone.inst.973/sampled-piano 14582> #<synth-node(live): overtone.inst.973/sampled-piano 14583> #<synth-node(live): overtone.inst.973/sampled-piano 14584> #<synth-node(live): overtone.inst.973/sampled-piano 14585> #<synth-node(loading): overtone.inst.973/sampled-piano 14586>)

#+BEGIN_SRC clojure
(sequencer-any-ms (take 99 (flatten (shuffle (rand-seq-debug (vec refined-flat-tris) 100)))) 100)
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 14597> #<synth-node(live): overtone.inst.973/sampled-piano 14598> #<synth-node(live): overtone.inst.973/sampled-piano 14599> #<synth-node(live): overtone.inst.973/sampled-piano 14600> #<synth-node(live): overtone.inst.973/sampled-piano 14601> #<synth-node(live): overtone.inst.973/sampled-piano 14602> #<synth-node(live): overtone.inst.973/sampled-piano 14603> #<synth-node(live): overtone.inst.973/sampled-piano 14604> #<synth-node(live): overtone.inst.973/sampled-piano 14605> #<synth-node(live): overtone.inst.973/sampled-piano 14606> #<synth-node(live): overtone.inst.973/sampled-piano 14607> #<synth-node(live): overtone.inst.973/sampled-piano 14608> #<synth-node(live): overtone.inst.973/sampled-piano 14609> #<synth-node(live): overtone.inst.973/sampled-piano 14610> #<synth-node(live): overtone.inst.973/sampled-piano 14611> #<synth-node(live): overtone.inst.973/sampled-piano 14612> #<synth-node(live): overtone.inst.973/sampled-piano 14613> #<synth-node(live): overtone.inst.973/sampled-piano 14614> #<synth-node(live): overtone.inst.973/sampled-piano 14615> #<synth-node(live): overtone.inst.973/sampled-piano 14616> #<synth-node(live): overtone.inst.973/sampled-piano 14617> #<synth-node(live): overtone.inst.973/sampled-piano 14618> #<synth-node(live): overtone.inst.973/sampled-piano 14619> #<synth-node(live): overtone.inst.973/sampled-piano 14620> #<synth-node(live): overtone.inst.973/sampled-piano 14621> #<synth-node(live): overtone.inst.973/sampled-piano 14622> #<synth-node(live): overtone.inst.973/sampled-piano 14623> #<synth-node(live): overtone.inst.973/sampled-piano 14624> #<synth-node(live): overtone.inst.973/sampled-piano 14625> #<synth-node(live): overtone.inst.973/sampled-piano 14626> #<synth-node(live): overtone.inst.973/sampled-piano 14627> #<synth-node(live): overtone.inst.973/sampled-piano 14628> #<synth-node(live): overtone.inst.973/sampled-piano 14629> #<synth-node(live): overtone.inst.973/sampled-piano 14630> #<synth-node(live): overtone.inst.973/sampled-piano 14631> #<synth-node(live): overtone.inst.973/sampled-piano 14632> #<synth-node(live): overtone.inst.973/sampled-piano 14633> #<synth-node(live): overtone.inst.973/sampled-piano 14634> #<synth-node(live): overtone.inst.973/sampled-piano 14635> #<synth-node(live): overtone.inst.973/sampled-piano 14636> #<synth-node(live): overtone.inst.973/sampled-piano 14637> #<synth-node(live): overtone.inst.973/sampled-piano 14638> #<synth-node(live): overtone.inst.973/sampled-piano 14639> #<synth-node(live): overtone.inst.973/sampled-piano 14640> #<synth-node(live): overtone.inst.973/sampled-piano 14641> #<synth-node(live): overtone.inst.973/sampled-piano 14642> #<synth-node(live): overtone.inst.973/sampled-piano 14643> #<synth-node(live): overtone.inst.973/sampled-piano 14644> #<synth-node(live): overtone.inst.973/sampled-piano 14645> #<synth-node(live): overtone.inst.973/sampled-piano 14646> #<synth-node(live): overtone.inst.973/sampled-piano 14647> #<synth-node(live): overtone.inst.973/sampled-piano 14648> #<synth-node(live): overtone.inst.973/sampled-piano 14649> #<synth-node(live): overtone.inst.973/sampled-piano 14650> #<synth-node(live): overtone.inst.973/sampled-piano 14651> #<synth-node(live): overtone.inst.973/sampled-piano 14652> #<synth-node(live): overtone.inst.973/sampled-piano 14653> #<synth-node(live): overtone.inst.973/sampled-piano 14654> #<synth-node(live): overtone.inst.973/sampled-piano 14655> #<synth-node(live): overtone.inst.973/sampled-piano 14656> #<synth-node(live): overtone.inst.973/sampled-piano 14657> #<synth-node(live): overtone.inst.973/sampled-piano 14658> #<synth-node(live): overtone.inst.973/sampled-piano 14659> #<synth-node(live): overtone.inst.973/sampled-piano 14660> #<synth-node(live): overtone.inst.973/sampled-piano 14661> #<synth-node(live): overtone.inst.973/sampled-piano 14662> #<synth-node(live): overtone.inst.973/sampled-piano 14663> #<synth-node(live): overtone.inst.973/sampled-piano 14664> #<synth-node(live): overtone.inst.973/sampled-piano 14665> #<synth-node(live): overtone.inst.973/sampled-piano 14666> #<synth-node(live): overtone.inst.973/sampled-piano 14667> #<synth-node(live): overtone.inst.973/sampled-piano 14668> #<synth-node(live): overtone.inst.973/sampled-piano 14669> #<synth-node(live): overtone.inst.973/sampled-piano 14670> #<synth-node(live): overtone.inst.973/sampled-piano 14671> #<synth-node(live): overtone.inst.973/sampled-piano 14672> #<synth-node(live): overtone.inst.973/sampled-piano 14673> #<synth-node(live): overtone.inst.973/sampled-piano 14674> #<synth-node(live): overtone.inst.973/sampled-piano 14675> #<synth-node(live): overtone.inst.973/sampled-piano 14676> #<synth-node(live): overtone.inst.973/sampled-piano 14677> #<synth-node(live): overtone.inst.973/sampled-piano 14678> #<synth-node(live): overtone.inst.973/sampled-piano 14679> #<synth-node(live): overtone.inst.973/sampled-piano 14680> #<synth-node(live): overtone.inst.973/sampled-piano 14681> #<synth-node(live): overtone.inst.973/sampled-piano 14682> #<synth-node(live): overtone.inst.973/sampled-piano 14683> #<synth-node(live): overtone.inst.973/sampled-piano 14684> #<synth-node(live): overtone.inst.973/sampled-piano 14685> #<synth-node(live): overtone.inst.973/sampled-piano 14686> #<synth-node(live): overtone.inst.973/sampled-piano 14687> #<synth-node(live): overtone.inst.973/sampled-piano 14688> #<synth-node(live): overtone.inst.973/sampled-piano 14689> #<synth-node(live): overtone.inst.973/sampled-piano 14690> #<synth-node(live): overtone.inst.973/sampled-piano 14691> #<synth-node(live): overtone.inst.973/sampled-piano 14692> #<synth-node(live): overtone.inst.973/sampled-piano 14693> #<synth-node(live): overtone.inst.973/sampled-piano 14694> #<synth-node(loading): overtone.inst.973/sampled-piano 14695>)





* how are you going to use the results of selecting pairs to generate music?
** use probability with X-Y pairs

*** use a cond
#+BEGIN_SRC clojure
(let [a [0 1 3] b [0 1 4]]
  (cond [a (weighted-choose {[0 1 3] (float 1/4), [0 1 4] (float 1/4) , [0 1 5] (float 1/4), [0 1 6] (float 1/4)})
         b (weighted-choose {[0 1 4] (float 1/4), [0 1 5] (float 1/4) , [0 1 6] (float 1/4), [0 2 4] (float 1/4)})]))

#+END_SRC

*** use a case
#+BEGIN_SRC clojure
(let [a (rand-nth [[0 1 3] [0 1 4] [0 2 6]])]
  (case a
    [0 1 3] [0 1 4]
    [0 1 4] [0 1 5]
    [0 2 6] [0 1 2]
    ))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |

*** return the X and the Y set with a case
#+BEGIN_SRC clojure
(let [a (rand-nth [[0 1 3] [0 1 4] [0 2 6]])
      b (case a
          [0 1 3] [0 1 4]
          [0 1 4] [0 1 5]
          [0 2 6] [0 1 2]
          )]
  [a b])
#+END_SRC

#+RESULTS:
| 0 | 2 | 6 |
| 0 | 1 | 2 |

*** use weighted-choose for the Y pairing
#+BEGIN_SRC clojure
(let [a (rand-nth [[0 1 3] [0 1 4] [0 2 6]])
      b (case a
          [0 1 3] (weighted-choose {[0 1 4] 0.1, [0 4 8] 0.9})
          [0 1 4] (weighted-choose {[0 1 6] 0.1, [0 2 4] 0.9})
          [0 2 6] (weighted-choose {[0 3 7] 0.1, [0 2 5] 0.9})
          )]
  [a b])
#+END_SRC

#+RESULTS:
| 0 | 2 | 6 |
| 0 | 2 | 5 |

*** generate 10 X-Y pairs to see probabilities in effect
#+BEGIN_SRC clojure
(repeatedly 10 #(let [a (rand-nth [[0 1 3] [0 1 4] [0 2 6]])
      b (case a
          [0 1 3] (weighted-choose {[0 1 4] 0.2, [0 4 8] 0.8})
          [0 1 4] (weighted-choose {[0 1 6] 0.25, [0 2 4] 0.75})
          [0 2 6] (weighted-choose {[0 3 7] 0.35, [0 2 5] 0.65})
          )]
  [a b]))
#+END_SRC

#+RESULTS:
| (0 1 3) | (0 1 4) |
| (0 1 4) | (0 2 4) |
| (0 1 4) | (0 2 4) |
| (0 1 4) | (0 1 6) |
| (0 1 4) | (0 2 4) |
| (0 2 6) | (0 3 7) |
| (0 1 3) | (0 4 8) |
| (0 1 4) | (0 2 4) |
| (0 2 6) | (0 2 5) |
| (0 1 4) | (0 1 6) |

* automate recording a bunch of files realizing these chord progressions
** using buffers a la Sam Aaron
#+BEGIN_SRC clojure
(def my-bus (audio-bus))

(def num-buffer-channels 1)

(def b (buffer (* 44100 10) num-buffer-channels))
#+END_SRC

#+RESULTS:
: #'user/my-bus#'user/num-buffer-channels#'user/b

#+BEGIN_SRC clojure
(defsynth noisemaker [freq 220 out-bus 0] 
(out out-bus (lf-tri:ar freq)))

(defsynth recorder []
(let [signal (in:ar my-bus) ]
(record-buf:ar [signal] b)))

#+END_SRC

#+RESULTS:
: #<synth: noisemaker>#<synth: recorder>

#+BEGIN_SRC clojure
(noisemaker)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/noisemaker 14698>

#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(play-piano-chord (invert-chord (chord :C4 :major) 1))

#+END_SRC

#+RESULTS:
** record 2 seconds
#+BEGIN_SRC clojure
(let [midis (first [[60 64 67] [61 65 69]])
      track-name (str "~/Desktop/" midis ".wav")]
  (recording-start track-name)
  (play-piano-chord midis)
  (Thread/sleep 2000)
  (recording-stop))
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/[60 64 67].wav

#+BEGIN_SRC clojure
(defn record-tracks [dir duration]
(let [pcset [0 1 4] chords (map #(+ 60 %) pcset)
  (for [midis chords
(str "/Users/a/Documents/working-directory/genaudios/" midis "(" pcset ").wav")
#+END_SRC

#+BEGIN_SRC clojure
((fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) [0 1 4])
#+END_SRC

#+RESULTS:
| 60 | 61 | 64 |
| 61 | 62 | 65 |
| 62 | 63 | 66 |

#+BEGIN_SRC clojure
(let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) [[0 1 4] [0 1 6]])]
(apply concat all-events))
#+END_SRC

#+RESULTS:
| 60 | 61 | 64 |
| 61 | 62 | 65 |
| 62 | 63 | 66 |
| 60 | 61 | 66 |
| 61 | 62 | 67 |
| 62 | 63 | 68 |
** first "place-holder" function
*** writes lazy-seq into filename
#+BEGIN_SRC clojure
(defn place-holder [pcsets dir duration]
  (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
      (let [track-name (str dir midis ".wav")]
        (recording-start track-name)
        (play-piano-chord midis) 
        (Thread/sleep duration)
        (recording-stop)))))
#+END_SRC

#+RESULTS:
: #'user/place-holder


#+BEGIN_SRC clojure
(place-holder [[0 1 2] [0 1 4]] "/Users/a/Documents/working-directory/genaudios/" 2000)
#+END_SRC

#+BEGIN_SRC clojure
((fn [pcsets dir duration]
  (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
      (let [track-name (str dir midis ".wav")] [track-name])))) [[0 1 3]] "/Users/a/Documents/working-directory/genaudios/" 2000)

#+END_SRC

#+RESULTS:
| /Users/a/Documents/working-directory/genaudios/clojure.lang.LazySeq@15d3d.wav |
| /Users/a/Documents/working-directory/genaudios/clojure.lang.LazySeq@1611e.wav |
| /Users/a/Documents/working-directory/genaudios/clojure.lang.LazySeq@164ff.wav |
*** begin to solve problem of writing set-name vs. clojure object name
#+BEGIN_SRC clojure
((fn [pcsets] (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
      flat-events (apply concat all-events)]
flat-events)) [[0 1 3]])


#+END_SRC

#+RESULTS:
| 60 | 61 | 63 |
| 61 | 62 | 64 |
| 62 | 63 | 65 |


#+BEGIN_SRC clojure
((fn [pcsets dir duration]
  (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
       midis))) [[0 1 3]] "/Users/a/Documents/working-directory/genaudios/" 2000)
#+END_SRC

#+RESULTS:
| 60 | 61 | 63 |
| 61 | 62 | 64 |
| 62 | 63 | 65 |

#+BEGIN_SRC clojure
((fn [pcsets dir duration]
  (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
    midis))) [[0 1 3]] "/Users/a/Documents/working-directory/genaudios/" 2000)
#+END_SRC

#+RESULTS:
| 60 | 61 | 63 |
| 61 | 62 | 64 |
| 62 | 63 | 65 |
*** call vec on the midis to get the vector into the name
#+BEGIN_SRC clojure
((fn [pcsets dir duration]
  (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
    (let [track-name (str dir (str (vec midis)) ".wav")] [track-name])))) [[0 1 3]] "/Users/a/Documents/working-directory/genaudios/" 2000)
#+END_SRC

#+RESULTS:
| /Users/a/Documents/working-directory/genaudios/[60 61 63].wav |
| /Users/a/Documents/working-directory/genaudios/[61 62 64].wav |
| /Users/a/Documents/working-directory/genaudios/[62 63 65].wav |

#+BEGIN_SRC clojure
(defn place-holder [pcsets dir duration]
  (let [all-events (map (fn [pcset] (for [n (range 3)] (map #(+ (+ n 60) %) pcset))) pcsets)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
      (let [track-name (str dir (str (vec midis)) ".wav")]
        (recording-start track-name)
        (play-piano-chord midis)
        (Thread/sleep duration)
        (recording-stop)))))
#+END_SRC

#+RESULTS:
: #'user/place-holder

#+BEGIN_SRC clojure
;; will actually record
;; (place-holder [[0 1 2] [0 1 3]] "/Users/a/Documents/working-directory/genaudios/" 2000)
#+END_SRC

#+RESULTS:
*** try to work set-class name into title
#+BEGIN_SRC clojure
(defn place-holder [pcsets] (map (fn [pcset]
  (let [all-events ((fn [pcs] (for [n (range 3)] (map #(+ (+ n 60) %) pcs))) pcset)
flat-events (apply concat all-events]] )) pcsets))

        ;; (recording-start track-name)
        ;; (play-piano-chord midis)
        ;; (Thread/sleep duration)
        ;; (recording-stop)))))
#+END_SRC

#+RESULTS:
| (60 61 62) | (61 62 63) | (62 63 64) |
| (60 61 63) | (61 62 64) | (62 63 65) |

#+BEGIN_SRC clojure
(place-holder [[0 1 2] [0 1 4]] "/Users/a/Documents/working-directory/genaudios/" 2000)
#+END_SRC

#+RESULTS:
*** refactor place-holder function to take just one pcset argument
#+BEGIN_SRC clojure
(defn include-setname [pcset]
  (let [all-events ((fn [pcs] (for [n (range 3)] (map #(+ (+ n 60) %) pcs))) pcset)
        flat-events (apply concat all-events)]
    (for [midis flat-events]
      (let [track-name (str "/Users/a/Documents/working-directory/genaudios/" (str (vec midis)) "(" (str pcset) ")" ".wav")]
        [track-name]))))
        ;; (recording-start track-name)
        ;; (play-piano-chord midis)
        ;; (Thread/sleep 2500)
        ;; (recording-stop)

#+END_SRC

#+RESULTS:
: #'user/include-setname

#+BEGIN_SRC clojure
(include-setname [[0 1 4]])
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
((fn include-setname [pcset]
  (let [all-events ((fn [pcs] (for [n (range 3)] (map #(+ (+ n 60) %) pcs))) pcset)]
    all-events)) [0 1 2])
        ;; (recording-start track-name)
        ;; (play-piano-chord midis)
        ;; (Thread/sleep 2500)
        ;; (recording-stop)

#+END_SRC

#+RESULTS:
| 60 | 61 | 62 |
| 61 | 62 | 63 |
| 62 | 63 | 64 |

#+BEGIN_SRC clojure
((fn [pcset]
   (let [all-events ((fn [pcs] (for [n (range 3)] (map #(+ (+ n 60) %) pcs))) pcset)]
     (for [midis all-events]
       (let [track-name (str "/Users/a/Documents/working-directory/genaudios/" (str (vec midis)) "(" pcset ")" ".wav")] [track-name])))) [0 1 2])

        ;; (recording-start track-name)
        ;; (play-piano-chord midis)
        ;; (Thread/sleep duration)
        ;; (recording-stop)))))
#+END_SRC

#+RESULTS:
| /Users/a/Documents/working-directory/genaudios/[60 61 62]([0 1 2]).wav |
| /Users/a/Documents/working-directory/genaudios/[61 62 63]([0 1 2]).wav |
| /Users/a/Documents/working-directory/genaudios/[62 63 64]([0 1 2]).wav |
*** 


#+RESULTS:
: #'user/include-setname

#+BEGIN_SRC clojure
(map (fn [pcset]
  (let [all-events ((fn [pcs] (for [n (range 3)] (map #(+ (+ n 60) %) pcs))) pcset)] all-events)) [[0 1 2] [0 1 3]])

        ;; (recording-start track-name)
        ;; (play-piano-chord midis)
        ;; (Thread/sleep duration)
        ;; (recording-stop)))))
#+END_SRC

#+RESULTS:
| (60 61 62) | (61 62 63) | (62 63 64) |
| (60 61 63) | (61 62 64) | (62 63 65) |
*** define include-setname--to be refactored

#+BEGIN_SRC clojure
(defn include-setname [pcset duration tn-range]
  (let [all-events ((fn [pcs] (for [n (range tn-range )] (map #(+ (+ n 60) %) pcs))) pcset)]
    (for [midis all-events]
      (let [track-name (str "/Users/a/Documents/working-directory/genaudios/" (str (vec midis)) "(" pcset ")" ".wav")]
        (recording-start track-name)
        (play-piano-chord midis)
        (Thread/sleep duration)
        (recording-stop)))))
#+END_SRC

#+BEGIN_SRC clojure
(include-setname [0 1 2] 2000 2)
#+END_SRC

#+RESULTS:
| /Users/a/Documents/working-directory/genaudios/[60 61 62]([0 1 2]).wav | /Users/a/Documents/working-directory/genaudios/[61 62 63]([0 1 2]).wav |

#+BEGIN_SRC clojure
(map #(include-setname % 2000 12) [[0 1 2] [0 1 3]])
#+END_SRC

#+BEGIN_SRC clojure
(map #(include-setname % 2000 1) trichords)
#+END_SRC

#+BEGIN_SRC clojure
[trichords tetrachords pentachords hexachords]
#+END_SRC

#+RESULTS:
| (0 1 2)       | (0 1 3)       | (0 1 4)       | (0 1 5)       | (0 1 6)       | (0 2 4)       | (0 2 5)       | (0 2 6)       | (0 2 7)       | (0 3 6)       | (0 3 7)       | (0 4 8)       |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |                |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |
| (0 1 2 3)     | (0 1 2 4)     | (0 1 3 4)     | (0 1 2 5)     | (0 1 2 6)     | (0 1 2 7)     | (0 1 4 5)     | (0 1 5 6)     | (0 1 6 7)     | (0 2 3 5)     | (0 1 3 5)     | (0 2 3 6)     | (0 1 3 6)     | (0 2 3 7)     | (0 1 3 7)     | (0 1 4 6)     | (0 1 5 7)     | (0 3 4 7)     | (0 1 4 7)     | (0 1 4 8)     | (0 1 5 8)     | (0 2 4 6)     | (0 2 4 7)     | (0 2 5 7)     | (0 2 4 8)     | (0 2 6 8)     | (0 3 5 8)     | (0 2 5 8)     | (0 3 6 9)     |               |               |               |               |               |                |               |               |               |               |               |               |               |               |               |               |               |               |               |               |               |
| (0 1 2 3 4)   | (0 1 2 3 5)   | (0 1 2 4 5)   | (0 1 2 3 6)   | (0 1 2 3 7)   | (0 1 2 5 6)   | (0 1 2 6 7)   | (0 2 3 4 6)   | (0 1 2 4 6)   | (0 1 3 4 6)   | (0 2 3 4 7)   | (0 1 3 5 6)   | (0 1 2 4 8)   | (0 1 2 5 7)   | (0 1 2 6 8)   | (0 1 3 4 7)   | (0 1 3 4 8)   | (0 1 4 5 7)   | (0 1 3 6 7)   | (0 1 3 7 8)   | (0 1 4 5 8)   | (0 1 4 7 8)   | (0 2 3 5 7)   | (0 1 3 5 7)   | (0 2 3 5 8)   | (0 2 4 5 8)   | (0 1 3 5 8)   | (0 2 3 6 8)   | (0 1 3 6 8)   | (0 1 4 6 8)   | (0 1 3 6 9)   | (0 1 4 6 9)   | (0 2 4 6 8)   | (0 2 4 6 9)   | (0 2 4 7 9)    | (0 1 2 4 7)   | (0 3 4 5 8)   | (0 1 2 5 8)   |               |               |               |               |               |               |               |               |               |               |               |               |
| (0 1 2 3 4 5) | (0 1 2 3 4 6) | (0 1 2 3 5 6) | (0 1 2 4 5 6) | (0 1 2 3 6 7) | (0 1 2 5 6 7) | (0 1 2 6 7 8) | (0 2 3 4 5 7) | (0 1 2 3 5 7) | (0 1 3 4 5 7) | (0 1 2 4 5 7) | (0 1 2 4 6 7) | (0 1 3 4 6 7) | (0 1 3 4 5 8) | (0 1 2 4 5 8) | (0 1 4 5 6 8) | (0 1 2 4 7 8) | (0 1 2 5 7 8) | (0 1 3 4 7 8) | (0 1 4 5 8 9) | (0 2 3 4 6 8) | (0 1 2 4 6 8) | (0 2 3 5 6 8) | (0 1 3 4 6 8) | (0 1 3 5 6 8) | (0 1 3 5 7 8) | (0 1 3 4 6 9) | (0 1 3 5 6 9) | (0 1 3 6 8 9) | (0 1 3 6 7 9) | (0 1 3 5 8 9) | (0 2 4 5 7 9) | (0 2 3 5 7 9) | (0 1 3 5 7 9) | (0 2 4 6 8 10) | (0 1 2 3 4 7) | (0 1 2 3 4 8) | (0 1 2 3 7 8) | (0 2 3 4 5 8) | (0 1 2 3 5 8) | (0 1 2 3 6 8) | (0 1 2 3 6 9) | (0 1 2 5 6 8) | (0 1 2 5 6 9) | (0 2 3 4 6 9) | (0 1 2 4 6 9) | (0 1 2 4 7 9) | (0 1 2 5 7 9) | (0 1 3 4 7 9) | (0 1 4 6 7 9) |

#+BEGIN_SRC clojure
(apply concat [trichords tetrachords pentachords hexachords])
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |   |   |    |
| 0 | 1 | 3 |   |   |    |
| 0 | 1 | 4 |   |   |    |
| 0 | 1 | 5 |   |   |    |
| 0 | 1 | 6 |   |   |    |
| 0 | 2 | 4 |   |   |    |
| 0 | 2 | 5 |   |   |    |
| 0 | 2 | 6 |   |   |    |
| 0 | 2 | 7 |   |   |    |
| 0 | 3 | 6 |   |   |    |
| 0 | 3 | 7 |   |   |    |
| 0 | 4 | 8 |   |   |    |
| 0 | 1 | 2 | 3 |   |    |
| 0 | 1 | 2 | 4 |   |    |
| 0 | 1 | 3 | 4 |   |    |
| 0 | 1 | 2 | 5 |   |    |
| 0 | 1 | 2 | 6 |   |    |
| 0 | 1 | 2 | 7 |   |    |
| 0 | 1 | 4 | 5 |   |    |
| 0 | 1 | 5 | 6 |   |    |
| 0 | 1 | 6 | 7 |   |    |
| 0 | 2 | 3 | 5 |   |    |
| 0 | 1 | 3 | 5 |   |    |
| 0 | 2 | 3 | 6 |   |    |
| 0 | 1 | 3 | 6 |   |    |
| 0 | 2 | 3 | 7 |   |    |
| 0 | 1 | 3 | 7 |   |    |
| 0 | 1 | 4 | 6 |   |    |
| 0 | 1 | 5 | 7 |   |    |
| 0 | 3 | 4 | 7 |   |    |
| 0 | 1 | 4 | 7 |   |    |
| 0 | 1 | 4 | 8 |   |    |
| 0 | 1 | 5 | 8 |   |    |
| 0 | 2 | 4 | 6 |   |    |
| 0 | 2 | 4 | 7 |   |    |
| 0 | 2 | 5 | 7 |   |    |
| 0 | 2 | 4 | 8 |   |    |
| 0 | 2 | 6 | 8 |   |    |
| 0 | 3 | 5 | 8 |   |    |
| 0 | 2 | 5 | 8 |   |    |
| 0 | 3 | 6 | 9 |   |    |
| 0 | 1 | 2 | 3 | 4 |    |
| 0 | 1 | 2 | 3 | 5 |    |
| 0 | 1 | 2 | 4 | 5 |    |
| 0 | 1 | 2 | 3 | 6 |    |
| 0 | 1 | 2 | 3 | 7 |    |
| 0 | 1 | 2 | 5 | 6 |    |
| 0 | 1 | 2 | 6 | 7 |    |
| 0 | 2 | 3 | 4 | 6 |    |
| 0 | 1 | 2 | 4 | 6 |    |
| 0 | 1 | 3 | 4 | 6 |    |
| 0 | 2 | 3 | 4 | 7 |    |
| 0 | 1 | 3 | 5 | 6 |    |
| 0 | 1 | 2 | 4 | 8 |    |
| 0 | 1 | 2 | 5 | 7 |    |
| 0 | 1 | 2 | 6 | 8 |    |
| 0 | 1 | 3 | 4 | 7 |    |
| 0 | 1 | 3 | 4 | 8 |    |
| 0 | 1 | 4 | 5 | 7 |    |
| 0 | 1 | 3 | 6 | 7 |    |
| 0 | 1 | 3 | 7 | 8 |    |
| 0 | 1 | 4 | 5 | 8 |    |
| 0 | 1 | 4 | 7 | 8 |    |
| 0 | 2 | 3 | 5 | 7 |    |
| 0 | 1 | 3 | 5 | 7 |    |
| 0 | 2 | 3 | 5 | 8 |    |
| 0 | 2 | 4 | 5 | 8 |    |
| 0 | 1 | 3 | 5 | 8 |    |
| 0 | 2 | 3 | 6 | 8 |    |
| 0 | 1 | 3 | 6 | 8 |    |
| 0 | 1 | 4 | 6 | 8 |    |
| 0 | 1 | 3 | 6 | 9 |    |
| 0 | 1 | 4 | 6 | 9 |    |
| 0 | 2 | 4 | 6 | 8 |    |
| 0 | 2 | 4 | 6 | 9 |    |
| 0 | 2 | 4 | 7 | 9 |    |
| 0 | 1 | 2 | 4 | 7 |    |
| 0 | 3 | 4 | 5 | 8 |    |
| 0 | 1 | 2 | 5 | 8 |    |
| 0 | 1 | 2 | 3 | 4 |  5 |
| 0 | 1 | 2 | 3 | 4 |  6 |
| 0 | 1 | 2 | 3 | 5 |  6 |
| 0 | 1 | 2 | 4 | 5 |  6 |
| 0 | 1 | 2 | 3 | 6 |  7 |
| 0 | 1 | 2 | 5 | 6 |  7 |
| 0 | 1 | 2 | 6 | 7 |  8 |
| 0 | 2 | 3 | 4 | 5 |  7 |
| 0 | 1 | 2 | 3 | 5 |  7 |
| 0 | 1 | 3 | 4 | 5 |  7 |
| 0 | 1 | 2 | 4 | 5 |  7 |
| 0 | 1 | 2 | 4 | 6 |  7 |
| 0 | 1 | 3 | 4 | 6 |  7 |
| 0 | 1 | 3 | 4 | 5 |  8 |
| 0 | 1 | 2 | 4 | 5 |  8 |
| 0 | 1 | 4 | 5 | 6 |  8 |
| 0 | 1 | 2 | 4 | 7 |  8 |
| 0 | 1 | 2 | 5 | 7 |  8 |
| 0 | 1 | 3 | 4 | 7 |  8 |
| 0 | 1 | 4 | 5 | 8 |  9 |
| 0 | 2 | 3 | 4 | 6 |  8 |
| 0 | 1 | 2 | 4 | 6 |  8 |
| 0 | 2 | 3 | 5 | 6 |  8 |
| 0 | 1 | 3 | 4 | 6 |  8 |
| 0 | 1 | 3 | 5 | 6 |  8 |
| 0 | 1 | 3 | 5 | 7 |  8 |
| 0 | 1 | 3 | 4 | 6 |  9 |
| 0 | 1 | 3 | 5 | 6 |  9 |
| 0 | 1 | 3 | 6 | 8 |  9 |
| 0 | 1 | 3 | 6 | 7 |  9 |
| 0 | 1 | 3 | 5 | 8 |  9 |
| 0 | 2 | 4 | 5 | 7 |  9 |
| 0 | 2 | 3 | 5 | 7 |  9 |
| 0 | 1 | 3 | 5 | 7 |  9 |
| 0 | 2 | 4 | 6 | 8 | 10 |
| 0 | 1 | 2 | 3 | 4 |  7 |
| 0 | 1 | 2 | 3 | 4 |  8 |
| 0 | 1 | 2 | 3 | 7 |  8 |
| 0 | 2 | 3 | 4 | 5 |  8 |
| 0 | 1 | 2 | 3 | 5 |  8 |
| 0 | 1 | 2 | 3 | 6 |  8 |
| 0 | 1 | 2 | 3 | 6 |  9 |
| 0 | 1 | 2 | 5 | 6 |  8 |
| 0 | 1 | 2 | 5 | 6 |  9 |
| 0 | 2 | 3 | 4 | 6 |  9 |
| 0 | 1 | 2 | 4 | 6 |  9 |
| 0 | 1 | 2 | 4 | 7 |  9 |
| 0 | 1 | 2 | 5 | 7 |  9 |
| 0 | 1 | 3 | 4 | 7 |  9 |
| 0 | 1 | 4 | 6 | 7 |  9 |

#+BEGIN_SRC clojure
(map #(include-setname % 2000 1) (apply concat [trichords tetrachords pentachords hexachords])) 
#+END_SRC
* cycle over inversions of various libraries of chords
** play simplest c major inversion
#+BEGIN_SRC clojure
(for [n (range 4)] (do (play-piano-chord (invert-chord (chord 60 :major) n)) (Thread/sleep 1000)))
#+END_SRC

#+RESULTS:

** overtone functions for inverting
#+BEGIN_SRC clojure
(defn invert
  "Invert a sequence of notes using either the first note as the
  stationary pivot point or the optional second argument."
  [notes & [pivot]]
  (let [pivot (or pivot (first notes))]
    (for [n notes] (- pivot (- n pivot)))))
#+END_SRC

#+BEGIN_SRC clojure
(invert [60 64 67 71])
#+END_SRC

#+RESULTS:
| 60 | 56 | 53 | 49 |


#+BEGIN_SRC clojure
(defn invert-chord
  "Move a chord voicing up or down.

    ;first inversion
    (invert-chord [60 64 67] 1) ;=> (64 67 72)

    ; second inversion
    (invert-chord [60 64 67] 2) ;=> (67 72 76)
  "
  [notes shift]
  (cond
    (pos? shift) (recur (inc-first notes 12) (dec shift))
    (neg? shift) (recur (dec-last notes 12) (inc shift))
    (zero? shift) notes))
#+END_SRC


#+BEGIN_SRC clojure
;; defined as private but made public
(defn inc-first
  "Remove the first element, increment it by n, and append to seq."
  [elems n]
  (concat (next elems) [(+ n (first elems))]))

(defn dec-last
  "Remove the last element, decrement it by n, and prepend to seq."
  [elems n]
  (concat [(- (last elems) n)] (next elems)))
#+END_SRC

#+RESULTS:
: #'user/inc-first#'user/dec-last




#+RESULTS:
| 60 | 67 | 64 |
| 67 | 64 | 72 |
| 64 | 72 | 79 |
| 72 | 79 | 76 |

** calling invert-chord with a number of rotations beyond the set-cardinality is weird?
#+BEGIN_SRC clojure
((fn [notes shift]
   (cond
     (pos? shift) (recur (inc-first notes 12) (dec shift))
     (zero? shift) notes))
 [60 64 67] 3)
#+END_SRC

#+RESULTS:
| 72 | 76 | 79 |


#+BEGIN_SRC clojure
(for [n (range 4)] ((fn [notes shift]
   (cond
     (pos? shift) (recur (inc-first notes 12) (dec shift))
     (zero? shift) notes))
 [60 64 67] n))
#+END_SRC

#+RESULTS:
| 60 | 64 | 67 |
| 64 | 67 | 72 |
| 67 | 72 | 76 |
| 72 | 76 | 79 |

#+BEGIN_SRC clojure
(for [n [0 1 2 3]] (sort (invert-chord (chord :C4 :major) n)))
#+END_SRC

#+RESULTS:
| 60 | 64 | 67 |
| 64 | 67 | 72 |
| 64 | 72 | 79 |
| 72 | 76 | 79 |

#+BEGIN_SRC clojure
(for [n [0 1 2 3]] (sort (invert-chord [60 64 67] n)))
#+END_SRC

#+RESULTS:
| 60 | 64 | 67 |
| 64 | 67 | 72 |
| 67 | 72 | 76 |
| 72 | 76 | 79 |

#+BEGIN_SRC clojure
(for [n [0 1 2 3]] (invert-chord (sort (chord :C4 :major)) n))
#+END_SRC

#+RESULTS:
| 60 | 64 | 67 |
| 64 | 67 | 72 |
| 67 | 72 | 76 |
| 72 | 76 | 79 |

** chord-symbol-keys and chord-symbol-names
#+BEGIN_SRC clojure
(def my-chord-symbol-keys
{:1         #{0}
     :5         #{0 7}
     :+5        #{0 4 8}
     :m+5       #{0 3 8}
     :sus2      #{0 2 7}
     :sus4      #{0 5 7}
     :6         #{0 4 7 9}
     :m6        #{0 3 7 9}
     :min-maj7  #{0 3 7 11} ;; added by WFO
     :7sus2     #{0 2 7 10}
     :7sus4     #{0 5 7 10}
     :7-5       #{0 4 6 10}
     :m7-5      #{0 3 6 10}
     :7+5       #{0 4 8 10}
     :m7+5      #{0 3 8 10}
     :9         #{0 4 7 10 14}
     :m9        #{0 3 7 10 14}
     :m7+9      #{0 3 7 10 14}
     :maj9      #{0 4 7 11 14}
     :9sus4     #{0 5 7 10 14}
     :6*9       #{0 4 7 9 14}
     :m6*9      #{0 3 9 7 14}
     :7-9       #{0 4 7 10 13}
     :m7-9      #{0 3 7 10 13}
     :7-10      #{0 4 7 10 15}
     :9+5       #{0 4 8 10 14} ;; changed from: #{0 10 13}
     :m9+5      #{0 3 8 10 14} ;; changed from #{0 10 14}
     :7+5-9     #{0 4 8 10 13}
     :m7+5-9    #{0 3 8 10 13}
     :11        #{0 4 7 10 14 17}
     :m11       #{0 3 7 10 14 17}
     :maj7+11   #{0 4 7 11 14 18} ;; changed from maj11
     :11+       #{0 4 7 10 14 18}
     :m11+      #{0 3 7 10 14 18}
     :13        #{0 4 7 10 14 17 21}
     :7+9-13     #{0 4 7 10 15 20} ;; added by WFO
     :m13       #{0 3 7 10 14 17 21}
     :major      nil
     :M          nil
     :minor      nil
     :m          nil
     :major7     nil
     :dom7       nil
     :7          nil
     :M7         nil
     :minor7     nil
     :m7         nil
     :augmented  nil
     :a          nil
     :diminished nil
     :dim        nil
     :i          nil
     :diminished7 nil
     :dim7       nil
     :i7         nil})
#+END_SRC

#+RESULTS:
: #'overtone.music.pitch/chord-symbol-keys

#+BEGIN_SRC clojure :session cdb1
(def chord-symbol-names (for [[k v] chord-symbol-keys] [k]))
#+END_SRC

#+RESULTS:
: #'overtone.music.pitch/chord-symbol-names
#+BEGIN_SRC clojure
;; major 3 major 7
[0 3 5 7]
[0 3 5 7 9]
[0 3 5 7 9 11]
[0 3 5 7 9 11 13]

;;minor 3 minor 7
[0 3 5 7]
[0 3 5 7 9]
[0 3 5 7 9 11]
[0 3 5 7 9 11 13]

;; minor 3 major 7
[0 3 5 7]
[0 3 5 7 9]
[0 3 5 7 9 11]
[0 3 5 7 9 11 13]

;; dominant 7
[0 3 5 7]
[0 3 5 7 9]
[0 3 5 7 9 11]
[0 3 5 7 9 11 13]

;; chromatic alterations
[0 3 5 7 -9]
[0 3 5 7 +9]

[0 3 5 7 -9 11]
[0 3 5 7 +9 11]
[0 3 5 7 -9 +11]
[0 3 5 7 +9 +11]

[0 3 5 7 -9 11 13]
[0 3 5 7 -9 11 -13]
[0 3 5 7 +9 11 13]
[0 3 5 7 +9 11 -13]
[0 3 5 7 -9 +11 13]
[0 3 5 7 +9 +11 -13]



#+END_SRC
** view first 20 chord symbol names
#+BEGIN_SRC clojure :session cdb1
(for [inv (take 20 chord-symbol-names) n (range 1)] [inv n])
#+END_SRC

#+RESULTS:
| (:7sus4)     | 0 |
| (:9+5)       | 0 |
| (:M)         | 0 |
| (:m13)       | 0 |
| (:7sus2)     | 0 |
| (:m11+)      | 0 |
| (:dim7)      | 0 |
| (:m7+9)      | 0 |
| (:11)        | 0 |
| (:7+5)       | 0 |
| (:m7+5)      | 0 |
| (:augmented) | 0 |
| (:dim)       | 0 |
| (:7-9)       | 0 |
| (:7-10)      | 0 |
| (:m)         | 0 |
| (:m7-9)      | 0 |
| (:i7)        | 0 |
| (:major7)    | 0 |
| (:13)        | 0 |


#+BEGIN_SRC clojure
(for [inv (take 10 chord-symbol-names) n (range 2)] (sort (invert-chord (chord 60 (first inv)) n)))
#+END_SRC

#+RESULTS:
| 60 | 65 | 67 | 70 |    |    |    |
| 65 | 67 | 70 | 72 |    |    |    |
| 60 | 70 | 73 |    |    |    |    |
| 70 | 72 | 73 |    |    |    |    |
| 60 | 64 | 67 |    |    |    |    |
| 64 | 67 | 72 |    |    |    |    |
| 60 | 63 | 67 | 70 | 74 | 77 | 81 |
| 63 | 67 | 70 | 72 | 74 | 77 | 81 |
| 60 | 62 | 67 | 70 |    |    |    |
| 62 | 67 | 70 | 72 |    |    |    |
| 60 | 63 | 67 | 70 | 74 | 78 |    |
| 63 | 67 | 70 | 72 | 74 | 78 |    |
| 60 | 63 | 66 | 69 |    |    |    |
| 63 | 66 | 69 | 72 |    |    |    |
| 60 | 63 | 67 | 70 | 74 |    |    |
| 63 | 67 | 70 | 72 | 74 |    |    |
| 60 | 64 | 67 | 70 | 74 | 77 |    |
| 64 | 67 | 70 | 72 | 74 | 77 |    |
| 60 | 64 | 68 | 70 |    |    |    |
| 64 | 68 | 70 | 72 |    |    |    |

#+BEGIN_SRC clojure :results output
;; evaluate in the repl for printing purposes
(for [inv (take 5 chord-symbol-names) n (range 4)]
  (let [chord-instance (sort (invert-chord (chord 60 (first inv)) n))]
    (do 
        (println (str inv " ") chord-instance)
        (play-piano-chord chord-instance)
        (Thread/sleep 1000))))
#+END_SRC

#+RESULTS:

** create a general chord-listener function
#+BEGIN_SRC clojure :results output
(defn chord-listener1 [& num-chord-types 30 num-inversions 1 midi-root 60 ms 1500]
  "return a series of chords"
(for [inv (take num-chord-types chord-symbol-names) n (range num-inversions)]
  (let [chord-instance (sort (invert-chord (chord midi-root (first inv)) n))]
    (do 
        (println (str inv " ") chord-instance)
        (play-piano-chord chord-instance)
        (Thread/sleep ms)))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
*ns*
#+END_SRC

#+RESULTS:
: #namespace[user]

#+BEGIN_SRC clojure
(in-ns 'user)
#+END_SRC

#+RESULTS:
: #namespace[user]

#+BEGIN_SRC clojure
(defn def-arg [name & {:my-string "Fuckall"}] (str "hey" my-string name))


#+END_SRC

#+RESULTS:
: #'user/def-arg

#+BEGIN_SRC clojure
(def-arg "bill")
#+END_SRC

#+RESULTS:
: heybill

#+BEGIN_SRC clojure
(defn def-arg [name & {:keys [my-string] :or {my-string "fuckall "}}] (str "hey " my-string name))


#+END_SRC

#+RESULTS:
: #'user/def-arg

#+BEGIN_SRC clojure
(def-arg "bill")
#+END_SRC

#+RESULTS:
: hey fuckall bill

#+BEGIN_SRC clojure :results output
(defn chord-listener1 [& {:keys [num-chord-types num-inversions midi-root ms] :or {num-chord-types 30 num-inversions 1 midi-root 60 ms 1500}}]
  "return a series of chords"
(for [inv (take num-chord-types chord-symbol-names) n (range num-inversions)]
  (let [chord-instance (sort (invert-chord (chord (+ midi-root (rand-int 12)) (first inv)) n))]
    (do 
        (println (str inv " ") chord-instance)
        (play-piano-chord chord-instance)
        (Thread/sleep ms)))))
#+END_SRC

#+RESULTS:

** 
#+BEGIN_SRC clojure
(invert-chord [0 1 2] 1)
#+END_SRC

#+RESULTS:
| 1 | 2 | 12 |

#+BEGIN_SRC clojure
(let [pcset [0 1 2]]
(for [n (range (count pcset))] [(invert-chord pcset n)]))
#+END_SRC

#+RESULTS:
| (0 1 2)   |
| (1 2 12)  |
| (2 12 13) |

#+BEGIN_SRC clojure
(let [pcset [0 1 2 3]]
(for [n (range (count pcset))] [(invert-chord (map #(+ 60 %) pcset) n)]))
#+END_SRC

#+RESULTS:
| (60 61 62 63) |
| (61 62 63 72) |
| (62 63 72 73) |
| (63 72 73 74) |

#+BEGIN_SRC clojure
(
#+END_SRC



** evaluate chord-listener1 in repl
#+BEGIN_SRC clojure
;; (chord-listener1)
;; (chord-listener1 :num-chord-types 5 :num-inversions 2)
#+END_SRC
#+BEGIN_SRC clojure
(stop)
#+END_SRC

* refactor include-setname
** Refactored version should:

- break out individual pieces of functionality
  - specifically, reconsider all the ways to generate the chord-events
    - current version uses "baked-in" approach that simply transposes
      some given pcset a number times specified when called
** chord events have been aggregated into sets in a variety of ways:

using sequence comprehension to generate various octave displacements
#+BEGIN_SRC clojure
(for [zero [0 12]
      one [1 13]
      three [3 15]]
       [zero one three])
#+END_SRC

#+RESULTS:
|  0 |  1 |  3 |
|  0 |  1 | 15 |
|  0 | 13 |  3 |
|  0 | 13 | 15 |
| 12 |  1 |  3 |
| 12 |  1 | 15 |
| 12 | 13 |  3 |
| 12 | 13 | 15 |

using a for loop to map various Tn over a some given set
#+BEGIN_SRC clojure
(for [n (range 12)] (map #(+ n %) [0 1 2]))
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 |
|  1 |  2 |  3 |
|  2 |  3 |  4 |
|  3 |  4 |  5 |
|  4 |  5 |  6 |
|  5 |  6 |  7 |
|  6 |  7 |  8 |
|  7 |  8 |  9 |
|  8 |  9 | 10 |
|  9 | 10 | 11 |
| 10 | 11 | 12 |
| 11 | 12 | 13 |

calling invert-chord over some given set
#+BEGIN_SRC clojure
(let [pcset [0 1 2 3]]
(for [n (range (count pcset))] (invert-chord (map #(+ 60 %) pcset) n)))
#+END_SRC

#+RESULTS:
| 60 | 61 | 62 | 63 |
| 61 | 62 | 63 | 72 |
| 62 | 63 | 72 | 73 |
| 63 | 72 | 73 | 74 |

** consider octave voicing templates
*** 3 octaves * 2-note voicing = 9 

#+BEGIN_SRC clojure
(for [a (range 0 3) b (range 0 3)] [a b])
#+END_SRC

#+RESULTS:
| 0 | 0 |
| 0 | 1 |
| 0 | 2 |
| 1 | 0 |
| 1 | 1 |
| 1 | 2 |
| 2 | 0 |
| 2 | 1 |
| 2 | 2 |

*** outline a four-octave range from G1 to F#4 (lowest line bass to highest line treble clef)
#+BEGIN_SRC clojure
(let [lowest (overtone.music.pitch/note :G1) highest (overtone.music.pitch/note :G5)] [highest lowest (- highest lowest)])
#+END_SRC

#+RESULTS:
| 79 | 31 | 48 |


|     0 |     1 |     2 |     3 |
|-------+-------+-------+-------|
| 31-42 | 43-54 | 55-66 | 67-78 |

#+BEGIN_SRC clojure
(play-piano-chord [
                   31
                   ;; 35
                   ;; 38
                   ;; 43
                   47
                   ;; 50
                   ;; 54
                   ;; 57
                   62
                   67
                   71
                   74
                   ;; 78
                   ;; 79

                   ])

#+END_SRC

#+RESULTS:
: nil

*** count number of octave-voicings for tri, tetra, penta, hexa
#+BEGIN_SRC clojure
(count (for [a (range 0 4) b (range 0 4) c (range 0 4)] [a b c]))
#+END_SRC

#+RESULTS:
: 64

#+BEGIN_SRC clojure
(count (for [a (range 0 4) b (range 0 4) c (range 0 4) d (range 0 4)] [a b c d]))
#+END_SRC

#+RESULTS:
: 256


#+BEGIN_SRC clojure
(count (for [a (range 0 4) b (range 0 4) c (range 0 4) d (range 0 4) e (range 0 4)] [a b c d e]))
#+END_SRC

#+RESULTS:
: 1024

#+BEGIN_SRC clojure
(count (for [a (range 0 4) b (range 0 4) c (range 0 4) d (range 0 4) e (range 0 4) f (range 0 4)] [a b c d e f]))
#+END_SRC

#+RESULTS:
: 4096

** octave displacement comprehensions
*** three octaves for three pcs--define templates
#+BEGIN_SRC clojure
(for [a (range 0 3) b (range 0 3) c (range 0 3)] [a b c])
#+END_SRC

#+RESULTS:
| 0 | 0 | 0 |
| 0 | 0 | 1 |
| 0 | 0 | 2 |
| 0 | 1 | 0 |
| 0 | 1 | 1 |
| 0 | 1 | 2 |
| 0 | 2 | 0 |
| 0 | 2 | 1 |
| 0 | 2 | 2 |
| 1 | 0 | 0 |
| 1 | 0 | 1 |
| 1 | 0 | 2 |
| 1 | 1 | 0 |
| 1 | 1 | 1 |
| 1 | 1 | 2 |
| 1 | 2 | 0 |
| 1 | 2 | 1 |
| 1 | 2 | 2 |
| 2 | 0 | 0 |
| 2 | 0 | 1 |
| 2 | 0 | 2 |
| 2 | 1 | 0 |
| 2 | 1 | 1 |
| 2 | 1 | 2 |
| 2 | 2 | 0 |
| 2 | 2 | 1 |
| 2 | 2 | 2 |

#+BEGIN_SRC clojure
(def templates (for [a (range 0 3) b (range 0 3) c (range 0 3)] [a b c]))
#+END_SRC

#+RESULTS:
: #'user/templates

#+BEGIN_SRC clojure
;; fails
(let [[a b c] [0 1 1]
      pcset [0 1 3]]
  (#(vec (+ (* a 12) %1)
         (+ (* b 12) %2)
         (+ (* c 12) %3)) pcset))
#+END_SRC

#+RESULTS:

*** destructure a map correctly!
#+BEGIN_SRC clojure
(for [x [0 1 2] ] (* x 10))
#+END_SRC

#+RESULTS:
| 0 | 10 | 20 |

#+BEGIN_SRC clojure
(for [[x y z] [[0 1 2]] ] [(* x 10) (* y 10) (* z 10)])
#+END_SRC

#+RESULTS:
| 0 | 10 | 20 |

#+BEGIN_SRC clojure
(let [[a b c] [0 1 1]]
(for [[x y z] [[0 1 2]]] [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))]))
#+END_SRC

#+RESULTS:
| 0 | 13 | 14 |

#+BEGIN_SRC clojure
(for [[a b c] [[0 0 0] [1 1 1]]]
  (for [[x y z] [[0 1 2]]]
    [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))]))
#+END_SRC

#+RESULTS:
| (0 1 2)    |
| (12 13 14) |

*** use templates and nested 'for' comprehension to destructure
#+BEGIN_SRC clojure
(for [[a b c] templates]
  (for [[x y z] [[0 1 2]]]
    [[a b c] [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))]]))
#+END_SRC

#+RESULTS:
| ((0 0 0) (0 1 2))    |
| ((0 0 1) (0 1 14))   |
| ((0 0 2) (0 1 26))   |
| ((0 1 0) (0 13 2))   |
| ((0 1 1) (0 13 14))  |
| ((0 1 2) (0 13 26))  |
| ((0 2 0) (0 25 2))   |
| ((0 2 1) (0 25 14))  |
| ((0 2 2) (0 25 26))  |
| ((1 0 0) (12 1 2))   |
| ((1 0 1) (12 1 14))  |
| ((1 0 2) (12 1 26))  |
| ((1 1 0) (12 13 2))  |
| ((1 1 1) (12 13 14)) |
| ((1 1 2) (12 13 26)) |
| ((1 2 0) (12 25 2))  |
| ((1 2 1) (12 25 14)) |
| ((1 2 2) (12 25 26)) |
| ((2 0 0) (24 1 2))   |
| ((2 0 1) (24 1 14))  |
| ((2 0 2) (24 1 26))  |
| ((2 1 0) (24 13 2))  |
| ((2 1 1) (24 13 14)) |
| ((2 1 2) (24 13 26)) |
| ((2 2 0) (24 25 2))  |
| ((2 2 1) (24 25 14)) |
| ((2 2 2) (24 25 26)) |

#+BEGIN_SRC clojure
trichords
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 0 | 1 | 3 |
| 0 | 1 | 4 |
| 0 | 1 | 5 |
| 0 | 1 | 6 |
| 0 | 2 | 4 |
| 0 | 2 | 5 |
| 0 | 2 | 6 |
| 0 | 2 | 7 |
| 0 | 3 | 6 |
| 0 | 3 | 7 |
| 0 | 4 | 8 |

*** see all trichords with all templates
#+BEGIN_SRC clojure
(for [[a b c] templates]
  (for [[x y z] trichords]
    [[a b c] [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))]]))
#+END_SRC

#+RESULTS:
| ((0 0 0) (0 1 2))    | ((0 0 0) (0 1 3))    | ((0 0 0) (0 1 4))    | ((0 0 0) (0 1 5))    | ((0 0 0) (0 1 6))    | ((0 0 0) (0 2 4))    | ((0 0 0) (0 2 5))    | ((0 0 0) (0 2 6))    | ((0 0 0) (0 2 7))    | ((0 0 0) (0 3 6))    | ((0 0 0) (0 3 7))    | ((0 0 0) (0 4 8))    |
| ((0 0 1) (0 1 14))   | ((0 0 1) (0 1 15))   | ((0 0 1) (0 1 16))   | ((0 0 1) (0 1 17))   | ((0 0 1) (0 1 18))   | ((0 0 1) (0 2 16))   | ((0 0 1) (0 2 17))   | ((0 0 1) (0 2 18))   | ((0 0 1) (0 2 19))   | ((0 0 1) (0 3 18))   | ((0 0 1) (0 3 19))   | ((0 0 1) (0 4 20))   |
| ((0 0 2) (0 1 26))   | ((0 0 2) (0 1 27))   | ((0 0 2) (0 1 28))   | ((0 0 2) (0 1 29))   | ((0 0 2) (0 1 30))   | ((0 0 2) (0 2 28))   | ((0 0 2) (0 2 29))   | ((0 0 2) (0 2 30))   | ((0 0 2) (0 2 31))   | ((0 0 2) (0 3 30))   | ((0 0 2) (0 3 31))   | ((0 0 2) (0 4 32))   |
| ((0 1 0) (0 13 2))   | ((0 1 0) (0 13 3))   | ((0 1 0) (0 13 4))   | ((0 1 0) (0 13 5))   | ((0 1 0) (0 13 6))   | ((0 1 0) (0 14 4))   | ((0 1 0) (0 14 5))   | ((0 1 0) (0 14 6))   | ((0 1 0) (0 14 7))   | ((0 1 0) (0 15 6))   | ((0 1 0) (0 15 7))   | ((0 1 0) (0 16 8))   |
| ((0 1 1) (0 13 14))  | ((0 1 1) (0 13 15))  | ((0 1 1) (0 13 16))  | ((0 1 1) (0 13 17))  | ((0 1 1) (0 13 18))  | ((0 1 1) (0 14 16))  | ((0 1 1) (0 14 17))  | ((0 1 1) (0 14 18))  | ((0 1 1) (0 14 19))  | ((0 1 1) (0 15 18))  | ((0 1 1) (0 15 19))  | ((0 1 1) (0 16 20))  |
| ((0 1 2) (0 13 26))  | ((0 1 2) (0 13 27))  | ((0 1 2) (0 13 28))  | ((0 1 2) (0 13 29))  | ((0 1 2) (0 13 30))  | ((0 1 2) (0 14 28))  | ((0 1 2) (0 14 29))  | ((0 1 2) (0 14 30))  | ((0 1 2) (0 14 31))  | ((0 1 2) (0 15 30))  | ((0 1 2) (0 15 31))  | ((0 1 2) (0 16 32))  |
| ((0 2 0) (0 25 2))   | ((0 2 0) (0 25 3))   | ((0 2 0) (0 25 4))   | ((0 2 0) (0 25 5))   | ((0 2 0) (0 25 6))   | ((0 2 0) (0 26 4))   | ((0 2 0) (0 26 5))   | ((0 2 0) (0 26 6))   | ((0 2 0) (0 26 7))   | ((0 2 0) (0 27 6))   | ((0 2 0) (0 27 7))   | ((0 2 0) (0 28 8))   |
| ((0 2 1) (0 25 14))  | ((0 2 1) (0 25 15))  | ((0 2 1) (0 25 16))  | ((0 2 1) (0 25 17))  | ((0 2 1) (0 25 18))  | ((0 2 1) (0 26 16))  | ((0 2 1) (0 26 17))  | ((0 2 1) (0 26 18))  | ((0 2 1) (0 26 19))  | ((0 2 1) (0 27 18))  | ((0 2 1) (0 27 19))  | ((0 2 1) (0 28 20))  |
| ((0 2 2) (0 25 26))  | ((0 2 2) (0 25 27))  | ((0 2 2) (0 25 28))  | ((0 2 2) (0 25 29))  | ((0 2 2) (0 25 30))  | ((0 2 2) (0 26 28))  | ((0 2 2) (0 26 29))  | ((0 2 2) (0 26 30))  | ((0 2 2) (0 26 31))  | ((0 2 2) (0 27 30))  | ((0 2 2) (0 27 31))  | ((0 2 2) (0 28 32))  |
| ((1 0 0) (12 1 2))   | ((1 0 0) (12 1 3))   | ((1 0 0) (12 1 4))   | ((1 0 0) (12 1 5))   | ((1 0 0) (12 1 6))   | ((1 0 0) (12 2 4))   | ((1 0 0) (12 2 5))   | ((1 0 0) (12 2 6))   | ((1 0 0) (12 2 7))   | ((1 0 0) (12 3 6))   | ((1 0 0) (12 3 7))   | ((1 0 0) (12 4 8))   |
| ((1 0 1) (12 1 14))  | ((1 0 1) (12 1 15))  | ((1 0 1) (12 1 16))  | ((1 0 1) (12 1 17))  | ((1 0 1) (12 1 18))  | ((1 0 1) (12 2 16))  | ((1 0 1) (12 2 17))  | ((1 0 1) (12 2 18))  | ((1 0 1) (12 2 19))  | ((1 0 1) (12 3 18))  | ((1 0 1) (12 3 19))  | ((1 0 1) (12 4 20))  |
| ((1 0 2) (12 1 26))  | ((1 0 2) (12 1 27))  | ((1 0 2) (12 1 28))  | ((1 0 2) (12 1 29))  | ((1 0 2) (12 1 30))  | ((1 0 2) (12 2 28))  | ((1 0 2) (12 2 29))  | ((1 0 2) (12 2 30))  | ((1 0 2) (12 2 31))  | ((1 0 2) (12 3 30))  | ((1 0 2) (12 3 31))  | ((1 0 2) (12 4 32))  |
| ((1 1 0) (12 13 2))  | ((1 1 0) (12 13 3))  | ((1 1 0) (12 13 4))  | ((1 1 0) (12 13 5))  | ((1 1 0) (12 13 6))  | ((1 1 0) (12 14 4))  | ((1 1 0) (12 14 5))  | ((1 1 0) (12 14 6))  | ((1 1 0) (12 14 7))  | ((1 1 0) (12 15 6))  | ((1 1 0) (12 15 7))  | ((1 1 0) (12 16 8))  |
| ((1 1 1) (12 13 14)) | ((1 1 1) (12 13 15)) | ((1 1 1) (12 13 16)) | ((1 1 1) (12 13 17)) | ((1 1 1) (12 13 18)) | ((1 1 1) (12 14 16)) | ((1 1 1) (12 14 17)) | ((1 1 1) (12 14 18)) | ((1 1 1) (12 14 19)) | ((1 1 1) (12 15 18)) | ((1 1 1) (12 15 19)) | ((1 1 1) (12 16 20)) |
| ((1 1 2) (12 13 26)) | ((1 1 2) (12 13 27)) | ((1 1 2) (12 13 28)) | ((1 1 2) (12 13 29)) | ((1 1 2) (12 13 30)) | ((1 1 2) (12 14 28)) | ((1 1 2) (12 14 29)) | ((1 1 2) (12 14 30)) | ((1 1 2) (12 14 31)) | ((1 1 2) (12 15 30)) | ((1 1 2) (12 15 31)) | ((1 1 2) (12 16 32)) |
| ((1 2 0) (12 25 2))  | ((1 2 0) (12 25 3))  | ((1 2 0) (12 25 4))  | ((1 2 0) (12 25 5))  | ((1 2 0) (12 25 6))  | ((1 2 0) (12 26 4))  | ((1 2 0) (12 26 5))  | ((1 2 0) (12 26 6))  | ((1 2 0) (12 26 7))  | ((1 2 0) (12 27 6))  | ((1 2 0) (12 27 7))  | ((1 2 0) (12 28 8))  |
| ((1 2 1) (12 25 14)) | ((1 2 1) (12 25 15)) | ((1 2 1) (12 25 16)) | ((1 2 1) (12 25 17)) | ((1 2 1) (12 25 18)) | ((1 2 1) (12 26 16)) | ((1 2 1) (12 26 17)) | ((1 2 1) (12 26 18)) | ((1 2 1) (12 26 19)) | ((1 2 1) (12 27 18)) | ((1 2 1) (12 27 19)) | ((1 2 1) (12 28 20)) |
| ((1 2 2) (12 25 26)) | ((1 2 2) (12 25 27)) | ((1 2 2) (12 25 28)) | ((1 2 2) (12 25 29)) | ((1 2 2) (12 25 30)) | ((1 2 2) (12 26 28)) | ((1 2 2) (12 26 29)) | ((1 2 2) (12 26 30)) | ((1 2 2) (12 26 31)) | ((1 2 2) (12 27 30)) | ((1 2 2) (12 27 31)) | ((1 2 2) (12 28 32)) |
| ((2 0 0) (24 1 2))   | ((2 0 0) (24 1 3))   | ((2 0 0) (24 1 4))   | ((2 0 0) (24 1 5))   | ((2 0 0) (24 1 6))   | ((2 0 0) (24 2 4))   | ((2 0 0) (24 2 5))   | ((2 0 0) (24 2 6))   | ((2 0 0) (24 2 7))   | ((2 0 0) (24 3 6))   | ((2 0 0) (24 3 7))   | ((2 0 0) (24 4 8))   |
| ((2 0 1) (24 1 14))  | ((2 0 1) (24 1 15))  | ((2 0 1) (24 1 16))  | ((2 0 1) (24 1 17))  | ((2 0 1) (24 1 18))  | ((2 0 1) (24 2 16))  | ((2 0 1) (24 2 17))  | ((2 0 1) (24 2 18))  | ((2 0 1) (24 2 19))  | ((2 0 1) (24 3 18))  | ((2 0 1) (24 3 19))  | ((2 0 1) (24 4 20))  |
| ((2 0 2) (24 1 26))  | ((2 0 2) (24 1 27))  | ((2 0 2) (24 1 28))  | ((2 0 2) (24 1 29))  | ((2 0 2) (24 1 30))  | ((2 0 2) (24 2 28))  | ((2 0 2) (24 2 29))  | ((2 0 2) (24 2 30))  | ((2 0 2) (24 2 31))  | ((2 0 2) (24 3 30))  | ((2 0 2) (24 3 31))  | ((2 0 2) (24 4 32))  |
| ((2 1 0) (24 13 2))  | ((2 1 0) (24 13 3))  | ((2 1 0) (24 13 4))  | ((2 1 0) (24 13 5))  | ((2 1 0) (24 13 6))  | ((2 1 0) (24 14 4))  | ((2 1 0) (24 14 5))  | ((2 1 0) (24 14 6))  | ((2 1 0) (24 14 7))  | ((2 1 0) (24 15 6))  | ((2 1 0) (24 15 7))  | ((2 1 0) (24 16 8))  |
| ((2 1 1) (24 13 14)) | ((2 1 1) (24 13 15)) | ((2 1 1) (24 13 16)) | ((2 1 1) (24 13 17)) | ((2 1 1) (24 13 18)) | ((2 1 1) (24 14 16)) | ((2 1 1) (24 14 17)) | ((2 1 1) (24 14 18)) | ((2 1 1) (24 14 19)) | ((2 1 1) (24 15 18)) | ((2 1 1) (24 15 19)) | ((2 1 1) (24 16 20)) |
| ((2 1 2) (24 13 26)) | ((2 1 2) (24 13 27)) | ((2 1 2) (24 13 28)) | ((2 1 2) (24 13 29)) | ((2 1 2) (24 13 30)) | ((2 1 2) (24 14 28)) | ((2 1 2) (24 14 29)) | ((2 1 2) (24 14 30)) | ((2 1 2) (24 14 31)) | ((2 1 2) (24 15 30)) | ((2 1 2) (24 15 31)) | ((2 1 2) (24 16 32)) |
| ((2 2 0) (24 25 2))  | ((2 2 0) (24 25 3))  | ((2 2 0) (24 25 4))  | ((2 2 0) (24 25 5))  | ((2 2 0) (24 25 6))  | ((2 2 0) (24 26 4))  | ((2 2 0) (24 26 5))  | ((2 2 0) (24 26 6))  | ((2 2 0) (24 26 7))  | ((2 2 0) (24 27 6))  | ((2 2 0) (24 27 7))  | ((2 2 0) (24 28 8))  |
| ((2 2 1) (24 25 14)) | ((2 2 1) (24 25 15)) | ((2 2 1) (24 25 16)) | ((2 2 1) (24 25 17)) | ((2 2 1) (24 25 18)) | ((2 2 1) (24 26 16)) | ((2 2 1) (24 26 17)) | ((2 2 1) (24 26 18)) | ((2 2 1) (24 26 19)) | ((2 2 1) (24 27 18)) | ((2 2 1) (24 27 19)) | ((2 2 1) (24 28 20)) |
| ((2 2 2) (24 25 26)) | ((2 2 2) (24 25 27)) | ((2 2 2) (24 25 28)) | ((2 2 2) (24 25 29)) | ((2 2 2) (24 25 30)) | ((2 2 2) (24 26 28)) | ((2 2 2) (24 26 29)) | ((2 2 2) (24 26 30)) | ((2 2 2) (24 26 31)) | ((2 2 2) (24 27 30)) | ((2 2 2) (24 27 31)) | ((2 2 2) (24 28 32)) |

*** 
#+BEGIN_SRC clojure
(for [[a b c] templates]
  (for [[x y z] trichords]
    (sort [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))])))
#+END_SRC

#+RESULTS:
| (0 1 2)    | (0 1 3)    | (0 1 4)    | (0 1 5)    | (0 1 6)    | (0 2 4)    | (0 2 5)    | (0 2 6)    | (0 2 7)    | (0 3 6)    | (0 3 7)    | (0 4 8)    |
| (0 1 14)   | (0 1 15)   | (0 1 16)   | (0 1 17)   | (0 1 18)   | (0 2 16)   | (0 2 17)   | (0 2 18)   | (0 2 19)   | (0 3 18)   | (0 3 19)   | (0 4 20)   |
| (0 1 26)   | (0 1 27)   | (0 1 28)   | (0 1 29)   | (0 1 30)   | (0 2 28)   | (0 2 29)   | (0 2 30)   | (0 2 31)   | (0 3 30)   | (0 3 31)   | (0 4 32)   |
| (0 2 13)   | (0 3 13)   | (0 4 13)   | (0 5 13)   | (0 6 13)   | (0 4 14)   | (0 5 14)   | (0 6 14)   | (0 7 14)   | (0 6 15)   | (0 7 15)   | (0 8 16)   |
| (0 13 14)  | (0 13 15)  | (0 13 16)  | (0 13 17)  | (0 13 18)  | (0 14 16)  | (0 14 17)  | (0 14 18)  | (0 14 19)  | (0 15 18)  | (0 15 19)  | (0 16 20)  |
| (0 13 26)  | (0 13 27)  | (0 13 28)  | (0 13 29)  | (0 13 30)  | (0 14 28)  | (0 14 29)  | (0 14 30)  | (0 14 31)  | (0 15 30)  | (0 15 31)  | (0 16 32)  |
| (0 2 25)   | (0 3 25)   | (0 4 25)   | (0 5 25)   | (0 6 25)   | (0 4 26)   | (0 5 26)   | (0 6 26)   | (0 7 26)   | (0 6 27)   | (0 7 27)   | (0 8 28)   |
| (0 14 25)  | (0 15 25)  | (0 16 25)  | (0 17 25)  | (0 18 25)  | (0 16 26)  | (0 17 26)  | (0 18 26)  | (0 19 26)  | (0 18 27)  | (0 19 27)  | (0 20 28)  |
| (0 25 26)  | (0 25 27)  | (0 25 28)  | (0 25 29)  | (0 25 30)  | (0 26 28)  | (0 26 29)  | (0 26 30)  | (0 26 31)  | (0 27 30)  | (0 27 31)  | (0 28 32)  |
| (1 2 12)   | (1 3 12)   | (1 4 12)   | (1 5 12)   | (1 6 12)   | (2 4 12)   | (2 5 12)   | (2 6 12)   | (2 7 12)   | (3 6 12)   | (3 7 12)   | (4 8 12)   |
| (1 12 14)  | (1 12 15)  | (1 12 16)  | (1 12 17)  | (1 12 18)  | (2 12 16)  | (2 12 17)  | (2 12 18)  | (2 12 19)  | (3 12 18)  | (3 12 19)  | (4 12 20)  |
| (1 12 26)  | (1 12 27)  | (1 12 28)  | (1 12 29)  | (1 12 30)  | (2 12 28)  | (2 12 29)  | (2 12 30)  | (2 12 31)  | (3 12 30)  | (3 12 31)  | (4 12 32)  |
| (2 12 13)  | (3 12 13)  | (4 12 13)  | (5 12 13)  | (6 12 13)  | (4 12 14)  | (5 12 14)  | (6 12 14)  | (7 12 14)  | (6 12 15)  | (7 12 15)  | (8 12 16)  |
| (12 13 14) | (12 13 15) | (12 13 16) | (12 13 17) | (12 13 18) | (12 14 16) | (12 14 17) | (12 14 18) | (12 14 19) | (12 15 18) | (12 15 19) | (12 16 20) |
| (12 13 26) | (12 13 27) | (12 13 28) | (12 13 29) | (12 13 30) | (12 14 28) | (12 14 29) | (12 14 30) | (12 14 31) | (12 15 30) | (12 15 31) | (12 16 32) |
| (2 12 25)  | (3 12 25)  | (4 12 25)  | (5 12 25)  | (6 12 25)  | (4 12 26)  | (5 12 26)  | (6 12 26)  | (7 12 26)  | (6 12 27)  | (7 12 27)  | (8 12 28)  |
| (12 14 25) | (12 15 25) | (12 16 25) | (12 17 25) | (12 18 25) | (12 16 26) | (12 17 26) | (12 18 26) | (12 19 26) | (12 18 27) | (12 19 27) | (12 20 28) |
| (12 25 26) | (12 25 27) | (12 25 28) | (12 25 29) | (12 25 30) | (12 26 28) | (12 26 29) | (12 26 30) | (12 26 31) | (12 27 30) | (12 27 31) | (12 28 32) |
| (1 2 24)   | (1 3 24)   | (1 4 24)   | (1 5 24)   | (1 6 24)   | (2 4 24)   | (2 5 24)   | (2 6 24)   | (2 7 24)   | (3 6 24)   | (3 7 24)   | (4 8 24)   |
| (1 14 24)  | (1 15 24)  | (1 16 24)  | (1 17 24)  | (1 18 24)  | (2 16 24)  | (2 17 24)  | (2 18 24)  | (2 19 24)  | (3 18 24)  | (3 19 24)  | (4 20 24)  |
| (1 24 26)  | (1 24 27)  | (1 24 28)  | (1 24 29)  | (1 24 30)  | (2 24 28)  | (2 24 29)  | (2 24 30)  | (2 24 31)  | (3 24 30)  | (3 24 31)  | (4 24 32)  |
| (2 13 24)  | (3 13 24)  | (4 13 24)  | (5 13 24)  | (6 13 24)  | (4 14 24)  | (5 14 24)  | (6 14 24)  | (7 14 24)  | (6 15 24)  | (7 15 24)  | (8 16 24)  |
| (13 14 24) | (13 15 24) | (13 16 24) | (13 17 24) | (13 18 24) | (14 16 24) | (14 17 24) | (14 18 24) | (14 19 24) | (15 18 24) | (15 19 24) | (16 20 24) |
| (13 24 26) | (13 24 27) | (13 24 28) | (13 24 29) | (13 24 30) | (14 24 28) | (14 24 29) | (14 24 30) | (14 24 31) | (15 24 30) | (15 24 31) | (16 24 32) |
| (2 24 25)  | (3 24 25)  | (4 24 25)  | (5 24 25)  | (6 24 25)  | (4 24 26)  | (5 24 26)  | (6 24 26)  | (7 24 26)  | (6 24 27)  | (7 24 27)  | (8 24 28)  |
| (14 24 25) | (15 24 25) | (16 24 25) | (17 24 25) | (18 24 25) | (16 24 26) | (17 24 26) | (18 24 26) | (19 24 26) | (18 24 27) | (19 24 27) | (20 24 28) |
| (24 25 26) | (24 25 27) | (24 25 28) | (24 25 29) | (24 25 30) | (24 26 28) | (24 26 29) | (24 26 30) | (24 26 31) | (24 27 30) | (24 27 31) | (24 28 32) |

#+BEGIN_SRC clojure
(for [[a b c] templates]
  (for [[x y z] [[0 1 2]]]
    (sort [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))])))
#+END_SRC

#+RESULTS:
| (0 1 2)    |
| (0 1 14)   |
| (0 1 26)   |
| (0 2 13)   |
| (0 13 14)  |
| (0 13 26)  |
| (0 2 25)   |
| (0 14 25)  |
| (0 25 26)  |
| (1 2 12)   |
| (1 12 14)  |
| (1 12 26)  |
| (2 12 13)  |
| (12 13 14) |
| (12 13 26) |
| (2 12 25)  |
| (12 14 25) |
| (12 25 26) |
| (1 2 24)   |
| (1 14 24)  |
| (1 24 26)  |
| (2 13 24)  |
| (13 14 24) |
| (13 24 26) |
| (2 24 25)  |
| (14 24 25) |
| (24 25 26) |

#+BEGIN_SRC clojure
(partition 3 (flatten (for [[a b c] templates]
  (for [[x y z] [[0 1 2]]]
    (sort [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))])))))
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 |
|  0 |  1 | 14 |
|  0 |  1 | 26 |
|  0 |  2 | 13 |
|  0 | 13 | 14 |
|  0 | 13 | 26 |
|  0 |  2 | 25 |
|  0 | 14 | 25 |
|  0 | 25 | 26 |
|  1 |  2 | 12 |
|  1 | 12 | 14 |
|  1 | 12 | 26 |
|  2 | 12 | 13 |
| 12 | 13 | 14 |
| 12 | 13 | 26 |
|  2 | 12 | 25 |
| 12 | 14 | 25 |
| 12 | 25 | 26 |
|  1 |  2 | 24 |
|  1 | 14 | 24 |
|  1 | 24 | 26 |
|  2 | 13 | 24 |
| 13 | 14 | 24 |
| 13 | 24 | 26 |
|  2 | 24 | 25 |
| 14 | 24 | 25 |
| 24 | 25 | 26 |

#+BEGIN_SRC clojure
(let [all (map (fn [pcset] (#(mod12 %) pcset)) (partition 3 (flatten (for [[a b c] templates]
  (for [[x y z] [[0 1 2]]]
    (sort [(+ x (* a 12)) (+ y (* b 12)) (+ z (* c 12))]))))))
      count-all (count all)
      distinct (distinct all)
      count-distinct (count distinct)] [count-all all distinct count-distinct])
      
#+END_SRC

#+RESULTS:
| 27 | ((0 1 2) (0 1 2) (0 1 2) (0 2 1) (0 1 2) (0 1 2) (0 2 1) (0 2 1) (0 1 2) (1 2 0) (1 0 2) (1 0 2) (2 0 1) (0 1 2) (0 1 2) (2 0 1) (0 2 1) (0 1 2) (1 2 0) (1 2 0) (1 0 2) (2 1 0) (1 2 0) (1 0 2) (2 0 1) (2 0 1) (0 1 2)) | ((0 1 2) (0 2 1) (1 2 0) (1 0 2) (2 0 1) (2 1 0)) | 6 |

#+BEGIN_SRC clojure

#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 1 | 2 | 0 |

