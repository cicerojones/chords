* follow Heroku tutorial
** preliminaries
** with a repl started
*** "resolve" the jdbc namespace
#+BEGIN_SRC clojure
(require '[clojure.java.jdbc :as sql])
#+END_SRC

#+RESULTS:
: nil
*** load data from a local file
#+BEGIN_SRC clojure
(load "data/set_class_data")
;; (first *tetrachords*) ;(0 1 2 3)
;; (first post_tonal_overtone.data.set_class_data/tetrachords-tn)
#+END_SRC
** load data from babel
*** test dyads
#+BEGIN_SRC clojure
(def ^:const dyads-tn '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))
#+END_SRC

#+BEGIN_SRC clojure
(rand-nth dyads-tn)
#+END_SRC
#+RESULTS:
| 0 | 2 |
*** load all sets
#+BEGIN_SRC clojure
;(def ^:const dyads-tn '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))

(def ^:const trichords-tn '((0 1 2) (0 1 3) (0 2 3) (0 1 4) (0 3 4) (0 1 5) (0 4 5) (0 1 6) (0 5 6) (0 2 4) (0 2 5) (0 3 5) (0 2 6) (0 4 6) (0 2 7) (0 3 6) (0 3 7) (0 4 7) (0 4 8)))

(def ^:const tetrachords-tn '((0 1 2 3)
			   (0 1 2 4)
			   (0 2 3 4)
			   (0 1 3 4)
			   (0 1 2 5)
			   (0 3 4 5)
			   (0 1 2 6)
			   (0 4 5 6)
			   (0 1 2 7)
			   (0 1 4 5)
			   (0 1 5 6)
			   (0 1 6 7)
			   (0 2 3 5)
			   (0 1 3 5)
			   (0 2 4 5)
			   (0 2 3 6)
			   (0 3 4 6)
			   (0 1 3 6)
			   (0 3 5 6)
			   (0 2 3 7)
			   (0 4 5 7)
			   (0 1 4 6)
			   (0 2 5 6)
			   (0 1 5 7)
			   (0 2 6 7)
			   (0 3 4 7)
			   (0 1 4 7)
			   (0 3 6 7)
			   (0 1 4 8)
			   (0 3 4 8)
			   (0 1 5 8)
			   (0 2 4 6)
			   (0 2 4 7)
			   (0 3 5 7)
			   (0 2 5 7)
			   (0 2 4 8)
			   (0 2 6 8)
			   (0 3 5 8)
			   (0 2 5 8)
			   (0 3 6 8)
			   (0 3 6 9)
			   (0 1 3 7)
			   (0 4 6 7)))

(def ^:const pentachords-tn '((0 1 2 3 4)
			   (0 1 2 3 5)
			   (0 2 3 4 5)
			   (0 1 2 4 5)
			   (0 1 3 4 5)
			   (0 1 2 3 6)
			   (0 3 4 5 6)
			   (0 1 2 3 7)
			   (0 4 5 6 7)
			   (0 1 2 5 6)
			   (0 1 4 5 6)
			   (0 1 2 6 7)
			   (0 1 5 6 7)
			   (0 2 3 4 6)
			   (0 1 2 4 6)
			   (0 2 4 5 6)
			   (0 1 3 4 6)
			   (0 2 3 5 6)
			   (0 2 3 4 7)
			   (0 3 4 5 7)
			   (0 1 3 5 6)
			   (0 1 2 4 8)
			   (0 2 3 4 8)
			   (0 1 2 5 7)
			   (0 2 5 6 7)
			   (0 1 2 6 8)
			   (0 1 3 4 7)
			   (0 3 4 6 7)
			   (0 1 3 4 8)
			   (0 1 4 5 7)
			   (0 2 3 6 7)
			   (0 1 3 6 7)
			   (0 1 4 6 7)
			   (0 1 3 7 8)
			   (0 1 5 7 8)
			   (0 1 4 5 8)
			   (0 3 4 7 8)
			   (0 1 4 7 8)
			   (0 2 3 5 7)
			   (0 2 4 5 7)
			   (0 1 3 5 7)
			   (0 2 4 6 7)
			   (0 2 3 5 8)
			   (0 3 5 6 8)
			   (0 2 4 5 8)
			   (0 3 4 6 8)
			   (0 1 3 5 8)
			   (0 3 5 7 8)
			   (0 2 3 6 8)
			   (0 2 5 6 8)
			   (0 1 3 6 8)
			   (0 2 5 7 8)
			   (0 1 4 6 8)
			   (0 2 4 7 8)
			   (0 1 3 6 9)
			   (0 2 3 6 9)
			   (0 1 4 6 9)
			   (0 1 4 7 9)
			   (0 2 4 6 8)
			   (0 2 4 6 9)
			   (0 2 4 7 9)
			   (0 1 2 4 7)
			   (0 3 5 6 7)
			   (0 3 4 5 8)
			   (0 1 2 5 8)
			   (0 3 6 7 8)))

(def ^:const hexachords-tn '((0 1 2 3 4 5)
			  (0 1 2 3 4 6)
			  (0 2 3 4 5 6)
			  (0 1 2 3 5 6)
			  (0 1 3 4 5 6)
			  (0 1 2 4 5 6)
			  (0 1 2 3 6 7)
			  (0 1 4 5 6 7)
			  (0 1 2 5 6 7)
			  (0 1 2 6 7 8)
			  (0 2 3 4 5 7)
			  (0 1 2 3 5 7)
			  (0 2 4 5 6 7)
			  (0 1 3 4 5 7)
			  (0 2 3 4 6 7)
			  (0 1 2 4 5 7)
			  (0 2 3 5 6 7)
			  (0 1 2 4 6 7)
			  (0 1 3 5 6 7)
			  (0 1 3 4 6 7)
			  (0 1 3 4 5 8)
			  (0 3 4 5 7 8)
			  (0 1 2 4 5 8)
			  (0 3 4 6 7 8)
			  (0 1 4 5 6 8)
			  (0 2 3 4 7 8)
			  (0 1 2 4 7 8)
			  (0 1 4 6 7 8)
			  (0 1 2 5 7 8)
			  (0 1 3 6 7 8)
			  (0 1 3 4 7 8)
			  (0 1 4 5 7 8)
			  (0 1 4 5 8 9)
			  (0 2 3 4 6 8)
			  (0 2 4 5 6 8)
			  (0 1 2 4 6 8)
			  (0 2 4 6 7 8)
			  (0 2 3 5 6 8)
			  (0 1 3 4 6 8)
			  (0 2 4 5 7 8)
			  (0 1 3 5 6 8)
			  (0 2 3 5 7 8)
			  (0 1 3 5 7 8)
			  (0 1 3 4 6 9)
			  (0 2 3 5 6 9)
			  (0 1 3 5 6 9)
			  (0 1 3 6 8 9)
			  (0 1 3 6 7 9)
			  (0 2 3 6 8 9)
			  (0 1 3 5 8 9)
			  (0 1 4 6 8 9)
			  (0 2 4 5 7 9)
			  (0 2 3 5 7 9)
			  (0 2 4 6 7 9)
			  (0 1 3 5 7 9)
			  (0 2 4 6 8 9)
			  (0 2 4 6 8 10)
			  (0 1 2 3 4 7)
			  (0 3 4 5 6 7)
			  (0 1 2 3 4 8)
			  (0 1 2 3 7 8)
			  (0 2 3 4 5 8)
			  (0 3 4 5 6 8)
			  (0 1 2 3 5 8)
			  (0 3 5 6 7 8)
			  (0 1 2 3 6 8)
			  (0 2 5 6 7 8)
			  (0 1 2 3 6 9)
			  (0 1 2 5 6 8)
			  (0 2 3 6 7 8)
			  (0 1 2 5 6 9)
			  (0 1 2 5 8 9)
			  (0 2 3 4 6 9)
			  (0 1 2 4 6 9)
			  (0 2 4 5 6 9)
			  (0 1 2 4 7 9)
			  (0 2 3 4 7 9)
			  (0 1 2 5 7 9)
			  (0 1 3 4 7 9)
			  (0 1 4 6 7 9)))

;TnI-types
(def ^:const dyads '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))

(def ^:const trichords '((0 1 2) (0 1 3) (0 1 4) (0 1 5) (0 1 6) (0 2 4) (0 2 5) (0 2 6) (0 2 7) (0 3 6) (0 3 7) (0 4 8)))

(def ^:const tetrachords '((0 1 2 3)
			(0 1 2 4)
			(0 1 3 4)
			(0 1 2 5)
			(0 1 2 6)
			(0 1 2 7)
			(0 1 4 5)
			(0 1 5 6)
			(0 1 6 7)
			(0 2 3 5)
			(0 1 3 5)
			(0 2 3 6)
			(0 1 3 6)
			(0 2 3 7)
			(0 1 3 7)
			(0 1 4 6)
			(0 1 5 7)
			(0 3 4 7)
			(0 1 4 7)
			(0 1 4 8)
			(0 1 5 8)
			(0 2 4 6)
			(0 2 4 7)
			(0 2 5 7)
			(0 2 4 8)
			(0 2 6 8)
			(0 3 5 8)
			(0 2 5 8)
			(0 3 6 9)))

(def ^:const pentachords '((0 1 2 3 4)
			(0 1 2 3 5)
			(0 1 2 4 5)
			(0 1 2 3 6)
			(0 1 2 3 7)
			(0 1 2 5 6)
			(0 1 2 6 7)
			(0 2 3 4 6)
			(0 1 2 4 6)
			(0 1 3 4 6)
			(0 2 3 4 7)
			(0 1 3 5 6)
			(0 1 2 4 8)
			(0 1 2 5 7)
			(0 1 2 6 8)
			(0 1 3 4 7)
			(0 1 3 4 8)
			(0 1 4 5 7)
			(0 1 3 6 7)
			(0 1 3 7 8)
			(0 1 4 5 8)
			(0 1 4 7 8)
			(0 2 3 5 7)
			(0 1 3 5 7)
			(0 2 3 5 8)
			(0 2 4 5 8)
			(0 1 3 5 8)
			(0 2 3 6 8)
			(0 1 3 6 8)
			(0 1 4 6 8)
			(0 1 3 6 9)
			(0 1 4 6 9)
			(0 2 4 6 8)
			(0 2 4 6 9)
			(0 2 4 7 9)
			(0 1 2 4 7)
			(0 3 4 5 8)
			(0 1 2 5 8)))

(def ^:const hexachords '((0 1 2 3 4 5)
		       (0 1 2 3 4 6)
		       (0 1 2 3 5 6)
		       (0 1 2 4 5 6)
		       (0 1 2 3 6 7)
		       (0 1 2 5 6 7)
		       (0 1 2 6 7 8)
		       (0 2 3 4 5 7)
		       (0 1 2 3 5 7)
		       (0 1 3 4 5 7)
		       (0 1 2 4 5 7)
		       (0 1 2 4 6 7)
		       (0 1 3 4 6 7)
		       (0 1 3 4 5 8)
		       (0 1 2 4 5 8)
		       (0 1 4 5 6 8)
		       (0 1 2 4 7 8)
		       (0 1 2 5 7 8)
		       (0 1 3 4 7 8)
		       (0 1 4 5 8 9)
		       (0 2 3 4 6 8)
		       (0 1 2 4 6 8)
		       (0 2 3 5 6 8)
		       (0 1 3 4 6 8)
		       (0 1 3 5 6 8)
		       (0 1 3 5 7 8)
		       (0 1 3 4 6 9)
		       (0 1 3 5 6 9)
		       (0 1 3 6 8 9)
		       (0 1 3 6 7 9)
		       (0 1 3 5 8 9)
		       (0 2 4 5 7 9)
		       (0 2 3 5 7 9)
		       (0 1 3 5 7 9)
		       (0 2 4 6 8 10)
		       (0 1 2 3 4 7)
		       (0 1 2 3 4 8)
		       (0 1 2 3 7 8)
		       (0 2 3 4 5 8)
		       (0 1 2 3 5 8)
		       (0 1 2 3 6 8)
		       (0 1 2 3 6 9)
		       (0 1 2 5 6 8)
		       (0 1 2 5 6 9)
		       (0 2 3 4 6 9)
		       (0 1 2 4 6 9)
		       (0 1 2 4 7 9)
		       (0 1 2 5 7 9)
		       (0 1 3 4 7 9)
		       (0 1 4 6 7 9)))

;; ((((0 4 7) (0 4 19) (0 4 31))
;;   ((0 16 7) (0 16 19) (0 16 31))
;;   ((0 28 7) (0 28 19) (0 28 31)))
;;  (((12 4 7) (12 4 19) (12 4 31))
;;   ((12 16 7) (12 16 19) (12 16 31))
;;   ((12 28 7) (12 28 19) (12 28 31)))
;;  (((24 4 7) (24 4 19) (24 4 31))
;;   ((24 16 7) (24 16 19) (24 16 31))
;;   ((24 28 7) (24 28 19) (24 28 31))))


;; ((((48 52 55) (48 52 67) (48 52 79))
;;   ((48 64 55) (48 64 67) (48 64 79))
;;   ((48 76 55) (48 76 67) (48 76 79)))
;;  (((60 52 55) (60 52 67) (60 52 79))
;;   ((60 64 55) (60 64 67) (60 64 79))
;;   ((60 76 55) (60 76 67) (60 76 79)))
;;  (((72 52 55) (72 52 67) (72 52 79))
;;   ((72 64 55) (72 64 67) (72 64 79))
;;   ((72 76 55) (72 76 67) (72 76 79))))

(def cmajtriads '((48 52 55) (48 52 67) (48 52 79) (48 64 55) (48 64 67) (48 64 79) (48 76 55) (48 76 67) (48 76 79) (60 52 55) (60 52 67) (60 52 79) (60 64 55) (60 64 67) (60 64 79) (60 76 55) (60 76 67) (60 76 79) (72 52 55) (72 52 67) (72 52 79) (72 64 55) (72 64 67) (72 64 79) (72 76 55) (72 76 67) (72 76 79)))

(def nested-transposed-tetrachords '(((11 12 13 14) (10 11 12 13) (9 10 11 12) (8 9 10 11) (7 8 9 10) (6 7 8 9) (5 6 7 8) (4 5 6 7) (3 4 5 6) (2 3 4 5) (1 2 3 4)) ((11 12 13 15) (10 11 12 14) (9 10 11 13) (8 9 10 12) (7 8 9 11) (6 7 8 10) (5 6 7 9) (4 5 6 8) (3 4 5 7) (2 3 4 6) (1 2 3 5)) ((11 12 14 15) (10 11 13 14) (9 10 12 13) (8 9 11 12) (7 8 10 11) (6 7 9 10) (5 6 8 9) (4 5 7 8) (3 4 6 7) (2 3 5 6) (1 2 4 5)) ((11 12 13 16) (10 11 12 15) (9 10 11 14) (8 9 10 13) (7 8 9 12) (6 7 8 11) (5 6 7 10) (4 5 6 9) (3 4 5 8) (2 3 4 7) (1 2 3 6)) ((11 12 13 17) (10 11 12 16) (9 10 11 15) (8 9 10 14) (7 8 9 13) (6 7 8 12) (5 6 7 11) (4 5 6 10) (3 4 5 9) (2 3 4 8) (1 2 3 7)) ((11 12 13 18) (10 11 12 17) (9 10 11 16) (8 9 10 15) (7 8 9 14) (6 7 8 13) (5 6 7 12) (4 5 6 11) (3 4 5 10) (2 3 4 9) (1 2 3 8)) ((11 12 15 16) (10 11 14 15) (9 10 13 14) (8 9 12 13) (7 8 11 12) (6 7 10 11) (5 6 9 10) (4 5 8 9) (3 4 7 8) (2 3 6 7) (1 2 5 6)) ((11 12 16 17) (10 11 15 16) (9 10 14 15) (8 9 13 14) (7 8 12 13) (6 7 11 12) (5 6 10 11) (4 5 9 10) (3 4 8 9) (2 3 7 8) (1 2 6 7)) ((11 12 17 18) (10 11 16 17) (9 10 15 16) (8 9 14 15) (7 8 13 14) (6 7 12 13) (5 6 11 12) (4 5 10 11) (3 4 9 10) (2 3 8 9) (1 2 7 8)) ((11 13 14 16) (10 12 13 15) (9 11 12 14) (8 10 11 13) (7 9 10 12) (6 8 9 11) (5 7 8 10) (4 6 7 9) (3 5 6 8) (2 4 5 7) (1 3 4 6)) ((11 12 14 16) (10 11 13 15) (9 10 12 14) (8 9 11 13) (7 8 10 12) (6 7 9 11) (5 6 8 10) (4 5 7 9) (3 4 6 8) (2 3 5 7) (1 2 4 6)) ((11 13 14 17) (10 12 13 16) (9 11 12 15) (8 10 11 14) (7 9 10 13) (6 8 9 12) (5 7 8 11) (4 6 7 10) (3 5 6 9) (2 4 5 8) (1 3 4 7)) ((11 12 14 17) (10 11 13 16) (9 10 12 15) (8 9 11 14) (7 8 10 13) (6 7 9 12) (5 6 8 11) (4 5 7 10) (3 4 6 9) (2 3 5 8) (1 2 4 7)) ((11 13 14 18) (10 12 13 17) (9 11 12 16) (8 10 11 15) (7 9 10 14) (6 8 9 13) (5 7 8 12) (4 6 7 11) (3 5 6 10) (2 4 5 9) (1 3 4 8)) ((11 12 14 18) (10 11 13 17) (9 10 12 16) (8 9 11 15) (7 8 10 14) (6 7 9 13) (5 6 8 12) (4 5 7 11) (3 4 6 10) (2 3 5 9) (1 2 4 8)) ((11 12 15 17) (10 11 14 16) (9 10 13 15) (8 9 12 14) (7 8 11 13) (6 7 10 12) (5 6 9 11) (4 5 8 10) (3 4 7 9) (2 3 6 8) (1 2 5 7)) ((11 12 16 18) (10 11 15 17) (9 10 14 16) (8 9 13 15) (7 8 12 14) (6 7 11 13) (5 6 10 12) (4 5 9 11) (3 4 8 10) (2 3 7 9) (1 2 6 8)) ((11 14 15 18) (10 13 14 17) (9 12 13 16) (8 11 12 15) (7 10 11 14) (6 9 10 13) (5 8 9 12) (4 7 8 11) (3 6 7 10) (2 5 6 9) (1 4 5 8)) ((11 12 15 18) (10 11 14 17) (9 10 13 16) (8 9 12 15) (7 8 11 14) (6 7 10 13) (5 6 9 12) (4 5 8 11) (3 4 7 10) (2 3 6 9) (1 2 5 8)) ((11 12 15 19) (10 11 14 18) (9 10 13 17) (8 9 12 16) (7 8 11 15) (6 7 10 14) (5 6 9 13) (4 5 8 12) (3 4 7 11) (2 3 6 10) (1 2 5 9)) ((11 12 16 19) (10 11 15 18) (9 10 14 17) (8 9 13 16) (7 8 12 15) (6 7 11 14) (5 6 10 13) (4 5 9 12) (3 4 8 11) (2 3 7 10) (1 2 6 9)) ((11 13 15 17) (10 12 14 16) (9 11 13 15) (8 10 12 14) (7 9 11 13) (6 8 10 12) (5 7 9 11) (4 6 8 10) (3 5 7 9) (2 4 6 8) (1 3 5 7)) ((11 13 15 18) (10 12 14 17) (9 11 13 16) (8 10 12 15) (7 9 11 14) (6 8 10 13) (5 7 9 12) (4 6 8 11) (3 5 7 10) (2 4 6 9) (1 3 5 8)) ((11 13 16 18) (10 12 15 17) (9 11 14 16) (8 10 13 15) (7 9 12 14) (6 8 11 13) (5 7 10 12) (4 6 9 11) (3 5 8 10) (2 4 7 9) (1 3 6 8)) ((11 13 15 19) (10 12 14 18) (9 11 13 17) (8 10 12 16) (7 9 11 15) (6 8 10 14) (5 7 9 13) (4 6 8 12) (3 5 7 11) (2 4 6 10) (1 3 5 9)) ((11 13 17 19) (10 12 16 18) (9 11 15 17) (8 10 14 16) (7 9 13 15) (6 8 12 14) (5 7 11 13) (4 6 10 12) (3 5 9 11) (2 4 8 10) (1 3 7 9)) ((11 14 16 19) (10 13 15 18) (9 12 14 17) (8 11 13 16) (7 10 12 15) (6 9 11 14) (5 8 10 13) (4 7 9 12) (3 6 8 11) (2 5 7 10) (1 4 6 9)) ((11 13 16 19) (10 12 15 18) (9 11 14 17) (8 10 13 16) (7 9 12 15) (6 8 11 14) (5 7 10 13) (4 6 9 12) (3 5 8 11) (2 4 7 10) (1 3 6 9)) ((11 14 17 20) (10 13 16 19) (9 12 15 18) (8 11 14 17) (7 10 13 16) (6 9 12 15) (5 8 11 14) (4 7 10 13) (3 6 9 12) (2 5 8 11) (1 4 7 10))))

#+END_SRC

#+RESULTS:
: #'user/trichords-tn#'user/tetrachords-tn#'user/pentachords-tn#'user/hexachords-tn#'user/dyads#'user/trichords#'user/tetrachords#'user/pentachords#'user/hexachords#'user/cmajtriads#'user/nested-transposed-tetrachords

#+BEGIN_SRC clojure
(rand-nth tetrachords-tn)
#+END_SRC

#+RESULTS:
| 0 | 2 | 4 | 7 |

** use overtone code (or anything not loaded by default)
*** what's "loaded"
#+BEGIN_SRC clojure :results output
(map println (loaded-libs))
#+END_SRC

#+BEGIN_SRC clojure 
(def classpat (System/getProperty "java.class.path"))
#+END_SRC
*** what's on the "classpath?"
#+BEGIN_SRC clojure 
(System/getProperty "java.class.path")
#+END_SRC

#+RESULTS:
: /Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/test:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/src:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/dev-resources:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/resources:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/target/classes:
/Users/a/.m2/repository/instaparse/instaparse/1.4.1/instaparse-1.4.1.jar:
/Users/a/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:
/Users/a/.m2/repository/org/tcrawley/dynapath/0.2.3/dynapath-0.2.3.jar:
/Users/a/.m2/repository/org/clojure/java.jdbc/0.5.0/java.jdbc-0.5.0.jar:
/Users/a/.m2/repository/overtone/scsynth-extras/3.5.7.0/scsynth-extras-3.5.7.0.jar:
/Users/a/.m2/repository/net/java/dev/jna/jna/3.4.0/jna-3.4.0.jar:
/Users/a/.m2/repository/overtone/at-at/1.2.0/at-at-1.2.0.jar:
/Users/a/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:
/Users/a/.m2/repository/overtone/byte-spec/0.3.1/byte-spec-0.3.1.jar:
/Users/a/.m2/repository/overtone/osc-clj/0.9.0/osc-clj-0.9.0.jar:
/Users/a/.m2/repository/overtone/libs.handlers/0.2.0/libs.handlers-0.2.0.jar:
/Users/a/.m2/repository/org/postgresql/postgresql/9.4-1201-jdbc41/postgresql-9.4-1201-jdbc41.jar:
/Users/a/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:
/Users/a/.m2/repository/overtone/scsynth/3.5.7.0/scsynth-3.5.7.0.jar:
/Users/a/.m2/repository/commons-net/commons-net/3.0.1/commons-net-3.0.1.jar:
/Users/a/.m2/repository/javax/jmdns/jmdns/3.4.1/jmdns-3.4.1.jar:
/Users/a/.m2/repository/cider/cider-nrepl/0.11.0-SNAPSHOT/cider-nrepl-0.11.0-SNAPSHOT.jar:
/Users/a/.m2/repository/yesql/yesql/0.5.2/yesql-0.5.2.jar:
/Users/a/.m2/repository/clj-glob/clj-glob/1.0.0/clj-glob-1.0.0.jar:
/Users/a/.m2/repository/overtone/overtone/0.9.1/overtone-0.9.1.jar:
/Users/a/.m2/repository/overtone/midi-clj/0.5.0/midi-clj-0.5.0.jar:
/Users/a/.m2/repository/org/clojure/data.json/0.2.3/data.json-0.2.3.jar:
/Users/a/.m2/repository/clj-native/clj-native/0.9.3/clj-native-0.9.3.jar
*** what's available in one of these namespaces
#+BEGIN_SRC clojure :results output
(dir overtone.algo.lists)
#+END_SRC

#+RESULTS:
: fill
: rotate
*** make some code from a library available
#+BEGIN_SRC clojure
(require '[overtone.algo.chance :as chance])
#+END_SRC

#+BEGIN_SRC clojure :results output
(dir overtone.algo.chance)
#+END_SRC

#+RESULTS:
: choose
: choose-n
: chosen-from
: only
: ranged-rand
: weighted-choose
: weighted-coin
* SQL connections
** define a db-spec
#+BEGIN_SRC clojure
(def db-spec {:classname "org.postgresql.Driver"
              :subprotocol "postgresql"
              :subname "//localhost:5432/heroku_psql_tutorial"
              :user "a"
              ;;:password ""
              })
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
\dt
#+END_SRC

#+RESULTS:
| List of relations |                   |       |       |
|-------------------+-------------------+-------+-------|
| Schema            | Name              | Type  | Owner |
| public            | chord_event       | table | a     |
| public            | dyad_events       | table | a     |
| public            | hexachord_events  | table | a     |
| public            | monochord_events  | table | a     |
| public            | pcs_event         | table | a     |
| public            | pentachord_events | table | a     |
| public            | tetrachord_events | table | a     |
| public            | trichord_events   | table | a     |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * from monochord_events;
select * from dyad_events;
select * from trichord_events;
select * from tetrachord_events;
select * from pentachord_events;
select * from hexachord_events;
#+END_SRC

#+RESULTS:
| chord_id | midi1 |       |       |       |       |       |
|----------+-------+-------+-------+-------+-------+-------|
|        1 |    60 |       |       |       |       |       |
| chord_id | midi1 | midi2 |       |       |       |       |
| chord_id | midi1 | midi2 | midi3 |       |       |       |
|        1 |    59 |    62 |    65 |       |       |       |
| chord_id | midi1 | midi2 | midi3 | midi4 |       |       |
|        1 |    58 |    62 |    64 |    67 |       |       |
|        2 |    57 |    63 |    64 |    67 |       |       |
| chord_id | midi1 | midi2 | midi3 | midi4 | midi5 |       |
|        1 |    59 |    61 |    64 |    67 |    70 |       |
| chord_id | midi1 | midi2 | midi3 | midi4 | midi5 | midi6 |
|        1 |    59 |    61 |    64 |    67 |    70 |    71 |
** use the YeSQL-Clojure function from sql insert chords

#+BEGIN_SRC clojure
"(#'cdb1.core/insert-monochords<! #'cdb1.core/insert-dyads<! #'cdb1.core/insert-trichords<! #'cdb1.core/insert-tetrachords<! #'cdb1.core/insert-pentachords<! #'cdb1.core/insert-hexachords<!)"
#+END_SRC

#+BEGIN_SRC clojure 
(cdb1.core/insert-tetrachords<! {:midi1 57 :midi2 63 :midi3 64 :midi4 67})
#+END_SRC

#+RESULTS:
| :chord_id | 2 | :midi1 | 57 | :midi2 | 63 | :midi3 | 64 | :midi4 | 67 |
* voice random sets and log them
** old voice-rand-set--to be refactored
#+BEGIN_SRC clojure
(defn voice-rand-set [set-type]
  (let [set (rand-nth set-type)
        voiced-set (map #(+ (rand-nth [36 48 60 72]) %) set)
        set-voicing-pair (list set voiced-set)]
    (do
      (println set-voicing-pair)
      set-voicing-pair)))

;; (voice-rand-set post_tonal_overtone.data.set_class_data/tetrachords-tn)

(defn voice-and-transpose-rand-set [set-type tn-level]
  (let [set (rand-nth set-type)
        voiced-set (map #(+ (rand-nth [36 48 60 72]) %) set)
        transposed-set (map #(+ tn-level %) voiced-set)
        set-voicing-group (list set voiced-set tn-level transposed-set)]
    (do
      (println set-voicing-group)
      (last set-voicing-group))))
#+END_SRC

#+RESULTS:
: #'user/voice-rand-set#'user/voice-and-transpose-rand-set

#+BEGIN_SRC clojure
(user/voice-rand-set tetrachords)
#+END_SRC

#+RESULTS:
|  0 |  1 |  4 |  6 |
| 36 | 49 | 76 | 66 |
** destructure a voiced random chord into the database
#+BEGIN_SRC clojure
(def chord-ds (user/voice-rand-set tetrachords))
#+END_SRC

#+RESULTS:
: #'user/chord-ds
#+BEGIN_SRC clojure
(let [pcs (first chord-ds) midis (second chord-ds)]
  midis)
#+END_SRC

#+RESULTS:
| 48 | 75 | 65 | 80 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds]
  )
#+END_SRC

#+RESULTS:
| 0 | 3 | 5 | 8 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
      midi1)
#+END_SRC

#+RESULTS:
: 48

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
      {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4})
#+END_SRC

#+RESULTS:
| :midi1 | 48 | :midi2 | 75 | :midi3 | 65 | :midi4 | 80 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC

#+RESULTS:
| :chord_id | 3 | :midi1 | 48 | :midi2 | 75 | :midi3 | 65 | :midi4 | 80 |



#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC

#+RESULTS:
| :chord_id | 4 | :midi1 | 48 | :midi2 | 49 | :midi3 | 63 | :midi4 | 42 |
** destructure a voiced random chord into the database
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC
