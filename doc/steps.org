#+STARTUP:  indent
* follow Heroku tutorial
** preliminaries
** with a repl started
*** "resolve" the jdbc namespace
#+BEGIN_SRC clojure
(require '[clojure.java.jdbc :as sql])
#+END_SRC

#+RESULTS:
: nil
*** load data from a local file
#+BEGIN_SRC clojure
(load "data/set_class_data")
;; (first *tetrachords*) ;(0 1 2 3)
;; (first post_tonal_overtone.data.set_class_data/tetrachords-tn)
#+END_SRC
** load data from babel
*** test def-ing dyads as constant
#+BEGIN_SRC clojure
(def ^:const dyads-tn '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))
#+END_SRC

#+BEGIN_SRC clojure
(rand-nth dyads-tn)
#+END_SRC
#+RESULTS:
| 0 | 2 |
*** def all sets into the current (user?) ns
**** as lists
#+BEGIN_SRC clojure
(def ^:const dyads-tn '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))

(def ^:const trichords-tn '((0 1 2) (0 1 3) (0 2 3) (0 1 4) (0 3 4) (0 1 5) (0 4 5) (0 1 6) (0 5 6) (0 2 4) (0 2 5) (0 3 5) (0 2 6) (0 4 6) (0 2 7) (0 3 6) (0 3 7) (0 4 7) (0 4 8)))

(def ^:const tetrachords-tn '((0 1 2 3)
			   (0 1 2 4)
			   (0 2 3 4)
			   (0 1 3 4)
			   (0 1 2 5)
			   (0 3 4 5)
			   (0 1 2 6)
			   (0 4 5 6)
			   (0 1 2 7)
			   (0 1 4 5)
			   (0 1 5 6)
			   (0 1 6 7)
			   (0 2 3 5)
			   (0 1 3 5)
			   (0 2 4 5)
			   (0 2 3 6)
			   (0 3 4 6)
			   (0 1 3 6)
			   (0 3 5 6)
			   (0 2 3 7)
			   (0 4 5 7)
			   (0 1 4 6)
			   (0 2 5 6)
			   (0 1 5 7)
			   (0 2 6 7)
			   (0 3 4 7)
			   (0 1 4 7)
			   (0 3 6 7)
			   (0 1 4 8)
			   (0 3 4 8)
			   (0 1 5 8)
			   (0 2 4 6)
			   (0 2 4 7)
			   (0 3 5 7)
			   (0 2 5 7)
			   (0 2 4 8)
			   (0 2 6 8)
			   (0 3 5 8)
			   (0 2 5 8)
			   (0 3 6 8)
			   (0 3 6 9)
			   (0 1 3 7)
			   (0 4 6 7)))

(def ^:const pentachords-tn '((0 1 2 3 4)
			   (0 1 2 3 5)
			   (0 2 3 4 5)
			   (0 1 2 4 5)
			   (0 1 3 4 5)
			   (0 1 2 3 6)
			   (0 3 4 5 6)
			   (0 1 2 3 7)
			   (0 4 5 6 7)
			   (0 1 2 5 6)
			   (0 1 4 5 6)
			   (0 1 2 6 7)
			   (0 1 5 6 7)
			   (0 2 3 4 6)
			   (0 1 2 4 6)
			   (0 2 4 5 6)
			   (0 1 3 4 6)
			   (0 2 3 5 6)
			   (0 2 3 4 7)
			   (0 3 4 5 7)
			   (0 1 3 5 6)
			   (0 1 2 4 8)
			   (0 2 3 4 8)
			   (0 1 2 5 7)
			   (0 2 5 6 7)
			   (0 1 2 6 8)
			   (0 1 3 4 7)
			   (0 3 4 6 7)
			   (0 1 3 4 8)
			   (0 1 4 5 7)
			   (0 2 3 6 7)
			   (0 1 3 6 7)
			   (0 1 4 6 7)
			   (0 1 3 7 8)
			   (0 1 5 7 8)
			   (0 1 4 5 8)
			   (0 3 4 7 8)
			   (0 1 4 7 8)
			   (0 2 3 5 7)
			   (0 2 4 5 7)
			   (0 1 3 5 7)
			   (0 2 4 6 7)
			   (0 2 3 5 8)
			   (0 3 5 6 8)
			   (0 2 4 5 8)
			   (0 3 4 6 8)
			   (0 1 3 5 8)
			   (0 3 5 7 8)
			   (0 2 3 6 8)
			   (0 2 5 6 8)
			   (0 1 3 6 8)
			   (0 2 5 7 8)
			   (0 1 4 6 8)
			   (0 2 4 7 8)
			   (0 1 3 6 9)
			   (0 2 3 6 9)
			   (0 1 4 6 9)
			   (0 1 4 7 9)
			   (0 2 4 6 8)
			   (0 2 4 6 9)
			   (0 2 4 7 9)
			   (0 1 2 4 7)
			   (0 3 5 6 7)
			   (0 3 4 5 8)
			   (0 1 2 5 8)
			   (0 3 6 7 8)))

(def ^:const hexachords-tn '((0 1 2 3 4 5)
			  (0 1 2 3 4 6)
			  (0 2 3 4 5 6)
			  (0 1 2 3 5 6)
			  (0 1 3 4 5 6)
			  (0 1 2 4 5 6)
			  (0 1 2 3 6 7)
			  (0 1 4 5 6 7)
			  (0 1 2 5 6 7)
			  (0 1 2 6 7 8)
			  (0 2 3 4 5 7)
			  (0 1 2 3 5 7)
			  (0 2 4 5 6 7)
			  (0 1 3 4 5 7)
			  (0 2 3 4 6 7)
			  (0 1 2 4 5 7)
			  (0 2 3 5 6 7)
			  (0 1 2 4 6 7)
			  (0 1 3 5 6 7)
			  (0 1 3 4 6 7)
			  (0 1 3 4 5 8)
			  (0 3 4 5 7 8)
			  (0 1 2 4 5 8)
			  (0 3 4 6 7 8)
			  (0 1 4 5 6 8)
			  (0 2 3 4 7 8)
			  (0 1 2 4 7 8)
			  (0 1 4 6 7 8)
			  (0 1 2 5 7 8)
			  (0 1 3 6 7 8)
			  (0 1 3 4 7 8)
			  (0 1 4 5 7 8)
			  (0 1 4 5 8 9)
			  (0 2 3 4 6 8)
			  (0 2 4 5 6 8)
			  (0 1 2 4 6 8)
			  (0 2 4 6 7 8)
			  (0 2 3 5 6 8)
			  (0 1 3 4 6 8)
			  (0 2 4 5 7 8)
			  (0 1 3 5 6 8)
			  (0 2 3 5 7 8)
			  (0 1 3 5 7 8)
			  (0 1 3 4 6 9)
			  (0 2 3 5 6 9)
			  (0 1 3 5 6 9)
			  (0 1 3 6 8 9)
			  (0 1 3 6 7 9)
			  (0 2 3 6 8 9)
			  (0 1 3 5 8 9)
			  (0 1 4 6 8 9)
			  (0 2 4 5 7 9)
			  (0 2 3 5 7 9)
			  (0 2 4 6 7 9)
			  (0 1 3 5 7 9)
			  (0 2 4 6 8 9)
			  (0 2 4 6 8 10)
			  (0 1 2 3 4 7)
			  (0 3 4 5 6 7)
			  (0 1 2 3 4 8)
			  (0 1 2 3 7 8)
			  (0 2 3 4 5 8)
			  (0 3 4 5 6 8)
			  (0 1 2 3 5 8)
			  (0 3 5 6 7 8)
			  (0 1 2 3 6 8)
			  (0 2 5 6 7 8)
			  (0 1 2 3 6 9)
			  (0 1 2 5 6 8)
			  (0 2 3 6 7 8)
			  (0 1 2 5 6 9)
			  (0 1 2 5 8 9)
			  (0 2 3 4 6 9)
			  (0 1 2 4 6 9)
			  (0 2 4 5 6 9)
			  (0 1 2 4 7 9)
			  (0 2 3 4 7 9)
			  (0 1 2 5 7 9)
			  (0 1 3 4 7 9)
			  (0 1 4 6 7 9)))

;TnI-types
(def ^:const dyads '((0 1) (0 2) (0 3) (0 4) (0 5) (0 6)))

(def ^:const trichords '((0 1 2) (0 1 3) (0 1 4) (0 1 5) (0 1 6) (0 2 4) (0 2 5) (0 2 6) (0 2 7) (0 3 6) (0 3 7) (0 4 8)))

(def ^:const tetrachords '((0 1 2 3)
			(0 1 2 4)
			(0 1 3 4)
			(0 1 2 5)
			(0 1 2 6)
			(0 1 2 7)
			(0 1 4 5)
			(0 1 5 6)
			(0 1 6 7)
			(0 2 3 5)
			(0 1 3 5)
			(0 2 3 6)
			(0 1 3 6)
			(0 2 3 7)
			(0 1 3 7)
			(0 1 4 6)
			(0 1 5 7)
			(0 3 4 7)
			(0 1 4 7)
			(0 1 4 8)
			(0 1 5 8)
			(0 2 4 6)
			(0 2 4 7)
			(0 2 5 7)
			(0 2 4 8)
			(0 2 6 8)
			(0 3 5 8)
			(0 2 5 8)
			(0 3 6 9)))

(def ^:const pentachords '((0 1 2 3 4)
			(0 1 2 3 5)
			(0 1 2 4 5)
			(0 1 2 3 6)
			(0 1 2 3 7)
			(0 1 2 5 6)
			(0 1 2 6 7)
			(0 2 3 4 6)
			(0 1 2 4 6)
			(0 1 3 4 6)
			(0 2 3 4 7)
			(0 1 3 5 6)
			(0 1 2 4 8)
			(0 1 2 5 7)
			(0 1 2 6 8)
			(0 1 3 4 7)
			(0 1 3 4 8)
			(0 1 4 5 7)
			(0 1 3 6 7)
			(0 1 3 7 8)
			(0 1 4 5 8)
			(0 1 4 7 8)
			(0 2 3 5 7)
			(0 1 3 5 7)
			(0 2 3 5 8)
			(0 2 4 5 8)
			(0 1 3 5 8)
			(0 2 3 6 8)
			(0 1 3 6 8)
			(0 1 4 6 8)
			(0 1 3 6 9)
			(0 1 4 6 9)
			(0 2 4 6 8)
			(0 2 4 6 9)
			(0 2 4 7 9)
			(0 1 2 4 7)
			(0 3 4 5 8)
			(0 1 2 5 8)))

(def ^:const hexachords '((0 1 2 3 4 5)
		       (0 1 2 3 4 6)
		       (0 1 2 3 5 6)
		       (0 1 2 4 5 6)
		       (0 1 2 3 6 7)
		       (0 1 2 5 6 7)
		       (0 1 2 6 7 8)
		       (0 2 3 4 5 7)
		       (0 1 2 3 5 7)
		       (0 1 3 4 5 7)
		       (0 1 2 4 5 7)
		       (0 1 2 4 6 7)
		       (0 1 3 4 6 7)
		       (0 1 3 4 5 8)
		       (0 1 2 4 5 8)
		       (0 1 4 5 6 8)
		       (0 1 2 4 7 8)
		       (0 1 2 5 7 8)
		       (0 1 3 4 7 8)
		       (0 1 4 5 8 9)
		       (0 2 3 4 6 8)
		       (0 1 2 4 6 8)
		       (0 2 3 5 6 8)
		       (0 1 3 4 6 8)
		       (0 1 3 5 6 8)
		       (0 1 3 5 7 8)
		       (0 1 3 4 6 9)
		       (0 1 3 5 6 9)
		       (0 1 3 6 8 9)
		       (0 1 3 6 7 9)
		       (0 1 3 5 8 9)
		       (0 2 4 5 7 9)
		       (0 2 3 5 7 9)
		       (0 1 3 5 7 9)
		       (0 2 4 6 8 10)
		       (0 1 2 3 4 7)
		       (0 1 2 3 4 8)
		       (0 1 2 3 7 8)
		       (0 2 3 4 5 8)
		       (0 1 2 3 5 8)
		       (0 1 2 3 6 8)
		       (0 1 2 3 6 9)
		       (0 1 2 5 6 8)
		       (0 1 2 5 6 9)
		       (0 2 3 4 6 9)
		       (0 1 2 4 6 9)
		       (0 1 2 4 7 9)
		       (0 1 2 5 7 9)
		       (0 1 3 4 7 9)
		       (0 1 4 6 7 9)))

;; ((((0 4 7) (0 4 19) (0 4 31))
;;   ((0 16 7) (0 16 19) (0 16 31))
;;   ((0 28 7) (0 28 19) (0 28 31)))
;;  (((12 4 7) (12 4 19) (12 4 31))
;;   ((12 16 7) (12 16 19) (12 16 31))
;;   ((12 28 7) (12 28 19) (12 28 31)))
;;  (((24 4 7) (24 4 19) (24 4 31))
;;   ((24 16 7) (24 16 19) (24 16 31))
;;   ((24 28 7) (24 28 19) (24 28 31))))


;; ((((48 52 55) (48 52 67) (48 52 79))
;;   ((48 64 55) (48 64 67) (48 64 79))
;;   ((48 76 55) (48 76 67) (48 76 79)))
;;  (((60 52 55) (60 52 67) (60 52 79))
;;   ((60 64 55) (60 64 67) (60 64 79))
;;   ((60 76 55) (60 76 67) (60 76 79)))
;;  (((72 52 55) (72 52 67) (72 52 79))
;;   ((72 64 55) (72 64 67) (72 64 79))
;;   ((72 76 55) (72 76 67) (72 76 79))))

(def cmajtriads '((48 52 55) (48 52 67) (48 52 79) (48 64 55) (48 64 67) (48 64 79) (48 76 55) (48 76 67) (48 76 79) (60 52 55) (60 52 67) (60 52 79) (60 64 55) (60 64 67) (60 64 79) (60 76 55) (60 76 67) (60 76 79) (72 52 55) (72 52 67) (72 52 79) (72 64 55) (72 64 67) (72 64 79) (72 76 55) (72 76 67) (72 76 79)))

(def nested-transposed-tetrachords '(((11 12 13 14) (10 11 12 13) (9 10 11 12) (8 9 10 11) (7 8 9 10) (6 7 8 9) (5 6 7 8) (4 5 6 7) (3 4 5 6) (2 3 4 5) (1 2 3 4)) ((11 12 13 15) (10 11 12 14) (9 10 11 13) (8 9 10 12) (7 8 9 11) (6 7 8 10) (5 6 7 9) (4 5 6 8) (3 4 5 7) (2 3 4 6) (1 2 3 5)) ((11 12 14 15) (10 11 13 14) (9 10 12 13) (8 9 11 12) (7 8 10 11) (6 7 9 10) (5 6 8 9) (4 5 7 8) (3 4 6 7) (2 3 5 6) (1 2 4 5)) ((11 12 13 16) (10 11 12 15) (9 10 11 14) (8 9 10 13) (7 8 9 12) (6 7 8 11) (5 6 7 10) (4 5 6 9) (3 4 5 8) (2 3 4 7) (1 2 3 6)) ((11 12 13 17) (10 11 12 16) (9 10 11 15) (8 9 10 14) (7 8 9 13) (6 7 8 12) (5 6 7 11) (4 5 6 10) (3 4 5 9) (2 3 4 8) (1 2 3 7)) ((11 12 13 18) (10 11 12 17) (9 10 11 16) (8 9 10 15) (7 8 9 14) (6 7 8 13) (5 6 7 12) (4 5 6 11) (3 4 5 10) (2 3 4 9) (1 2 3 8)) ((11 12 15 16) (10 11 14 15) (9 10 13 14) (8 9 12 13) (7 8 11 12) (6 7 10 11) (5 6 9 10) (4 5 8 9) (3 4 7 8) (2 3 6 7) (1 2 5 6)) ((11 12 16 17) (10 11 15 16) (9 10 14 15) (8 9 13 14) (7 8 12 13) (6 7 11 12) (5 6 10 11) (4 5 9 10) (3 4 8 9) (2 3 7 8) (1 2 6 7)) ((11 12 17 18) (10 11 16 17) (9 10 15 16) (8 9 14 15) (7 8 13 14) (6 7 12 13) (5 6 11 12) (4 5 10 11) (3 4 9 10) (2 3 8 9) (1 2 7 8)) ((11 13 14 16) (10 12 13 15) (9 11 12 14) (8 10 11 13) (7 9 10 12) (6 8 9 11) (5 7 8 10) (4 6 7 9) (3 5 6 8) (2 4 5 7) (1 3 4 6)) ((11 12 14 16) (10 11 13 15) (9 10 12 14) (8 9 11 13) (7 8 10 12) (6 7 9 11) (5 6 8 10) (4 5 7 9) (3 4 6 8) (2 3 5 7) (1 2 4 6)) ((11 13 14 17) (10 12 13 16) (9 11 12 15) (8 10 11 14) (7 9 10 13) (6 8 9 12) (5 7 8 11) (4 6 7 10) (3 5 6 9) (2 4 5 8) (1 3 4 7)) ((11 12 14 17) (10 11 13 16) (9 10 12 15) (8 9 11 14) (7 8 10 13) (6 7 9 12) (5 6 8 11) (4 5 7 10) (3 4 6 9) (2 3 5 8) (1 2 4 7)) ((11 13 14 18) (10 12 13 17) (9 11 12 16) (8 10 11 15) (7 9 10 14) (6 8 9 13) (5 7 8 12) (4 6 7 11) (3 5 6 10) (2 4 5 9) (1 3 4 8)) ((11 12 14 18) (10 11 13 17) (9 10 12 16) (8 9 11 15) (7 8 10 14) (6 7 9 13) (5 6 8 12) (4 5 7 11) (3 4 6 10) (2 3 5 9) (1 2 4 8)) ((11 12 15 17) (10 11 14 16) (9 10 13 15) (8 9 12 14) (7 8 11 13) (6 7 10 12) (5 6 9 11) (4 5 8 10) (3 4 7 9) (2 3 6 8) (1 2 5 7)) ((11 12 16 18) (10 11 15 17) (9 10 14 16) (8 9 13 15) (7 8 12 14) (6 7 11 13) (5 6 10 12) (4 5 9 11) (3 4 8 10) (2 3 7 9) (1 2 6 8)) ((11 14 15 18) (10 13 14 17) (9 12 13 16) (8 11 12 15) (7 10 11 14) (6 9 10 13) (5 8 9 12) (4 7 8 11) (3 6 7 10) (2 5 6 9) (1 4 5 8)) ((11 12 15 18) (10 11 14 17) (9 10 13 16) (8 9 12 15) (7 8 11 14) (6 7 10 13) (5 6 9 12) (4 5 8 11) (3 4 7 10) (2 3 6 9) (1 2 5 8)) ((11 12 15 19) (10 11 14 18) (9 10 13 17) (8 9 12 16) (7 8 11 15) (6 7 10 14) (5 6 9 13) (4 5 8 12) (3 4 7 11) (2 3 6 10) (1 2 5 9)) ((11 12 16 19) (10 11 15 18) (9 10 14 17) (8 9 13 16) (7 8 12 15) (6 7 11 14) (5 6 10 13) (4 5 9 12) (3 4 8 11) (2 3 7 10) (1 2 6 9)) ((11 13 15 17) (10 12 14 16) (9 11 13 15) (8 10 12 14) (7 9 11 13) (6 8 10 12) (5 7 9 11) (4 6 8 10) (3 5 7 9) (2 4 6 8) (1 3 5 7)) ((11 13 15 18) (10 12 14 17) (9 11 13 16) (8 10 12 15) (7 9 11 14) (6 8 10 13) (5 7 9 12) (4 6 8 11) (3 5 7 10) (2 4 6 9) (1 3 5 8)) ((11 13 16 18) (10 12 15 17) (9 11 14 16) (8 10 13 15) (7 9 12 14) (6 8 11 13) (5 7 10 12) (4 6 9 11) (3 5 8 10) (2 4 7 9) (1 3 6 8)) ((11 13 15 19) (10 12 14 18) (9 11 13 17) (8 10 12 16) (7 9 11 15) (6 8 10 14) (5 7 9 13) (4 6 8 12) (3 5 7 11) (2 4 6 10) (1 3 5 9)) ((11 13 17 19) (10 12 16 18) (9 11 15 17) (8 10 14 16) (7 9 13 15) (6 8 12 14) (5 7 11 13) (4 6 10 12) (3 5 9 11) (2 4 8 10) (1 3 7 9)) ((11 14 16 19) (10 13 15 18) (9 12 14 17) (8 11 13 16) (7 10 12 15) (6 9 11 14) (5 8 10 13) (4 7 9 12) (3 6 8 11) (2 5 7 10) (1 4 6 9)) ((11 13 16 19) (10 12 15 18) (9 11 14 17) (8 10 13 16) (7 9 12 15) (6 8 11 14) (5 7 10 13) (4 6 9 12) (3 5 8 11) (2 4 7 10) (1 3 6 9)) ((11 14 17 20) (10 13 16 19) (9 12 15 18) (8 11 14 17) (7 10 13 16) (6 9 12 15) (5 8 11 14) (4 7 10 13) (3 6 9 12) (2 5 8 11) (1 4 7 10))))

#+END_SRC

#+RESULTS:
: #'user/dyads-tn#'user/trichords-tn#'user/tetrachords-tn#'user/pentachords-tn#'user/hexachords-tn#'user/dyads#'user/trichords#'user/tetrachords#'user/pentachords#'user/hexachords#'user/cmajtriads#'user/nested-transposed-tetrachords



#+BEGIN_SRC clojure
(rand-nth tetrachords-tn)
#+END_SRC

#+RESULTS:
| 0 | 1 | 3 | 7 |
**** as vectors
#+BEGIN_SRC clojure
(def ^:const dyads-tn [[0 1] [0 2] [0 3] [0 4] [0 5] [0 6]])

(def ^:const trichords-tn [[0 1 2] [0 1 3] [0 2 3] [0 1 4] [0 3 4] [0 1 5] [0 4 5] [0 1 6] [0 5 6] [0 2 4] [0 2 5] [0 3 5] [0 2 6] [0 4 6] [0 2 7] [0 3 6] [0 3 7] [0 4 7] [0 4 8]])

(def ^:const tetrachords-tn [[0 1 2 3]
			   [0 1 2 4] 
			   [0 2 3 4] 
			   [0 1 3 4] 
			   [0 1 2 5] 
			   [0 3 4 5] 
			   [0 1 2 6] 
			   [0 4 5 6] 
			   [0 1 2 7] 
			   [0 1 4 5] 
			   [0 1 5 6] 
			   [0 1 6 7] 
			   [0 2 3 5] 
			   [0 1 3 5] 
			   [0 2 4 5] 
			   [0 2 3 6] 
			   [0 3 4 6] 
			   [0 1 3 6] 
			   [0 3 5 6] 
			   [0 2 3 7] 
			   [0 4 5 7] 
			   [0 1 4 6] 
			   [0 2 5 6] 
			   [0 1 5 7] 
			   [0 2 6 7] 
			   [0 3 4 7] 
			   [0 1 4 7] 
			   [0 3 6 7] 
			   [0 1 4 8] 
			   [0 3 4 8] 
			   [0 1 5 8] 
			   [0 2 4 6] 
			   [0 2 4 7] 
			   [0 3 5 7] 
			   [0 2 5 7] 
			   [0 2 4 8] 
			   [0 2 6 8] 
			   [0 3 5 8] 
			   [0 2 5 8] 
			   [0 3 6 8] 
			   [0 3 6 9] 
			   [0 1 3 7] 
			   [0 4 6 7]])

(def ^:const pentachords-tn [[0 1 2 3 4] 
			   [0 1 2 3 5] 
			   [0 2 3 4 5] 
			   [0 1 2 4 5] 
			   [0 1 3 4 5] 
			   [0 1 2 3 6] 
			   [0 3 4 5 6] 
			   [0 1 2 3 7] 
			   [0 4 5 6 7] 
			   [0 1 2 5 6] 
			   [0 1 4 5 6] 
			   [0 1 2 6 7] 
			   [0 1 5 6 7] 
			   [0 2 3 4 6] 
			   [0 1 2 4 6] 
			   [0 2 4 5 6] 
			   [0 1 3 4 6] 
			   [0 2 3 5 6] 
			   [0 2 3 4 7] 
			   [0 3 4 5 7] 
			   [0 1 3 5 6] 
			   [0 1 2 4 8] 
			   [0 2 3 4 8] 
			   [0 1 2 5 7] 
			   [0 2 5 6 7] 
			   [0 1 2 6 8] 
			   [0 1 3 4 7] 
			   [0 3 4 6 7] 
			   [0 1 3 4 8] 
			   [0 1 4 5 7] 
			   [0 2 3 6 7] 
			   [0 1 3 6 7] 
			   [0 1 4 6 7] 
			   [0 1 3 7 8] 
			   [0 1 5 7 8] 
			   [0 1 4 5 8] 
			   [0 3 4 7 8] 
			   [0 1 4 7 8] 
			   [0 2 3 5 7] 
			   [0 2 4 5 7] 
			   [0 1 3 5 7] 
			   [0 2 4 6 7] 
			   [0 2 3 5 8] 
			   [0 3 5 6 8] 
			   [0 2 4 5 8] 
			   [0 3 4 6 8] 
			   [0 1 3 5 8] 
			   [0 3 5 7 8] 
			   [0 2 3 6 8] 
			   [0 2 5 6 8] 
			   [0 1 3 6 8] 
			   [0 2 5 7 8] 
			   [0 1 4 6 8] 
			   [0 2 4 7 8] 
			   [0 1 3 6 9] 
			   [0 2 3 6 9] 
			   [0 1 4 6 9] 
			   [0 1 4 7 9] 
			   [0 2 4 6 8] 
			   [0 2 4 6 9] 
			   [0 2 4 7 9] 
			   [0 1 2 4 7] 
			   [0 3 5 6 7] 
			   [0 3 4 5 8] 
			   [0 1 2 5 8] 
			   [0 3 6 7 8] ] )

(def ^:const hexachords-tn [[0 1 2 3 4 5] 
			  [0 1 2 3 4 6] 
			  [0 2 3 4 5 6] 
			  [0 1 2 3 5 6] 
			  [0 1 3 4 5 6] 
			  [0 1 2 4 5 6] 
			  [0 1 2 3 6 7] 
			  [0 1 4 5 6 7] 
			  [0 1 2 5 6 7] 
			  [0 1 2 6 7 8] 
			  [0 2 3 4 5 7] 
			  [0 1 2 3 5 7] 
			  [0 2 4 5 6 7] 
			  [0 1 3 4 5 7] 
			  [0 2 3 4 6 7] 
			  [0 1 2 4 5 7] 
			  [0 2 3 5 6 7] 
			  [0 1 2 4 6 7] 
			  [0 1 3 5 6 7] 
			  [0 1 3 4 6 7] 
			  [0 1 3 4 5 8] 
			  [0 3 4 5 7 8] 
			  [0 1 2 4 5 8] 
			  [0 3 4 6 7 8] 
			  [0 1 4 5 6 8] 
			  [0 2 3 4 7 8] 
			  [0 1 2 4 7 8] 
			  [0 1 4 6 7 8] 
			  [0 1 2 5 7 8] 
			  [0 1 3 6 7 8] 
			  [0 1 3 4 7 8] 
			  [0 1 4 5 7 8] 
			  [0 1 4 5 8 9] 
			  [0 2 3 4 6 8] 
			  [0 2 4 5 6 8] 
			  [0 1 2 4 6 8] 
			  [0 2 4 6 7 8] 
			  [0 2 3 5 6 8] 
			  [0 1 3 4 6 8] 
			  [0 2 4 5 7 8] 
			  [0 1 3 5 6 8] 
			  [0 2 3 5 7 8] 
			  [0 1 3 5 7 8] 
			  [0 1 3 4 6 9] 
			  [0 2 3 5 6 9] 
			  [0 1 3 5 6 9] 
			  [0 1 3 6 8 9] 
			  [0 1 3 6 7 9] 
			  [0 2 3 6 8 9] 
			  [0 1 3 5 8 9] 
			  [0 1 4 6 8 9] 
			  [0 2 4 5 7 9] 
			  [0 2 3 5 7 9] 
			  [0 2 4 6 7 9] 
			  [0 1 3 5 7 9] 
			  [0 2 4 6 8 9] 
			  [0 2 4 6 8 10] 
			  [0 1 2 3 4 7] 
			  [0 3 4 5 6 7] 
			  [0 1 2 3 4 8] 
			  [0 1 2 3 7 8] 
			  [0 2 3 4 5 8] 
			  [0 3 4 5 6 8] 
			  [0 1 2 3 5 8] 
			  [0 3 5 6 7 8] 
			  [0 1 2 3 6 8] 
			  [0 2 5 6 7 8] 
			  [0 1 2 3 6 9] 
			  [0 1 2 5 6 8] 
			  [0 2 3 6 7 8] 
			  [0 1 2 5 6 9] 
			  [0 1 2 5 8 9] 
			  [0 2 3 4 6 9] 
			  [0 1 2 4 6 9] 
			  [0 2 4 5 6 9] 
			  [0 1 2 4 7 9] 
			  [0 2 3 4 7 9] 
			  [0 1 2 5 7 9] 
			  [0 1 3 4 7 9] 
			  [0 1 4 6 7 9] ] )

;TnI-types
(def ^:const dyads [[0 1] [0 2] [0 3] [0 4] [0 5] [0 6]])

(def ^:const trichords [[0 1 2] [0 1 3] [0 1 4] [0 1 5] [0 1 6] [0 2 4] [0 2 5] [0 2 6] [0 2 7] [0 3 6] [0 3 7] [0 4 8]])

(def ^:const tetrachords [[0 1 2 3] 
			[0 1 2 4] 
			[0 1 3 4] 
			[0 1 2 5] 
			[0 1 2 6] 
			[0 1 2 7] 
			[0 1 4 5] 
			[0 1 5 6] 
			[0 1 6 7] 
			[0 2 3 5] 
			[0 1 3 5] 
			[0 2 3 6] 
			[0 1 3 6] 
			[0 2 3 7] 
			[0 1 3 7] 
			[0 1 4 6] 
			[0 1 5 7] 
			[0 3 4 7] 
			[0 1 4 7] 
			[0 1 4 8] 
			[0 1 5 8] 
			[0 2 4 6] 
			[0 2 4 7] 
			[0 2 5 7] 
			[0 2 4 8] 
			[0 2 6 8] 
			[0 3 5 8] 
			[0 2 5 8] 
			[0 3 6 9] ])

(def ^:const pentachords [[0 1 2 3 4] 
			[0 1 2 3 5] 
			[0 1 2 4 5] 
			[0 1 2 3 6] 
			[0 1 2 3 7] 
			[0 1 2 5 6] 
			[0 1 2 6 7] 
			[0 2 3 4 6] 
			[0 1 2 4 6] 
			[0 1 3 4 6] 
			[0 2 3 4 7] 
			[0 1 3 5 6] 
			[0 1 2 4 8] 
			[0 1 2 5 7] 
			[0 1 2 6 8] 
			[0 1 3 4 7] 
			[0 1 3 4 8] 
			[0 1 4 5 7] 
			[0 1 3 6 7] 
			[0 1 3 7 8] 
			[0 1 4 5 8] 
			[0 1 4 7 8] 
			[0 2 3 5 7] 
			[0 1 3 5 7] 
			[0 2 3 5 8] 
			[0 2 4 5 8] 
			[0 1 3 5 8] 
			[0 2 3 6 8] 
			[0 1 3 6 8] 
			[0 1 4 6 8] 
			[0 1 3 6 9] 
			[0 1 4 6 9] 
			[0 2 4 6 8] 
			[0 2 4 6 9] 
			[0 2 4 7 9] 
			[0 1 2 4 7] 
			[0 3 4 5 8] 
			[0 1 2 5 8]])

(def ^:const hexachords [[0 1 2 3 4 5] 
		       [0 1 2 3 4 6] 
		       [0 1 2 3 5 6] 
		       [0 1 2 4 5 6] 
		       [0 1 2 3 6 7] 
		       [0 1 2 5 6 7] 
		       [0 1 2 6 7 8] 
		       [0 2 3 4 5 7] 
		       [0 1 2 3 5 7] 
		       [0 1 3 4 5 7] 
		       [0 1 2 4 5 7] 
		       [0 1 2 4 6 7] 
		       [0 1 3 4 6 7] 
		       [0 1 3 4 5 8] 
		       [0 1 2 4 5 8] 
		       [0 1 4 5 6 8] 
		       [0 1 2 4 7 8] 
		       [0 1 2 5 7 8] 
		       [0 1 3 4 7 8] 
		       [0 1 4 5 8 9] 
		       [0 2 3 4 6 8] 
		       [0 1 2 4 6 8] 
		       [0 2 3 5 6 8] 
		       [0 1 3 4 6 8] 
		       [0 1 3 5 6 8] 
		       [0 1 3 5 7 8] 
		       [0 1 3 4 6 9] 
		       [0 1 3 5 6 9] 
		       [0 1 3 6 8 9] 
		       [0 1 3 6 7 9] 
		       [0 1 3 5 8 9] 
		       [0 2 4 5 7 9] 
		       [0 2 3 5 7 9] 
		       [0 1 3 5 7 9] 
		       [0 2 4 6 8 10] 
		       [0 1 2 3 4 7] 
		       [0 1 2 3 4 8] 
		       [0 1 2 3 7 8] 
		       [0 2 3 4 5 8] 
		       [0 1 2 3 5 8] 
		       [0 1 2 3 6 8] 
		       [0 1 2 3 6 9] 
		       [0 1 2 5 6 8] 
		       [0 1 2 5 6 9] 
		       [0 2 3 4 6 9] 
		       [0 1 2 4 6 9] 
		       [0 1 2 4 7 9] 
		       [0 1 2 5 7 9] 
		       [0 1 3 4 7 9] 
		       [0 1 4 6 7 9] ] )

;; ((((0 4 7) (0 4 19) (0 4 31))
;;   ((0 16 7) (0 16 19) (0 16 31))
;;   ((0 28 7) (0 28 19) (0 28 31)))
;;  (((12 4 7) (12 4 19) (12 4 31))
;;   ((12 16 7) (12 16 19) (12 16 31))
;;   ((12 28 7) (12 28 19) (12 28 31)))
;;  (((24 4 7) (24 4 19) (24 4 31))
;;   ((24 16 7) (24 16 19) (24 16 31))
;;   ((24 28 7) (24 28 19) (24 28 31))))


;; ((((48 52 55) (48 52 67) (48 52 79))
;;   ((48 64 55) (48 64 67) (48 64 79))
;;   ((48 76 55) (48 76 67) (48 76 79)))
;;  (((60 52 55) (60 52 67) (60 52 79))
;;   ((60 64 55) (60 64 67) (60 64 79))
;;   ((60 76 55) (60 76 67) (60 76 79)))
;;  (((72 52 55) (72 52 67) (72 52 79))
;;   ((72 64 55) (72 64 67) (72 64 79))
;;   ((72 76 55) (72 76 67) (72 76 79))))
#+END_SRC

#+RESULTS:
: #'user/dyads-tn#'user/trichords-tn#'user/tetrachords-tn#'user/pentachords-tn#'user/hexachords-tn#'user/dyads#'user/trichords#'user/tetrachords#'user/pentachords#'user/hexachords

** use overtone code (or anything not loaded by default)
*** what's "loaded"
#+BEGIN_SRC clojure :results output
(map println (loaded-libs))
#+END_SRC

#+BEGIN_SRC clojure 
(def classpat (System/getProperty "java.class.path"))
#+END_SRC
*** what's on the "classpath?"
#+BEGIN_SRC clojure 
(System/getProperty "java.class.path")
#+END_SRC

#+RESULTS:
: /Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/test:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/src:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/dev-resources:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/resources:
/Users/a/Documents/working-directory/clojure-web-development/sqlchords/cdb1/target/classes:
/Users/a/.m2/repository/instaparse/instaparse/1.4.1/instaparse-1.4.1.jar:
/Users/a/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:
/Users/a/.m2/repository/org/tcrawley/dynapath/0.2.3/dynapath-0.2.3.jar:
/Users/a/.m2/repository/org/clojure/java.jdbc/0.5.0/java.jdbc-0.5.0.jar:
/Users/a/.m2/repository/overtone/scsynth-extras/3.5.7.0/scsynth-extras-3.5.7.0.jar:
/Users/a/.m2/repository/net/java/dev/jna/jna/3.4.0/jna-3.4.0.jar:
/Users/a/.m2/repository/overtone/at-at/1.2.0/at-at-1.2.0.jar:
/Users/a/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:
/Users/a/.m2/repository/overtone/byte-spec/0.3.1/byte-spec-0.3.1.jar:
/Users/a/.m2/repository/overtone/osc-clj/0.9.0/osc-clj-0.9.0.jar:
/Users/a/.m2/repository/overtone/libs.handlers/0.2.0/libs.handlers-0.2.0.jar:
/Users/a/.m2/repository/org/postgresql/postgresql/9.4-1201-jdbc41/postgresql-9.4-1201-jdbc41.jar:
/Users/a/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:
/Users/a/.m2/repository/overtone/scsynth/3.5.7.0/scsynth-3.5.7.0.jar:
/Users/a/.m2/repository/commons-net/commons-net/3.0.1/commons-net-3.0.1.jar:
/Users/a/.m2/repository/javax/jmdns/jmdns/3.4.1/jmdns-3.4.1.jar:
/Users/a/.m2/repository/cider/cider-nrepl/0.11.0-SNAPSHOT/cider-nrepl-0.11.0-SNAPSHOT.jar:
/Users/a/.m2/repository/yesql/yesql/0.5.2/yesql-0.5.2.jar:
/Users/a/.m2/repository/clj-glob/clj-glob/1.0.0/clj-glob-1.0.0.jar:
/Users/a/.m2/repository/overtone/overtone/0.9.1/overtone-0.9.1.jar:
/Users/a/.m2/repository/overtone/midi-clj/0.5.0/midi-clj-0.5.0.jar:
/Users/a/.m2/repository/org/clojure/data.json/0.2.3/data.json-0.2.3.jar:
/Users/a/.m2/repository/clj-native/clj-native/0.9.3/clj-native-0.9.3.jar
*** what's available in one of these namespaces
#+BEGIN_SRC clojure :results output
(dir overtone.algo.lists)
#+END_SRC

#+RESULTS:
: fill
: rotate
*** make some code from a library available
#+BEGIN_SRC clojure
(require '[overtone.algo.chance :as chance])
#+END_SRC

#+BEGIN_SRC clojure :results output
(dir overtone.algo.chance)
#+END_SRC

#+RESULTS:
: choose
: choose-n
: chosen-from
: only
: ranged-rand
: weighted-choose
: weighted-coin
* SQL connections
** define a db-spec
#+BEGIN_SRC clojure
(def db-spec {:classname "org.postgresql.Driver"
              :subprotocol "postgresql"
              :subname "//localhost:5432/heroku_psql_tutorial"
              :user "a"
              ;;:password ""
              })
#+END_SRC
** describe the tables of this db
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
\dt
#+END_SRC

#+RESULTS:
| List of relations |                           |       |       |
|-------------------+---------------------------+-------+-------|
| Schema            | Name                      | Type  | Owner |
| public            | chord_event               | table | a     |
| public            | dyad_events               | table | a     |
| public            | hexachord_events          | table | a     |
| public            | hexachord_events_stamped  | table | a     |
| public            | monochord_events          | table | a     |
| public            | pcs_event                 | table | a     |
| public            | pentachord_events         | table | a     |
| public            | tetrachord_events         | table | a     |
| public            | tetrachord_events_stamped | table | a     |
| public            | trichord_events           | table | a     |
| public            | trichord_events_stamped   | table | a     |
** select all from simple chord events
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * from monochord_events;
select * from dyad_events;
select * from trichord_events;
select * from tetrachord_events;
select * from pentachord_events;
select * from hexachord_events;
#+END_SRC

#+RESULTS:
| chord_id | midi1 |       |       |       |       |       |
|----------+-------+-------+-------+-------+-------+-------|
|        1 |    60 |       |       |       |       |       |
| chord_id | midi1 | midi2 |       |       |       |       |
| chord_id | midi1 | midi2 | midi3 |       |       |       |
|        1 |    59 |    62 |    65 |       |       |       |
| chord_id | midi1 | midi2 | midi3 | midi4 |       |       |
|        1 |    58 |    62 |    64 |    67 |       |       |
|        2 |    57 |    63 |    64 |    67 |       |       |
| chord_id | midi1 | midi2 | midi3 | midi4 | midi5 |       |
|        1 |    59 |    61 |    64 |    67 |    70 |       |
| chord_id | midi1 | midi2 | midi3 | midi4 | midi5 | midi6 |
|        1 |    59 |    61 |    64 |    67 |    70 |    71 |
** use the YeSQL-Clojure function from sql insert chords
*** functions as returned when evaluating yesql code
#+BEGIN_SRC clojure
"(#'cdb1.core/insert-monochords<! #'cdb1.core/insert-dyads<! #'cdb1.core/insert-trichords<! #'cdb1.core/insert-tetrachords<! #'cdb1.core/insert-pentachords<! #'cdb1.core/insert-hexachords<!)"
#+END_SRC
*** use insert-tetrachords
#+BEGIN_SRC clojure 
(cdb1.core/insert-tetrachords<! {:midi1 57 :midi2 63 :midi3 64 :midi4 67})
#+END_SRC

#+RESULTS:
| :chord_id | 2 | :midi1 | 57 | :midi2 | 63 | :midi3 | 64 | :midi4 | 67 |
* voice random sets and log them
** old voice-rand-set--to be refactored
#+BEGIN_SRC clojure
(defn voice-rand-set [set-type]
  (let [set (rand-nth set-type)
        voiced-set (map #(+ (rand-nth [36 48 60 72]) %) set)
        set-voicing-pair (list set voiced-set)]
    (do
      (println set-voicing-pair)
      set-voicing-pair)))

;; (voice-rand-set post_tonal_overtone.data.set_class_data/tetrachords-tn)

(defn voice-and-transpose-rand-set [set-type tn-level]
  (let [set (rand-nth set-type)
        voiced-set (map #(+ (rand-nth [36 48 60 72]) %) set)
        transposed-set (map #(+ tn-level %) voiced-set)
        set-voicing-group (list set voiced-set tn-level transposed-set)]
    (do
      (println set-voicing-group)
      (last set-voicing-group))))
#+END_SRC

#+RESULTS:
: #'user/voice-rand-set#'user/voice-and-transpose-rand-set

#+BEGIN_SRC clojure
(user/voice-rand-set tetrachords)
#+END_SRC

#+RESULTS:
|  0 |  1 |  4 |  6 |
| 36 | 49 | 76 | 66 |

#+BEGIN_SRC clojure :results output
(user/voice-and-transpose-rand-set tetrachords (rand-int 11))
#+END_SRC

#+RESULTS:
: ((0 2 5 7) (48 38 41 43) 8 (56 46 49 51))

** destructure a voiced random chord into the database
*** 
#+BEGIN_SRC clojure
(def chord-ds (user/voice-rand-set tetrachords))
#+END_SRC

#+RESULTS:
: #'user/chord-ds
#+BEGIN_SRC clojure
(let [pcs (first chord-ds) midis (second chord-ds)]
  midis)
#+END_SRC

#+RESULTS:
| 48 | 75 | 65 | 80 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds]
  )
#+END_SRC

#+RESULTS:
| 0 | 3 | 5 | 8 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
      midi1)
#+END_SRC

#+RESULTS:
: 48

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
      {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4})
#+END_SRC

#+RESULTS:
| :midi1 | 48 | :midi2 | 75 | :midi3 | 65 | :midi4 | 80 |

#+BEGIN_SRC clojure
(let [[pcs midis] chord-ds
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC

#+RESULTS:
| :chord_id | 3 | :midi1 | 48 | :midi2 | 75 | :midi3 | 65 | :midi4 | 80 |


*** insert the result of calling up a (simple) random tetrachord (with destructure)
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC

#+RESULTS:
| :chord_id | 4 | :midi1 | 48 | :midi2 | 49 | :midi3 | 63 | :midi4 | 42 |
** destructure a voiced random chord into the database
Call voice random set with tetrachord and insert the results straight
into the simple tetrachord database
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC
* expand database table columns
** create tables with timestamp columns
*** select now
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now();
#+END_SRC

#+RESULTS:
| now                           |
|-------------------------------|
| 2016-04-08 22:48:54.351379-04 |
*** look at various timezone formatting options
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select timestamp '2014-01-2 00:30:00' AS a, 
timestamp '2014-01-2 00:30:00' AT TIME ZONE 'UTC' AS b,  
timestamp '2014-01-2 00:30:00' AT TIME ZONE 'UTC' AT TIME ZONE 'PST' AS c, 
timestamp '2014-01-2 00:30:00' AT TIME ZONE 'PST' AS d

#+END_SRC

#+RESULTS:
| a                   | b                      | c                   | d                      |
|---------------------+------------------------+---------------------+------------------------|
| 2014-01-02 00:30:00 | 2014-01-01 19:30:00-05 | 2014-01-01 16:30:00 | 2014-01-02 03:30:00-05 |
*** simple timezone
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select now() AT TIME ZONE 'PST'
#+END_SRC



#+RESULTS:
| timezone                   |
|----------------------------|
| 2016-04-08 18:52:34.663367 |


#+END_SRC
*** compute intervals
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now() AS date1, current_date - 100 AS date2
#+END_SRC

#+RESULTS:
| date1                         |      date2 |
|-------------------------------+------------|
| 2016-04-08 22:37:46.972654-04 | 2015-12-30 |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now()::date + 100 AS date1, current_date - 100 AS date2
#+END_SRC

#+RESULTS:
|      date1 |      date2 |
|------------+------------|
| 2016-07-17 | 2015-12-30 |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT now()::date + 100 AS date1, current_date - INTERVAL '100 days' AS date2
#+END_SRC

#+RESULTS:
|      date1 | date2               |
|------------+---------------------|
| 2016-07-17 | 2015-12-30 00:00:00 |
*** create table with timestamp column
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE hexachord_events_stamped (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|



#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO hexachord_events_stamped (midi1, midi2, midi3, midi4, midi5, midi6)  
VALUES (60, 61, 62, 63, 64, 66)
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
SELECT * FROM hexachord_events_stamped
#+END_SRC

#+RESULTS:
| chord_id | chord_inserted             | midi1 | midi2 | midi3 | midi4 | midi5 | midi6 |
|----------+----------------------------+-------+-------+-------+-------+-------+-------|
|        1 | 2016-04-08 23:01:47.892927 |    60 |    61 |    62 |    63 |    64 |    66 |
*** create table with timestamp and setclass string
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE tetrachord_events_stamped (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
setclass text,
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int)


#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO tetrachord_events_stamped (setclass, midi1, midi2, midi3, midi4)
VALUES ('0134', 60, 61, 63, 64)
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * FROM tetrachord_events_stamped
#+END_SRC

#+RESULTS:
| chord_id | chord_inserted             | setclass | midi1 | midi2 | midi3 | midi4 |
|----------+----------------------------+----------+-------+-------+-------+-------|
|        1 | 2016-04-08 23:05:33.917363 |     0134 |    60 |    61 |    63 |    64 |
* consider how to design tables to hold all the relevant chord data
** pid, timestamp, setclass ('xxxx' format), tlevel, midis
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE trichord_events_stamped (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
setclass text,
tlevel int,
midi1 int, 
midi2 int, 
midi3 int)
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
insert into trichord_events_stamped (setclass, tlevel, midi1, midi2, midi3)
VALUES ('013', 7, 67, 68, 70)
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
insert into trichord_events_stamped (setclass, tlevel, midi1, midi2, midi3)
VALUES (013, 7, 67, 68, 70)
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * FROM trichord_events_stamped
#+END_SRC

#+RESULTS:
| chord_id | chord_inserted             | setclass | tlevel | midi1 | midi2 | midi3 |
|----------+----------------------------+----------+--------+-------+-------+-------|
|        1 | 2016-04-08 23:10:23.865445 |      013 |      7 |    67 |    68 |    70 |
|        2 | 2016-04-09 10:53:32.253909 |       13 |      7 |    67 |    68 |    70 |
** consider 'setclass', un-transposed 'midis' as list, tlevel, transposed 'midis'
#+BEGIN_SRC clojure :results output
(user/voice-and-transpose-rand-set tetrachords (rand-int 11))
#+END_SRC

#+RESULTS:
: ((0 1 5 6) (72 37 53 78) 3 (75 40 56 81))

#+BEGIN_SRC clojure
(map (fn[x]
   (if (.startsWith (str x) "(quote ") 
     (apply str "'" (rest x)) 
     x)) "'0123'")
#+END_SRC

#+RESULTS:
: (\' \0 \1 \2 \3 \')
* can't write single quoted strings from clojure?
** ask on Zulip?
** separate table for PC set
#+BEGIN_SRC clojure
(let [[pcs midis] (user/voice-rand-set tetrachords)
      [midi1 midi2 midi3 midi4] midis
      [pc1 pc2 pc3 pc4] pcs]
  (cdb1.core/insert-tetrachords<! {:midi1 midi1 :midi2 midi2 :midi3 midi3 :midi4 midi4}))
#+END_SRC
* create chord and pc tables
** tables
*** drop *chord_events
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
DROP TABLE monochord_events; 
DROP TABLE trichord_events; 
DROP TABLE tetrachord_events;
DROP TABLE pentachord_events;
DROP TABLE hexachord_events;
#+END_SRC

#+RESULTS:
| DROP TABLE |
|------------|
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
*** old create *chord_events
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE monochord_events (chord_id serial PRIMARY KEY, midi1 int);
CREATE TABLE dyad_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int);
CREATE TABLE trichord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int);
CREATE TABLE tetrachord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int, midi4 int);
CREATE TABLE pentachord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int, midi4 int, midi5 int);
CREATE TABLE hexachord_events (chord_id serial PRIMARY KEY, midi1 int, midi2 int, midi3 int, midi4 int, midi5 int, midi6 int);
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|
** create pc_ and *chord_ events
*** new create monochord_events and with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE monochord_events (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_monochord_events (
pc_id int REFERENCES monochord_events (chord_id),
pc_inserted timestamp REFERENCES monochord_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create dyad_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE dyad_events (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_dyad_events (
pc_id int REFERENCES dyad_events (chord_id),
pc_inserted timestamp REFERENCES dyad_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create trichord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE trichord_events (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_trichord_events (
pc_id int REFERENCES trichord_events (chord_id),
pc_inserted timestamp REFERENCES trichord_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create tetrachord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE tetrachord_events (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_tetrachord_events (
pc_id int REFERENCES tetrachord_events (chord_id),
pc_inserted timestamp REFERENCES tetrachord_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create pentachord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pentachord_events (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_pentachord_events (
pc_id int REFERENCES pentachord_events (chord_id),
pc_inserted timestamp REFERENCES pentachord_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
*** new create hexachord_events with timestamp 
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE hexachord_events (
chord_id serial PRIMARY KEY, 
chord_inserted timestamp default current_timestamp, 
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
CREATE TABLE pc_hexachord_events (
pc_id int REFERENCES hexachord_events (chord_id),
pc_inserted timestamp REFERENCES hexachord_events (chord_inserted),
midi1 int, 
midi2 int, 
midi3 int, 
midi4 int, 
midi5 int, 
midi6 int)

#+END_SRC
* create tables for static pc-sets a la Forte
** drops
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
drop table trichords;
drop table tetrachords;
drop table pentachords;
drop table hexachords;
#+END_SRC

#+RESULTS:
| DROP TABLE |
|------------|
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |

** table design with a default of 0 for pc1
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
create table trichords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int);
create table tetrachords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int, pc4 int);
create table pentachords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int, pc4 int, pc5 int);
create table hexachords (set_id serial primary key, comment text, pc1 int default 0, pc2 int, pc3 int, pc4 int, pc5 int, pc6 int);
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
** insert into
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO trichords (pc2, pc3) VALUES (1, 2)
#+END_SRC
** fix
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO tetrachords (midi2, midi3, midi4) VALUES (0, 1, 2, 3)
#+END_SRC
** fix
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO pentachords (midi1, midi2, midi3, midi4, midi5) VALUES (0, 1, 2, 3, 4)
#+END_SRC
** fix
#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
INSERT INTO hexachords (midi1, midi2, midi3, midi4, midi5, midi6) VALUES (0, 1, 2, 3, 4, 5)
#+END_SRC
* use korma for db interactions
** use korma.db to 'defdb' a connection to postgres
#+BEGIN_SRC clojure
(use 'korma.db)

(defdb prod (postgres {:db "heroku_psql_tutorial"
                       :user "a"
                       :host "localhost"
                       :port "5432"
                       :delimiters ""}))
#+END_SRC

#+RESULTS:
: nil{:pool #delay[{:status :pending, :val nil} 0x5b7acf94], :options {:naming {:keys #function[clojure.core/identity], :fields #function[clojure.core/identity]}, :delimiters [nil nil], :alias-delimiter " AS ", :subprotocol "postgresql"}}

- declare your entities before defining?
#+BEGIN_SRC clojure
(declare trichord-sets ;trichord-voicings 
)
#+END_SRC
** entities
*** --trichords with default pc1 zero field
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity trichord-sets
  (pk :set_id)
  (table :trichords)
  (entity-fields :pc1 :pc2 :pc3))
#+END_SRC

#+RESULTS:
: #'user/trichord-sets
*** trichords entity without default pc1 zero field
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity trichord-sets
  (pk :set_id)
  (table :trichords)
  (entity-fields :pc2 :pc3))
#+END_SRC

#+RESULTS:
: #'user/trichord-sets
*** 
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity tetrachord-sets
  (pk :set_id)
  (table :tetrachords)
  (entity-fields :pc1 :pc2 :pc3 :pc4))
#+END_SRC

#+RESULTS:
: #'user/tetrachord-sets

*** 
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity pentachord-sets
  (pk :set_id)
  (table :pentachords)
  (entity-fields :pc1 :pc2 :pc3 :pc4 :pc5))
#+END_SRC

#+RESULTS:
: #'user/pentachord-sets

*** 
#+BEGIN_SRC clojure
; (use 'korma.core)
(defentity hexachord-sets
  (pk :set_id)
  (table :hexachords)
  (entity-fields :pc1 :pc2 :pc3 :pc4 :pc5 :pc6))
#+END_SRC

#+RESULTS:
: #'user/hexachord-sets

** korma insert into the trichord entity
#+BEGIN_SRC clojure
(insert trichord-sets (values {:pc2 1 :pc3 2}))
#+END_SRC

#+RESULTS:
| :set_id | 1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 |

#+BEGIN_SRC clojure
(insert trichord-sets (values {:pc2 1 :pc3 3}))
#+END_SRC

#+RESULTS:
| :set_id | 2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 |



#+BEGIN_SRC clojure
(insert trichord-sets (values {:pc1 0 :pc2 1 :pc3 4}))
#+END_SRC

#+RESULTS:
| :set_id | 3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 |
* destructing and 'for' sequence
** trying to destructure trichord var
#+BEGIN_SRC clojure :results output
(println (count trichords)
         (count trichords-tn))
#+END_SRC

#+RESULTS:
: 12 19

#+BEGIN_SRC clojure
(first trichords)
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |

#+BEGIN_SRC clojure

#+END_SRC
** using 'for' sequence comprehensions
#+BEGIN_SRC clojure
(for [zero [0 12 24]
      one [1 13 25]
      three [3 15 27]]
       [zero one three])
#+END_SRC

#+RESULTS:
|  0 |  1 |  3 |
|  0 |  1 | 15 |
|  0 |  1 | 27 |
|  0 | 13 |  3 |
|  0 | 13 | 15 |
|  0 | 13 | 27 |
|  0 | 25 |  3 |
|  0 | 25 | 15 |
|  0 | 25 | 27 |
| 12 |  1 |  3 |
| 12 |  1 | 15 |
| 12 |  1 | 27 |
| 12 | 13 |  3 |
| 12 | 13 | 15 |
| 12 | 13 | 27 |
| 12 | 25 |  3 |
| 12 | 25 | 15 |
| 12 | 25 | 27 |
| 24 |  1 |  3 |
| 24 |  1 | 15 |
| 24 |  1 | 27 |
| 24 | 13 |  3 |
| 24 | 13 | 15 |
| 24 | 13 | 27 |
| 24 | 25 |  3 |
| 24 | 25 | 15 |
| 24 | 25 | 27 |

#+BEGIN_SRC clojure
(count (for [zero [0 12 24]
      one [1 13 25]
      three [3 15 27]]
       [zero one three]))
#+END_SRC

#+BEGIN_SRC clojure
;; (for [pcset [[0 1 2] [0 1 3]]
;;       n [0 12 24 36 48 60]]
;;   (map #(+ n pcset) pcset))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC clojure
(map #(+ 2 %) [0 1 2])
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 |

#+BEGIN_SRC clojure
(for [n (range 3)]
  (map #(+ n %) [0 1 2]))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 1 | 2 | 3 |
| 2 | 3 | 4 |

#+BEGIN_SRC clojure
(for [n (range 3)
      pcset [[0 1 2] [0 1 3]]]
  (map #(+ n %) pcset))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 0 | 1 | 3 |
| 1 | 2 | 3 |
| 1 | 2 | 4 |
| 2 | 3 | 4 |
| 2 | 3 | 5 |

#+BEGIN_SRC clojure
(for [pcset [[0 1 2] [0 1 3]]
      n (range 3)]
  (map #(+ n %) pcset))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 1 | 2 | 3 |
| 2 | 3 | 4 |
| 0 | 1 | 3 |
| 1 | 2 | 4 |
| 2 | 3 | 5 |

#+BEGIN_SRC clojure
(for [pcset [[0 1 2] [0 1 3]]
      
      n (range 3)]
  (map #(+ n %) pcset))
#+END_SRC
** for loop and destructure pcs from trichord sets
#+BEGIN_SRC clojure
(for [set trichords]
  (let [[a b c] set]
    c))
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 | 5 | 6 | 4 | 5 | 6 | 7 | 6 | 7 | 8 |

#+BEGIN_SRC clojure
(for [set trichords]
  (let [[a b c] set]
    {:a a :b b :c c}))
#+END_SRC

#+RESULTS:
| :a | 0 | :b | 1 | :c | 2 |
| :a | 0 | :b | 1 | :c | 3 |
| :a | 0 | :b | 1 | :c | 4 |
| :a | 0 | :b | 1 | :c | 5 |
| :a | 0 | :b | 1 | :c | 6 |
| :a | 0 | :b | 2 | :c | 4 |
| :a | 0 | :b | 2 | :c | 5 |
| :a | 0 | :b | 2 | :c | 6 |
| :a | 0 | :b | 2 | :c | 7 |
| :a | 0 | :b | 3 | :c | 6 |
| :a | 0 | :b | 3 | :c | 7 |
| :a | 0 | :b | 4 | :c | 8 |
* loop over pc_set vars and insert into set entity
** trichords
#+BEGIN_SRC clojure
(for [set trichords]
  (let [[a b c] set]
    (insert trichord-sets (values {:pc1 a :pc2 b :pc3 c}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 6 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 5 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 6 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 7 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 6 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 7 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 4 | :pc3 | 8 |

| 2 | 3 | 4 | 5 | 6 | 4 | 5 | 6 | 7 | 6 | 7 | 8 |

#+BEGIN_SRC sql :engine postgresql :database heroku_psql_tutorial
select * from trichords;
#+END_SRC

#+RESULTS:
| set_id | comment | pc1 | pc2 | pc3 |
|--------+---------+-----+-----+-----|
|      1 |         |   0 |   1 |   2 |
|      2 |         |   0 |   1 |   3 |
|      3 |         |   0 |   1 |   4 |
|      4 |         |   0 |   1 |   5 |
|      5 |         |   0 |   1 |   6 |
|      6 |         |   0 |   2 |   4 |
|      7 |         |   0 |   2 |   5 |
|      8 |         |   0 |   2 |   6 |
|      9 |         |   0 |   2 |   7 |
|     10 |         |   0 |   3 |   6 |
|     11 |         |   0 |   3 |   7 |
|     12 |         |   0 |   4 |   8 |
** tetrachords
#+BEGIN_SRC clojure
(for [set tetrachords]
  (let [[a b c d] set]
    (insert tetrachord-sets (values {:pc1 a :pc2 b :pc3 c :pc4 d}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 7 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 | :pc4 | 6 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 6 | :pc4 | 7 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 6 |
| :set_id | 13 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 |
| :set_id | 14 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 7 |
| :set_id | 15 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 7 |
| :set_id | 16 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 |
| :set_id | 17 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 | :pc4 | 7 |
| :set_id | 18 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 4 | :pc4 | 7 |
| :set_id | 19 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 7 |
| :set_id | 20 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 8 |
| :set_id | 21 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 5 | :pc4 | 8 |
| :set_id | 22 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 |
| :set_id | 23 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 7 |
| :set_id | 24 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 5 | :pc4 | 7 |
| :set_id | 25 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 8 |
| :set_id | 26 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 6 | :pc4 | 8 |
| :set_id | 27 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 5 | :pc4 | 8 |
| :set_id | 28 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 5 | :pc4 | 8 |
| :set_id | 29 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 6 | :pc4 | 9 |
** pentachords
#+BEGIN_SRC clojure
(for [set pentachords]
  (let [[a b c d e] set]
    (insert pentachord-sets (values {:pc1 a :pc2 b :pc3 c :pc4 d :pc5 e}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 7 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 | :pc5 | 7 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 |
| :set_id | 13 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 8 |
| :set_id | 14 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 15 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 16 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 |
| :set_id | 17 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 8 |
| :set_id | 18 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 19 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 7 |
| :set_id | 20 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 7 | :pc5 | 8 |
| :set_id | 21 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 22 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 7 | :pc5 | 8 |
| :set_id | 23 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 24 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 |
| :set_id | 25 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 26 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 27 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 28 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 29 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 30 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 31 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 9 |
| :set_id | 32 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 | :pc5 | 9 |
| :set_id | 33 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 | :pc5 | 8 |
| :set_id | 34 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 | :pc5 | 9 |
| :set_id | 35 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 7 | :pc5 | 9 |
| :set_id | 36 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 7 |
| :set_id | 37 | :comment | nil | :pc1 | 0 | :pc2 | 3 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 |
| :set_id | 38 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 8 |
** hexachords
#+BEGIN_SRC clojure
(for [set hexachords]
  (let [[a b c d e f] set]
    (insert hexachord-sets (values {:pc1 a :pc2 b :pc3 c :pc4 d :pc5 e :pc6 f}))))
#+END_SRC

#+RESULTS:
| :set_id |  1 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  5 |
| :set_id |  2 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  6 |
| :set_id |  3 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 | :pc6 |  6 |
| :set_id |  4 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 | :pc6 |  6 |
| :set_id |  5 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 | :pc6 |  7 |
| :set_id |  6 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 | :pc6 |  7 |
| :set_id |  7 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 6 | :pc5 | 7 | :pc6 |  8 |
| :set_id |  8 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  7 |
| :set_id |  9 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 | :pc6 |  7 |
| :set_id | 10 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  7 |
| :set_id | 11 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 | :pc6 |  7 |
| :set_id | 12 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 | :pc6 |  7 |
| :set_id | 13 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  7 |
| :set_id | 14 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 15 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 16 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 17 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 18 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 19 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 20 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 5 | :pc5 | 8 | :pc6 |  9 |
| :set_id | 21 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 22 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 23 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 24 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 25 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 26 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 27 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 28 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 29 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 8 | :pc6 |  9 |
| :set_id | 30 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 6 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 31 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 8 | :pc6 |  9 |
| :set_id | 32 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 33 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 34 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 35 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 4 | :pc4 | 6 | :pc5 | 8 | :pc6 | 10 |
| :set_id | 36 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  7 |
| :set_id | 37 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 4 | :pc6 |  8 |
| :set_id | 38 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 7 | :pc6 |  8 |
| :set_id | 39 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 40 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 5 | :pc6 |  8 |
| :set_id | 41 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 42 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 3 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 43 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 | :pc6 |  8 |
| :set_id | 44 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 45 | :comment | nil | :pc1 | 0 | :pc2 | 2 | :pc3 | 3 | :pc4 | 4 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 46 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 6 | :pc6 |  9 |
| :set_id | 47 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 4 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 48 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 2 | :pc4 | 5 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 49 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 3 | :pc4 | 4 | :pc5 | 7 | :pc6 |  9 |
| :set_id | 50 | :comment | nil | :pc1 | 0 | :pc2 | 1 | :pc3 | 4 | :pc4 | 6 | :pc5 | 7 | :pc6 |  9 |
* create voicings versions of pc_sets
** 
#+BEGIN_SRC clojure
(for [pcset trichords
      n (range 12)]
  (map #(+ n %) pcset))
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 |
|  1 |  2 |  3 |
|  2 |  3 |  4 |
|  3 |  4 |  5 |
|  4 |  5 |  6 |
|  5 |  6 |  7 |
|  6 |  7 |  8 |
|  7 |  8 |  9 |
|  8 |  9 | 10 |
|  9 | 10 | 11 |
| 10 | 11 | 12 |
| 11 | 12 | 13 |
|  0 |  1 |  3 |
|  1 |  2 |  4 |
|  2 |  3 |  5 |
|  3 |  4 |  6 |
|  4 |  5 |  7 |
|  5 |  6 |  8 |
|  6 |  7 |  9 |
|  7 |  8 | 10 |
|  8 |  9 | 11 |
|  9 | 10 | 12 |
| 10 | 11 | 13 |
| 11 | 12 | 14 |
|  0 |  1 |  4 |
|  1 |  2 |  5 |
|  2 |  3 |  6 |
|  3 |  4 |  7 |
|  4 |  5 |  8 |
|  5 |  6 |  9 |
|  6 |  7 | 10 |
|  7 |  8 | 11 |
|  8 |  9 | 12 |
|  9 | 10 | 13 |
| 10 | 11 | 14 |
| 11 | 12 | 15 |
|  0 |  1 |  5 |
|  1 |  2 |  6 |
|  2 |  3 |  7 |
|  3 |  4 |  8 |
|  4 |  5 |  9 |
|  5 |  6 | 10 |
|  6 |  7 | 11 |
|  7 |  8 | 12 |
|  8 |  9 | 13 |
|  9 | 10 | 14 |
| 10 | 11 | 15 |
| 11 | 12 | 16 |
|  0 |  1 |  6 |
|  1 |  2 |  7 |
|  2 |  3 |  8 |
|  3 |  4 |  9 |
|  4 |  5 | 10 |
|  5 |  6 | 11 |
|  6 |  7 | 12 |
|  7 |  8 | 13 |
|  8 |  9 | 14 |
|  9 | 10 | 15 |
| 10 | 11 | 16 |
| 11 | 12 | 17 |
|  0 |  2 |  4 |
|  1 |  3 |  5 |
|  2 |  4 |  6 |
|  3 |  5 |  7 |
|  4 |  6 |  8 |
|  5 |  7 |  9 |
|  6 |  8 | 10 |
|  7 |  9 | 11 |
|  8 | 10 | 12 |
|  9 | 11 | 13 |
| 10 | 12 | 14 |
| 11 | 13 | 15 |
|  0 |  2 |  5 |
|  1 |  3 |  6 |
|  2 |  4 |  7 |
|  3 |  5 |  8 |
|  4 |  6 |  9 |
|  5 |  7 | 10 |
|  6 |  8 | 11 |
|  7 |  9 | 12 |
|  8 | 10 | 13 |
|  9 | 11 | 14 |
| 10 | 12 | 15 |
| 11 | 13 | 16 |
|  0 |  2 |  6 |
|  1 |  3 |  7 |
|  2 |  4 |  8 |
|  3 |  5 |  9 |
|  4 |  6 | 10 |
|  5 |  7 | 11 |
|  6 |  8 | 12 |
|  7 |  9 | 13 |
|  8 | 10 | 14 |
|  9 | 11 | 15 |
| 10 | 12 | 16 |
| 11 | 13 | 17 |
|  0 |  2 |  7 |
|  1 |  3 |  8 |
|  2 |  4 |  9 |
|  3 |  5 | 10 |
|  4 |  6 | 11 |
|  5 |  7 | 12 |
|  6 |  8 | 13 |
|  7 |  9 | 14 |
|  8 | 10 | 15 |
|  9 | 11 | 16 |
| 10 | 12 | 17 |
| 11 | 13 | 18 |
|  0 |  3 |  6 |
|  1 |  4 |  7 |
|  2 |  5 |  8 |
|  3 |  6 |  9 |
|  4 |  7 | 10 |
|  5 |  8 | 11 |
|  6 |  9 | 12 |
|  7 | 10 | 13 |
|  8 | 11 | 14 |
|  9 | 12 | 15 |
| 10 | 13 | 16 |
| 11 | 14 | 17 |
|  0 |  3 |  7 |
|  1 |  4 |  8 |
|  2 |  5 |  9 |
|  3 |  6 | 10 |
|  4 |  7 | 11 |
|  5 |  8 | 12 |
|  6 |  9 | 13 |
|  7 | 10 | 14 |
|  8 | 11 | 15 |
|  9 | 12 | 16 |
| 10 | 13 | 17 |
| 11 | 14 | 18 |
|  0 |  4 |  8 |
|  1 |  5 |  9 |
|  2 |  6 | 10 |
|  3 |  7 | 11 |
|  4 |  8 | 12 |
|  5 |  9 | 13 |
|  6 | 10 | 14 |
|  7 | 11 | 15 |
|  8 | 12 | 16 |
|  9 | 13 | 17 |
| 10 | 14 | 18 |
| 11 | 15 | 19 |
** 
#+BEGIN_SRC clojure
(def trichord-transpositions-plus12 
(for [pcset trichords
      n (range 12)]
  (map #(+ n %) pcset)))
#+END_SRC

#+RESULTS:
: #'user/trichord-transpositions-plus12

#+BEGIN_SRC clojure
(rand-nth trichord-transpositions-plus12)
#+END_SRC

#+RESULTS:
| 5 | 8 | 11 |

#+BEGIN_SRC clojure
(for [pc [0 1 2]
      n [0 12 24]]
(+ pc n))
  
#+END_SRC

#+RESULTS:
| 0 | 12 | 24 | 1 | 13 | 25 | 2 | 14 | 26 |

#+BEGIN_SRC clojure
(for [n [0 12 24]
      pc [[0 1 2]]]
  (map #(+ n %) pc))
  
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 |
| 12 | 13 | 14 |
| 24 | 25 | 26 |

#+BEGIN_SRC clojure
(for [a [[0 1 2] [0 1 3]]]
  (for [n a] a))
#+END_SRC

#+RESULTS:
| (0 1 2) | (0 1 2) | (0 1 2) |
| (0 1 3) | (0 1 3) | (0 1 3) |

#+BEGIN_SRC clojure
(for [a [[0 1 2] [0 1 3]]]
  (for [n a] a))
#+END_SRC

add to x the result of multiplying n by 12, where n ranges from 1 to 5

#+BEGIN_SRC clojure
(partition 9 (for [x (range 12)
      n [0 12 24 36 48 60 72 84 96]]
(+ x n)))
#+END_SRC

#+RESULTS:
|  0 | 12 | 24 | 36 | 48 | 60 | 72 | 84 |  96 |
|  1 | 13 | 25 | 37 | 49 | 61 | 73 | 85 |  97 |
|  2 | 14 | 26 | 38 | 50 | 62 | 74 | 86 |  98 |
|  3 | 15 | 27 | 39 | 51 | 63 | 75 | 87 |  99 |
|  4 | 16 | 28 | 40 | 52 | 64 | 76 | 88 | 100 |
|  5 | 17 | 29 | 41 | 53 | 65 | 77 | 89 | 101 |
|  6 | 18 | 30 | 42 | 54 | 66 | 78 | 90 | 102 |
|  7 | 19 | 31 | 43 | 55 | 67 | 79 | 91 | 103 |
|  8 | 20 | 32 | 44 | 56 | 68 | 80 | 92 | 104 |
|  9 | 21 | 33 | 45 | 57 | 69 | 81 | 93 | 105 |
| 10 | 22 | 34 | 46 | 58 | 70 | 82 | 94 | 106 |
| 11 | 23 | 35 | 47 | 59 | 71 | 83 | 95 | 107 |
* play and record
** use overtone
*** require and prefix overtone and korma functions
#+BEGIN_SRC clojure
(require '[overtone.live :as o]
         '[korma.core :as k])
#+END_SRC

#+RESULTS:
: nil
*** simply 'use sampled-piano and live
This is a blocking call--can you put it on a thread to execute behind
the scenes and not lock up the repl?
#+BEGIN_SRC clojure
(use 'overtone.live)
(use 'overtone.inst.sampled-piano)
#+END_SRC

#+RESULTS:
: nil

** make sound, import sound, record sound
*** play piano chords using doseq and sampled-piano
  #+BEGIN_SRC clojure :session getting-started :tangle yes
(defn play-piano-chord [a-chord]
        (doseq [note a-chord] (sampled-piano note)))


 #+END_SRC

  #+RESULTS:
  : #'user/play-piano-chordnil
#+BEGIN_SRC clojure
(play-piano-chord [60 64 67])
#+END_SRC

#+RESULTS:
: nil

*** use sample to load a sample


  #+RESULTS:
  : #'user/floot



#+RESULTS:
: overtone.samples.freesound.FreesoundSample

#+BEGIN_SRC clojure
(def pang (sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/pang-short.wav"))
#+END_SRC

#+RESULTS:
: #'user/pang

#+BEGIN_SRC clojure
(type pang)
#+END_SRC

#+RESULTS:
: overtone.sc.sample.PlayableSample
*** use load-sample to load a sample into a buffer--whaddya do with a buffer?
#+BEGIN_SRC clojure
(def pang-buf (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/pang-short.wav"))
#+END_SRC

#+RESULTS:
: #'user/pang-buf

#+BEGIN_SRC clojure
(type pang-buf)
#+END_SRC

#+RESULTS:
: overtone.sc.sample.Sample

#+BEGIN_SRC clojure
(defsynth reverb-on-left []
  (let [dry (play-buf 1 pang-buf)
    wet (free-verb dry 1)]
    (out 0 [wet dry])))

#+END_SRC

#+RESULTS:
: #<synth: reverb-on-left>

#+BEGIN_SRC clojure
(reverb-on-left)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/reverb-on-left 42>
*** make a recording of some played sound
#+BEGIN_SRC clojure
(play-piano-chord (range 48 72 5))
;; (48 53 58 63 68)
(recording-start "~/Desktop/five-fourths.wav")
;; make some noise. i.e.

;; stop recording
#+END_SRC

#+RESULTS:
: nil:recording-started

#+BEGIN_SRC clojure
(recording-stop)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/five-fourths.wav
*** load recording back as a playable-sample (and play)
#+BEGIN_SRC clojure
(def fivefourths (sample "~/Desktop/five-fourths.wav"))
#+END_SRC
#+RESULTS:
: #'user/fivefourths

#+BEGIN_SRC clojure
(fivefourths)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.sc.saddd/stereo-player 81>
*** load recording back into a buffer with load-sample
#+BEGIN_SRC clojure
(def fivefourthss (load-sample "~/Desktop/five-fourths.wav"))
#+END_SRC

#+RESULTS:
: #'user/fivefourthss

#+END_SRC
*** save sound in a buffer into a file
#+BEGIN_SRC clojure
(buffer-save b "~/Desktop/bong.wav") 
#+END_SRC
** timing
*** sleep a thread to create an execution delay
#+BEGIN_SRC clojure
(Thread/sleep 1000)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure :results output
(time (let [a (range 1e7)]
              (last a)))
#+END_SRC

#+RESULTS:
: "Elapsed time: 1099.191 msecs"
*** make a recording using Thread sleeping
#+BEGIN_SRC clojure

;; (48 53 58 63 68)
(recording-start "~/Desktop/five-fourths.wav")
;; make some noise. i.e.

;; stop recording
#+END_SRC

#+RESULTS:
: :recording-started

#+BEGIN_SRC clojure
(do (Thread/sleep 3000) (play-piano-chord (range 48 72 5)))
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(recording-stop)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/five-fourths.wav
*** try to play buffer back from an offset
**** calculate offset for 1.5 secs
#+BEGIN_SRC clojure
(* 44100 1.5)
#+END_SRC

#+RESULTS:
: 66150.0
**** a play-buf ugen
#+BEGIN_SRC clojure
(play-buf 1 fivefourthss)
#+END_SRC

#+RESULTS:
: #<sc-ugen: play-buf:ar [0]>
**** a synth to "play" a play-buf ugen
#+BEGIN_SRC clojure
(defsynth foths [] (out 0 [my_fourths_playbuffer]))
(foths)
#+END_SRC

#+RESULTS:
: #<synth: foths>#<synth-node[loading]: user/foths 127>
**** convenient function for playing a buffer
#+BEGIN_SRC clojure
(mono-partial-player 92 )
#+END_SRC

#+BEGIN_SRC clojure
;; deprecated?
(mono-player 92)
#+END_SRC
*** use freesound samples in buffers
**** load a sample into a buffer and print associated info
#+BEGIN_SRC clojure
(def floot (freesound 154237))
(floot)
#+END_SRC

#+RESULTS:
: #'user/floot#<synth-node[loading]: overtoddd/stereo-partial-player 470>
**** getting info from freesound samples--:filesize 775361 :duration 4.38873
#+BEGIN_SRC clojure
(freesound-info 154237)
#+END_SRC

:analysis_frames https://www.freesound.org/data/analysis/154/154237_2626346_frames.json
:duration 4.38873
:filesize 775361
:bitrate 1380

#+RESULTS:
| :description | This is an  Instrumental sample of a Transverse-Flute playing an C in the 4th Octave. The attack and sustain of the note is Tenuto and Non-Vibrato. The tuning frequency (concert pitch) used is 442 and the dynamic intention is of  mezzoforte. This sample belongs to a Multisample pack\r\n\r\nOrchestral Instrument: Transverse-Flute\r\nInstrument: Aerophone\r\nAerophone: Woodwind\r\nNote: C\r\nOctave: 4\r\nConcert Pitch: 442Hz\r\nDynamic: mezzoforte\r\nAttack: Tenuto\r\nSustain: Non-Vibrato\r\nMicrophone: Zoom-H2N\r\nMicrophone Setup: XY |

| :samplerate | 44100.0 |

#+BEGIN_SRC clojure
(for [[a b] (freesound-info 154237)]
            (println a b))
:description This is an  Instrumental sample of a Transverse-Flute playing an C in the 4th Octave. The attack and sustain of the note is Tenuto and Non-Vibrato. The tuning frequency (concert pitch) used is 442 and the dynamic intention is of  mezzoforte. This sample belongs to a Multisample pack

Orchestral Instrument: Transverse-Flute
Instrument: Aerophone
Aerophone: Woodwind
Note: C
Octave: 4
Concert Pitch: 442Hz
Dynamic: mezzoforte
Attack: Tenuto
Sustain: Non-Vibrato
Microphone: Zoom-H2N
Microphone Setup: XY
:samplerate 44100.0
:tags [flute multisample zoom-h2n non-vibrato tenuto mezzoforte c-4 woodwind aerophone transverse-flute]
:analysis_stats https://www.freesound.org/apiv2/sounds/154237/analysis/
:bookmark https://www.freesound.org/apiv2/sounds/154237/bookmark/
:previews {:preview-lq-ogg https://www.freesound.org/data/previews/154/154237_2626346-lq.ogg, :preview-lq-mp3 https://www.freesound.org/data/previews/154/154237_2626346-lq.mp3, :preview-hq-ogg https://www.freesound.org/data/previews/154/154237_2626346-hq.ogg, :preview-hq-mp3 https://www.freesound.org/data/previews/154/154237_2626346-hq.mp3}
:channels 2
:license http://creativecommons.org/licenses/by-nc/3.0/
:avg_rating 5.0
:images {:waveform_l https://www.freesound.org/data/displays/154/154237_2626346_wave_L.png, :waveform_m https://www.freesound.org/data/displays/154/154237_2626346_wave_M.png, :spectral_m https://www.freesound.org/data/displays/154/154237_2626346_spec_M.jpg, :spectral_l https://www.freesound.org/data/displays/154/154237_2626346_spec_L.jpg}
:name Transverse-Flute C-4 Tenuto Non-Vibrato
:comments https://www.freesound.org/apiv2/sounds/154237/comments/
:username Carlos_Vaquero
:type wav
:created 2012-05-03T18:01:30.369
:analysis_frames https://www.freesound.org/data/analysis/154/154237_2626346_frames.json
:duration 4.38873
:num_downloads 250
:rate https://www.freesound.org/apiv2/sounds/154237/rate/
:analysis No descriptors specified. You should indicate which descriptors you want with the 'descriptors' request parameter.
:id 154237
:comment https://www.freesound.org/apiv2/sounds/154237/comment/
:url https://www.freesound.org/people/Carlos_Vaquero/sounds/154237/
:filesize 775361
:bitrate 1380
:similar_sounds https://www.freesound.org/apiv2/sounds/154237/similar/
:num_comments 0
:bitdepth 16
:geotag nil
:download https://www.freesound.org/apiv2/sounds/154237/download/
:pack https://www.freesound.org/apiv2/packs/9548/
:num_ratings 1
#+END_SRC
**** freesound-sample num-frames
***** debug this
#+BEGIN_SRC clojure
(def fl-buf (freesound-sample 154237))

(num-frames fl-buf)

(defsynth fl-short [] (out 0 (play-buf 1 fl-buf :start-pos 96771)))
(fl-short)

(buffer-save fl-buf "~/Desktop/floots1.wav" :start-frame 96771)

(buffer-save fl-buf "~/Desktop/floots2.wav" "wav" "int16" 44100 96771)
#+END_SRC

#+BEGIN_SRC clojure
(def fl-buf (freesound-sample 154237))
#+END_SRC

#+BEGIN_SRC clojure :results output
(let [buf fl-buf]
  (println (buffer-info buf)
           (num-frames buf)
	   (buffer-id buf)))
#+END_SRC
#+RESULTS:
: #<buffer-info: 4.388730s stereo 91> 193543 91

#+RESULTS:

#+BEGIN_SRC clojure
(defsynth fl-short [] (out 0 (play-buf 1 fl-buf :start-pos 96771)))
(fl-short)
#+END_SRC

#+RESULTS:
: #<synth: fl-short>#<synth-node[loading]: user/fl-short 496>

#+BEGIN_SRC clojure
(mono-partial-player 91 :start 0.63)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtoneddd/mono-partial-player 493>
#+BEGIN_SRC clojure
(buffer-save fl-buf "~/Desktop/floots1.wav" :start-frame 96771)
#+END_SRC

#+BEGIN_SRC clojure
(buffer-save fl-buf "~/Desktop/floots2.wav" "wav" "int16" 44100 96771)
#+END_SRC

#+RESULTS:
: :buffer-saved

#+BEGIN_SRC clojure
(buffer-save  "~/Desktop/foths5.wav"
             ;; :header "wav"
             ;; :samples "int32"
             :n-frames 1000
             :start-frame 1
             )
#+END_SRC
**** load-sample a wav file from disk into a buffer
#+BEGIN_SRC clojure
(def my_fourths_playbuffer1 (load-sample "~/Desktop/five-fourths.wav"))
#+END_SRC

#+RESULTS:
: #'user/my_fourths_playbuffer1

#+BEGIN_SRC clojure :results output
(println (buffer-info my_fourths_playbuffer1)
(num-frames my_fourths_playbuffer1)
(buffer-id my_fourths_playbuffer1))
#+END_SRC

#+RESULTS:
: #<buffer-info: 8.916463s stereo 92> 393216 92
**** define a synth to play back buffer from given start-position
#+BEGIN_SRC clojure
(defsynth foths1 [] (out 0 (play-buf 1 my_fourths_playbuffer1 :start-pos 66150)))
(foths1)
#+END_SRC

#+RESULTS:
: #<synth: foths1>#<synth-node[loading]: user/foths1 132>
**** create a second ugen for buffer playback
#+BEGIN_SRC clojure
(def my_fourths_playbuffer2 (play-buf
                             :num-channels 1
                             :bufnum 92
                             :rate 1.0
			     :trigger 1.0
			     :start-pos 66510
			     :loop 0
			     :action 0))
#+END_SRC

#+RESULTS:
: #'user/my_fourths_playbuffer2

#+BEGIN_SRC clojure
(type my_fourths_playbuffer2)
#+END_SRC

#+RESULTS:
: overtone.sc.machinery.ugen.sc_ugen.SCUGen

#+BEGIN_SRC clojure
(defsynth foths2 [] (out 0 [my_fourths_playbuffer2]))
(foths2)
#+END_SRC

#+RESULTS:
: #<synth: foths2>#<synth-node[loading]: user/foths2 191>

#+BEGIN_SRC clojure :results output
(let [bf (rand-int 93)]
  (defsynth foths2 [] (out 0 (play-buf :num-channels 1 :bufnum bf)))
  (println bf)
  (foths2))


#+END_SRC

#+RESULTS:
: 68
**** writing to disk a number of frames of a buffer--buffer-save
#+BEGIN_SRC clojure
(buffer-save my_fourths_playbuffer1 "~/Desktop/foths5.wav"
             ;; :header "wav"
             ;; :samples "int32"
             :n-frames 1000
             :start-frame 1
             )
#+END_SRC

#+RESULTS:
: :buffer-saved
**** does not write the expected number of frames?
**** use :start-pos in mono-partial-player 
#+BEGIN_SRC clojure
(mono-player 92 :start-pos 366510 :loop? 0)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.sc.sample/mono-player 197>nil
**** various miscellaneous buffers
#+BEGIN_SRC clojure
(buffer? my_fourths_playbuffer1)
#+END_SRC

#+RESULTS:
: true

#+BEGIN_SRC clojure
(def my_fourths_playbuffer3 (load-sample "~/Desktop/foths3.wav"))
(buffer-id my_fourths_playbuffer3)
#+END_SRC

#+RESULTS:
: #'user/my_fourths_playbuffer399

#+BEGIN_SRC clojure :results output
(println (buffer-info my_fourths_playbuffer3)
(num-frames my_fourths_playbuffer3)
(buffer-id my_fourths_playbuffer3))
#+END_SRC

#+RESULTS:
: #<buffer-info: 8.916463s stereo 99> 393216 99
** idiomatic overtone timing functions
*** overtone.live/apply-by
overtone.live/apply-by
([ms-time f args* argseq])
  Ahead-of-schedule function appliction. Works identically to
   apply, except that it takes an additional initial argument:
   ms-time. If ms-time is in the future, function application is delayed
   until *apply-ahead* ms before that time, if ms-time is in the past
   function application is immediate.

   If you wish to apply at a specific time rather than slightly before
   it, see apply-at.

   Can be used to implement the 'temporal recursion' pattern. This is
   where a function has a call to apply-by at its tail:

   (defn foo
     [t freq]
     (at t (my-synth freq))
     (let [next-t (+ t 200)
           next-f (+ freq 100]
       (apply-by next-t #'foo [next-t next-f])))

   (foo (now) 100)

   The fn foo is written in a recursive style, yet the recursion is
   scheduled for application 200ms in the future. By passing a function
   using #'foo syntax instead of the symbole foo, when later called by
   the scheduler it will lookup based on the symbol rather than using
   the instance of the function defined earlier. This allows us to
   redefine foo whilst the temporal recursion is continuing to execute.

   Note that by using apply-by, we can schedule events to happen at
   exactly time t within the body of the fn, as the scheduled recursion
   of the fn itself happens ahead of t. apply-by is therefore typically
   used in conjunction with the at macro for scheduling SuperCollider
   server events.

   To stop an executing temporal recursion pattern, either redefine the
   function to not call itself, or use (stop).
*** overtone.live/apply-at
([ms-time f args* argseq])
  Scheduled function appliction. Works identically to apply, except
   that it takes an additional initial argument: ms-time. If ms-time is
   in the future, function application is delayed until that time, if
   ms-time is in the past function application is immediate.

   If you wish to apply slightly before specific time rather than
   exactly at it, see apply-by.

   Can be used to implement the 'temporal recursion' pattern. This is
   where a function has a call to apply-at at its tail:

   (defn foo
     [t val]
     (println val)
     (let [next-t (+ t 200)]
       (apply-at next-t #'foo [next-t (inc val)])))

   (foo (now) 0) ;=> 0, 1, 2, 3...

   The fn foo is written in a recursive style, yet the recursion is
   scheduled for application 200ms in the future. By passing a function
   using #'foo syntax instead of the symbole foo, when later called by
   the scheduler it will lookup based on the symbol rather than using
   the instance of the function defined earlier. This allows us to
   redefine foo whilst the temporal recursion is continuing to execute.

   To stop an executing temporal recursion pattern, either redefine the
   function to not call itself, or use (stop).
*** clojure.core/apply
([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args])
  Applies fn f to the argument list formed by prepending intervening
  arguments to args.
#+BEGIN_SRC clojure
(apply + 1 [2])
#+END_SRC

#+RESULTS:
: 3

*** 
#+BEGIN_SRC clojure
   (defn foo
     [t val]
     (println val)
     (let [next-t (+ t 200)]
       (apply-at next-t #'foo [next-t (inc val)])))

   (foo (now) 0)
#+END_SRC

#+RESULTS:
: #'user/foo#<ScheduledJob id: 1, created-at: Mon 10:12:26s, initial-delay: 200, desc: "Overtone delayed fn", scheduled? true>

** stop playing everything
#+BEGIN_SRC clojure
(stop)
#+END_SRC

** record and stop
#+BEGIN_SRC clojure
(defn record-and-stop [start-time duration]
  (recording-start "~/Desktop/new.wav")
  (play-piano-chord (range 48 72 5))
  (Thread/sleep duration)
  (recording-stop))
#+END_SRC

#+RESULTS:
: #'user/record-and-stop

#+BEGIN_SRC clojure
(record-and-stop (now) 4000)
#+END_SRC

#+RESULTS:
: /Users/a/Desktop/new.wav

#+BEGIN_SRC clojure
(def counter (atom 0))

@counter
#+END_SRC

#+RESULTS:
: #'user/counter0

#+BEGIN_SRC clojure
(swap! counter inc)

#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC clojure
(str "stuff" @counter ".wav")
#+END_SRC

#+RESULTS:
: stuff2.wav

#+BEGIN_SRC clojure
(str "stuff" (swap! counter inc) ".wav")
#+END_SRC

#+RESULTS:
: stuff4.wav

#+BEGIN_SRC clojure
(def sc012 [[0 1 2][1 2 3]])
#+END_SRC

#+RESULTS:
: #'user/sc012

#+BEGIN_SRC clojure
(
#+END_SRC
* collection of octaves of pcs
** 9 octaves
#+BEGIN_SRC clojure
(def zeros (vec (range 0 108 12)))
(def ones (vec (range 1 108 12)))
(def twos (vec (range 2 108 12)))
(def threes (vec (range 3 108 12)))
(def fours (vec (range 4 108 12)))
(def fives (vec (range 5 108 12)))
(def sixes (vec (range 6 108 12)))
(def sevens (vec (range 7 108 12)))
(def eights (vec (range 8 108 12)))
(def nines (vec (range 9 108 12)))
(def tens (vec (range 10 108 12)))
(def elevens (vec (range 11 108 12)))

#+END_SRC

#+RESULTS:
: #'user/zeros#'user/ones#'user/twos#'user/threes#'user/fours#'user/fives#'user/sixes#'user/sevens#'user/eights#'user/nines#'user/tens#'user/elevens

#+BEGIN_SRC clojure
(count zeros)
#+END_SRC

#+RESULTS:
: 9

#+BEGIN_SRC clojure
(count (for [a zeros b twos]  [a b]))
#+END_SRC

#+RESULTS:
: 81

#+BEGIN_SRC clojure
(count (for [a zeros b twos c threes]  [a b c]))
#+END_SRC

#+RESULTS:
: 729

#+BEGIN_SRC clojure
(count (for [a zeros b twos c threes d fours]  [a b c]))
#+END_SRC

#+RESULTS:
: 6561

** piano range 21-108
#+BEGIN_SRC clojure
(def pc0 (vec (range 24 108 12)))
(def pc1 (vec (range 25 108 12)))
(def pc2 (vec (range 26 108 12)))
(def pc3 (vec (range 27 108 12)))
(def pc4 (vec (range 28 108 12)))
(def pc5 (vec (range 29 108 12)))
(def pc6 (vec (range 30 108 12)))
(def pc7 (vec (range 31 108 12)))
(def pc8 (vec (range 32 108 12)))
(def pc9 (vec (range 21 108 12)))
(def pc10 (vec (range 22 108 12)))
(def pc11 (vec (range 23 108 12)))

#+END_SRC

#+RESULTS:
: #'user/pc0#'user/pc1#'user/pc2#'user/pc3#'user/pc4#'user/pc5#'user/pc6#'user/pc7#'user/pc8#'user/pc9#'user/pc10#'user/pc11

#+BEGIN_SRC clojure
pc11
#+END_SRC

#+RESULTS:
| 23 | 35 | 47 | 59 | 71 | 83 | 95 | 107 |

** cartesian products
#+BEGIN_SRC clojure
(for [a ["a" "b" "c"] b ["a" "b" "c"] c ["a" "b" "c"]] [a b c])
#+END_SRC

#+RESULTS:
| a | a | a |
| a | a | b |
| a | a | c |
| a | b | a |
| a | b | b |
| a | b | c |
| a | c | a |
| a | c | b |
| a | c | c |
| b | a | a |
| b | a | b |
| b | a | c |
| b | b | a |
| b | b | b |
| b | b | c |
| b | c | a |
| b | c | b |
| b | c | c |
| c | a | a |
| c | a | b |
| c | a | c |
| c | b | a |
| c | b | b |
| c | b | c |
| c | c | a |
| c | c | b |
| c | c | c |

#+BEGIN_SRC clojure
(count (for [a ["a" "b" "c"] b ["a" "b" "c"] c ["a" "b" "c"]] [a b c]))
#+END_SRC


#+RESULTS:
: 27

#+BEGIN_SRC clojure
(count trichords-tn)
#+END_SRC

#+RESULTS:
: 19

#+BEGIN_SRC clojure
(first trichords-tn)
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |

** cartesian products of 013s
#+BEGIN_SRC clojure
(count (for [a pc0
      b pc1 
      c pc3 ]
       [a b c]))
#+END_SRC

#+RESULTS:
: 343

#+BEGIN_SRC clojure
(def tris (for [a pc0
      b pc1 
      c pc3 ]
       [a b c]))
#+END_SRC

#+RESULTS:
: #'user/tris

#+BEGIN_SRC clojure
(subvec (vec tris) 0 4)
#+END_SRC

#+RESULTS:
| 24 | 25 | 27 |
| 24 | 25 | 39 |
| 24 | 25 | 51 |
| 24 | 25 | 63 |

#+BEGIN_SRC clojure
tris
#+END_SRC

#+RESULTS:
| 24 | 25 | 27 |
| 24 | 25 | 39 |
| 24 | 25 | 51 |
| 24 | 25 | 63 |
| 24 | 25 | 75 |
| 24 | 25 | 87 |
| 24 | 25 | 99 |
| 24 | 37 | 27 |
| 24 | 37 | 39 |
| 24 | 37 | 51 |
| 24 | 37 | 63 |
| 24 | 37 | 75 |
| 24 | 37 | 87 |
| 24 | 37 | 99 |
| 24 | 49 | 27 |
| 24 | 49 | 39 |
| 24 | 49 | 51 |
| 24 | 49 | 63 |
| 24 | 49 | 75 |
| 24 | 49 | 87 |
| 24 | 49 | 99 |
| 24 | 61 | 27 |
| 24 | 61 | 39 |
| 24 | 61 | 51 |
| 24 | 61 | 63 |
| 24 | 61 | 75 |
| 24 | 61 | 87 |
| 24 | 61 | 99 |
| 24 | 73 | 27 |
| 24 | 73 | 39 |
| 24 | 73 | 51 |
| 24 | 73 | 63 |
| 24 | 73 | 75 |
| 24 | 73 | 87 |
| 24 | 73 | 99 |
| 24 | 85 | 27 |
| 24 | 85 | 39 |
| 24 | 85 | 51 |
| 24 | 85 | 63 |
| 24 | 85 | 75 |
| 24 | 85 | 87 |
| 24 | 85 | 99 |
| 24 | 97 | 27 |
| 24 | 97 | 39 |
| 24 | 97 | 51 |
| 24 | 97 | 63 |
| 24 | 97 | 75 |
| 24 | 97 | 87 |
| 24 | 97 | 99 |
| 36 | 25 | 27 |
| 36 | 25 | 39 |
| 36 | 25 | 51 |
| 36 | 25 | 63 |
| 36 | 25 | 75 |
| 36 | 25 | 87 |
| 36 | 25 | 99 |
| 36 | 37 | 27 |
| 36 | 37 | 39 |
| 36 | 37 | 51 |
| 36 | 37 | 63 |
| 36 | 37 | 75 |
| 36 | 37 | 87 |
| 36 | 37 | 99 |
| 36 | 49 | 27 |
| 36 | 49 | 39 |
| 36 | 49 | 51 |
| 36 | 49 | 63 |
| 36 | 49 | 75 |
| 36 | 49 | 87 |
| 36 | 49 | 99 |
| 36 | 61 | 27 |
| 36 | 61 | 39 |
| 36 | 61 | 51 |
| 36 | 61 | 63 |
| 36 | 61 | 75 |
| 36 | 61 | 87 |
| 36 | 61 | 99 |
| 36 | 73 | 27 |
| 36 | 73 | 39 |
| 36 | 73 | 51 |
| 36 | 73 | 63 |
| 36 | 73 | 75 |
| 36 | 73 | 87 |
| 36 | 73 | 99 |
| 36 | 85 | 27 |
| 36 | 85 | 39 |
| 36 | 85 | 51 |
| 36 | 85 | 63 |
| 36 | 85 | 75 |
| 36 | 85 | 87 |
| 36 | 85 | 99 |
| 36 | 97 | 27 |
| 36 | 97 | 39 |
| 36 | 97 | 51 |
| 36 | 97 | 63 |
| 36 | 97 | 75 |
| 36 | 97 | 87 |
| 36 | 97 | 99 |
| 48 | 25 | 27 |
| 48 | 25 | 39 |
| 48 | 25 | 51 |
| 48 | 25 | 63 |
| 48 | 25 | 75 |
| 48 | 25 | 87 |
| 48 | 25 | 99 |
| 48 | 37 | 27 |
| 48 | 37 | 39 |
| 48 | 37 | 51 |
| 48 | 37 | 63 |
| 48 | 37 | 75 |
| 48 | 37 | 87 |
| 48 | 37 | 99 |
| 48 | 49 | 27 |
| 48 | 49 | 39 |
| 48 | 49 | 51 |
| 48 | 49 | 63 |
| 48 | 49 | 75 |
| 48 | 49 | 87 |
| 48 | 49 | 99 |
| 48 | 61 | 27 |
| 48 | 61 | 39 |
| 48 | 61 | 51 |
| 48 | 61 | 63 |
| 48 | 61 | 75 |
| 48 | 61 | 87 |
| 48 | 61 | 99 |
| 48 | 73 | 27 |
| 48 | 73 | 39 |
| 48 | 73 | 51 |
| 48 | 73 | 63 |
| 48 | 73 | 75 |
| 48 | 73 | 87 |
| 48 | 73 | 99 |
| 48 | 85 | 27 |
| 48 | 85 | 39 |
| 48 | 85 | 51 |
| 48 | 85 | 63 |
| 48 | 85 | 75 |
| 48 | 85 | 87 |
| 48 | 85 | 99 |
| 48 | 97 | 27 |
| 48 | 97 | 39 |
| 48 | 97 | 51 |
| 48 | 97 | 63 |
| 48 | 97 | 75 |
| 48 | 97 | 87 |
| 48 | 97 | 99 |
| 60 | 25 | 27 |
| 60 | 25 | 39 |
| 60 | 25 | 51 |
| 60 | 25 | 63 |
| 60 | 25 | 75 |
| 60 | 25 | 87 |
| 60 | 25 | 99 |
| 60 | 37 | 27 |
| 60 | 37 | 39 |
| 60 | 37 | 51 |
| 60 | 37 | 63 |
| 60 | 37 | 75 |
| 60 | 37 | 87 |
| 60 | 37 | 99 |
| 60 | 49 | 27 |
| 60 | 49 | 39 |
| 60 | 49 | 51 |
| 60 | 49 | 63 |
| 60 | 49 | 75 |
| 60 | 49 | 87 |
| 60 | 49 | 99 |
| 60 | 61 | 27 |
| 60 | 61 | 39 |
| 60 | 61 | 51 |
| 60 | 61 | 63 |
| 60 | 61 | 75 |
| 60 | 61 | 87 |
| 60 | 61 | 99 |
| 60 | 73 | 27 |
| 60 | 73 | 39 |
| 60 | 73 | 51 |
| 60 | 73 | 63 |
| 60 | 73 | 75 |
| 60 | 73 | 87 |
| 60 | 73 | 99 |
| 60 | 85 | 27 |
| 60 | 85 | 39 |
| 60 | 85 | 51 |
| 60 | 85 | 63 |
| 60 | 85 | 75 |
| 60 | 85 | 87 |
| 60 | 85 | 99 |
| 60 | 97 | 27 |
| 60 | 97 | 39 |
| 60 | 97 | 51 |
| 60 | 97 | 63 |
| 60 | 97 | 75 |
| 60 | 97 | 87 |
| 60 | 97 | 99 |
| 72 | 25 | 27 |
| 72 | 25 | 39 |
| 72 | 25 | 51 |
| 72 | 25 | 63 |
| 72 | 25 | 75 |
| 72 | 25 | 87 |
| 72 | 25 | 99 |
| 72 | 37 | 27 |
| 72 | 37 | 39 |
| 72 | 37 | 51 |
| 72 | 37 | 63 |
| 72 | 37 | 75 |
| 72 | 37 | 87 |
| 72 | 37 | 99 |
| 72 | 49 | 27 |
| 72 | 49 | 39 |
| 72 | 49 | 51 |
| 72 | 49 | 63 |
| 72 | 49 | 75 |
| 72 | 49 | 87 |
| 72 | 49 | 99 |
| 72 | 61 | 27 |
| 72 | 61 | 39 |
| 72 | 61 | 51 |
| 72 | 61 | 63 |
| 72 | 61 | 75 |
| 72 | 61 | 87 |
| 72 | 61 | 99 |
| 72 | 73 | 27 |
| 72 | 73 | 39 |
| 72 | 73 | 51 |
| 72 | 73 | 63 |
| 72 | 73 | 75 |
| 72 | 73 | 87 |
| 72 | 73 | 99 |
| 72 | 85 | 27 |
| 72 | 85 | 39 |
| 72 | 85 | 51 |
| 72 | 85 | 63 |
| 72 | 85 | 75 |
| 72 | 85 | 87 |
| 72 | 85 | 99 |
| 72 | 97 | 27 |
| 72 | 97 | 39 |
| 72 | 97 | 51 |
| 72 | 97 | 63 |
| 72 | 97 | 75 |
| 72 | 97 | 87 |
| 72 | 97 | 99 |
| 84 | 25 | 27 |
| 84 | 25 | 39 |
| 84 | 25 | 51 |
| 84 | 25 | 63 |
| 84 | 25 | 75 |
| 84 | 25 | 87 |
| 84 | 25 | 99 |
| 84 | 37 | 27 |
| 84 | 37 | 39 |
| 84 | 37 | 51 |
| 84 | 37 | 63 |
| 84 | 37 | 75 |
| 84 | 37 | 87 |
| 84 | 37 | 99 |
| 84 | 49 | 27 |
| 84 | 49 | 39 |
| 84 | 49 | 51 |
| 84 | 49 | 63 |
| 84 | 49 | 75 |
| 84 | 49 | 87 |
| 84 | 49 | 99 |
| 84 | 61 | 27 |
| 84 | 61 | 39 |
| 84 | 61 | 51 |
| 84 | 61 | 63 |
| 84 | 61 | 75 |
| 84 | 61 | 87 |
| 84 | 61 | 99 |
| 84 | 73 | 27 |
| 84 | 73 | 39 |
| 84 | 73 | 51 |
| 84 | 73 | 63 |
| 84 | 73 | 75 |
| 84 | 73 | 87 |
| 84 | 73 | 99 |
| 84 | 85 | 27 |
| 84 | 85 | 39 |
| 84 | 85 | 51 |
| 84 | 85 | 63 |
| 84 | 85 | 75 |
| 84 | 85 | 87 |
| 84 | 85 | 99 |
| 84 | 97 | 27 |
| 84 | 97 | 39 |
| 84 | 97 | 51 |
| 84 | 97 | 63 |
| 84 | 97 | 75 |
| 84 | 97 | 87 |
| 84 | 97 | 99 |
| 96 | 25 | 27 |
| 96 | 25 | 39 |
| 96 | 25 | 51 |
| 96 | 25 | 63 |
| 96 | 25 | 75 |
| 96 | 25 | 87 |
| 96 | 25 | 99 |
| 96 | 37 | 27 |
| 96 | 37 | 39 |
| 96 | 37 | 51 |
| 96 | 37 | 63 |
| 96 | 37 | 75 |
| 96 | 37 | 87 |
| 96 | 37 | 99 |
| 96 | 49 | 27 |
| 96 | 49 | 39 |
| 96 | 49 | 51 |
| 96 | 49 | 63 |
| 96 | 49 | 75 |
| 96 | 49 | 87 |
| 96 | 49 | 99 |
| 96 | 61 | 27 |
| 96 | 61 | 39 |
| 96 | 61 | 51 |
| 96 | 61 | 63 |
| 96 | 61 | 75 |
| 96 | 61 | 87 |
| 96 | 61 | 99 |
| 96 | 73 | 27 |
| 96 | 73 | 39 |
| 96 | 73 | 51 |
| 96 | 73 | 63 |
| 96 | 73 | 75 |
| 96 | 73 | 87 |
| 96 | 73 | 99 |
| 96 | 85 | 27 |
| 96 | 85 | 39 |
| 96 | 85 | 51 |
| 96 | 85 | 63 |
| 96 | 85 | 75 |
| 96 | 85 | 87 |
| 96 | 85 | 99 |
| 96 | 97 | 27 |
| 96 | 97 | 39 |
| 96 | 97 | 51 |
| 96 | 97 | 63 |
| 96 | 97 | 75 |
| 96 | 97 | 87 |
| 96 | 97 | 99 |

* make a sequencer function to play single line melodies at 60bpms

** sequencer
Note, are or how are these functions that sleep blocking??
#+BEGIN_SRC clojure
(defn sequencer [midis]
  (map #(do (Thread/sleep 1000) (sampled-piano %)) midis))
#+END_SRC

#+RESULTS:
: #'user/sequencer

#+BEGIN_SRC clojure
(sequencer [48 59])
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 67> #<synth-node(loading): overtone.inst.973/sampled-piano 68>)

#+BEGIN_SRC clojure
(sequencer (range 21 108 11))
(sequencer (range 21 108 7))
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 69> #<synth-node(live): overtone.inst.973/sampled-piano 70> #<synth-node(live): overtone.inst.973/sampled-piano 71> #<synth-node(live): overtone.inst.973/sampled-piano 72> #<synth-node(live): overtone.inst.973/sampled-piano 73> #<synth-node(live): overtone.inst.973/sampled-piano 74> #<synth-node(live): overtone.inst.973/sampled-piano 75> #<synth-node(loading): overtone.inst.973/sampled-piano 76>)

** chord-sequencer
#+BEGIN_SRC clojure
(defn chord-sequencer [midis]
  (map #(do (Thread/sleep 1000) (play-piano-chord %)) midis))
#+END_SRC

#+RESULTS:
: #'user/chord-sequencer

#+BEGIN_SRC clojure
(chord-sequencer [[24 59 74] [25 60 75]])
#+END_SRC

#+RESULTS:

** chord-sequencer-fn--HOF that takes a millisecond amt and returns a play chord fn
#+BEGIN_SRC clojure
(defn chord-sequencer-fn [ms]
  (fn [midis] (map #(do (Thread/sleep ms) (play-piano-chord %)) midis)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
((chord-sequencer-fn 2000) [[24 59 74] [25 60 75]])
#+END_SRC

#+RESULTS:


#+BEGIN_SRC clojure
(sequencer (flatten (subvec (vec tris) 10 100)))
#+END_SRC

#+RESULTS:
: '(#<synth-node(live): overtone.inst.973/sampled-piano 137> #<synth-node(live): overtone.inst.973/sampled-piano 138> #<synth-node(loading): overtone.inst.973/sampled-piano 139>)

** mapping octave requirement predicates over sets
#+BEGIN_SRC clojure
(map (fn [vov] (every? #(< % 36) vov)) [[24 36 48] [0 1 3]])
#+END_SRC

#+BEGIN_SRC clojure
(let [args [0 24 36]]
  (cond (every? #(< % 36) args) args))
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(let [args [[0 24 36] [37 38 39]]
  (cond (every? #(< % 36) args) args))
#+END_SRC

#+BEGIN_SRC clojure :results output
(for [args [[0 24 36] [37 38 39]]] (cond (every? #(> % 36) args) (println "booya")))
#+END_SRC

#+RESULTS:
: booya


Note that in org-babel results return values of 'nil' are left out of
the results block but are included in the results when same function
is called from the repl

#+BEGIN_SRC clojure
(for [args [[0 24 36] [37 38 39]]] (cond (every? #(> % 36) args) args))
#+END_SRC

#+RESULTS:
| 37 | 38 | 39 |



#+RESULTS:
| 48 | 37 | 39 |
| 48 | 37 | 51 |
| 48 | 37 | 63 |
| 48 | 37 | 75 |
| 48 | 37 | 87 |
| 48 | 37 | 99 |
| 48 | 49 | 39 |
| 48 | 49 | 51 |
| 48 | 49 | 63 |
| 48 | 49 | 75 |
| 48 | 49 | 87 |
| 48 | 49 | 99 |
| 48 | 61 | 39 |
| 48 | 61 | 51 |
| 48 | 61 | 63 |
| 48 | 61 | 75 |
| 48 | 61 | 87 |
| 48 | 61 | 99 |
| 48 | 73 | 39 |
| 48 | 73 | 51 |
| 48 | 73 | 63 |
| 48 | 73 | 75 |
| 48 | 73 | 87 |
| 48 | 73 | 99 |
| 48 | 85 | 39 |
| 48 | 85 | 51 |
| 48 | 85 | 63 |
| 48 | 85 | 75 |
| 48 | 85 | 87 |
| 48 | 85 | 99 |
| 48 | 97 | 39 |
| 48 | 97 | 51 |
| 48 | 97 | 63 |
| 48 | 97 | 75 |
| 48 | 97 | 87 |
| 48 | 97 | 99 |
| 60 | 37 | 39 |
| 60 | 37 | 51 |
| 60 | 37 | 63 |
| 60 | 37 | 75 |
| 60 | 37 | 87 |
| 60 | 37 | 99 |
| 60 | 49 | 39 |
| 60 | 49 | 51 |
| 60 | 49 | 63 |
| 60 | 49 | 75 |
| 60 | 49 | 87 |
| 60 | 49 | 99 |
| 60 | 61 | 39 |
| 60 | 61 | 51 |
| 60 | 61 | 63 |
| 60 | 61 | 75 |
| 60 | 61 | 87 |
| 60 | 61 | 99 |
| 60 | 73 | 39 |
| 60 | 73 | 51 |
| 60 | 73 | 63 |
| 60 | 73 | 75 |
| 60 | 73 | 87 |
| 60 | 73 | 99 |
| 60 | 85 | 39 |
| 60 | 85 | 51 |
| 60 | 85 | 63 |
| 60 | 85 | 75 |
| 60 | 85 | 87 |
| 60 | 85 | 99 |
| 60 | 97 | 39 |
| 60 | 97 | 51 |
| 60 | 97 | 63 |
| 60 | 97 | 75 |
| 60 | 97 | 87 |
| 60 | 97 | 99 |
| 72 | 37 | 39 |
| 72 | 37 | 51 |
| 72 | 37 | 63 |
| 72 | 37 | 75 |
| 72 | 37 | 87 |
| 72 | 37 | 99 |
| 72 | 49 | 39 |
| 72 | 49 | 51 |
| 72 | 49 | 63 |
| 72 | 49 | 75 |
| 72 | 49 | 87 |
| 72 | 49 | 99 |
| 72 | 61 | 39 |
| 72 | 61 | 51 |
| 72 | 61 | 63 |
| 72 | 61 | 75 |
| 72 | 61 | 87 |
| 72 | 61 | 99 |
| 72 | 73 | 39 |
| 72 | 73 | 51 |
| 72 | 73 | 63 |
| 72 | 73 | 75 |
| 72 | 73 | 87 |
| 72 | 73 | 99 |
| 72 | 85 | 39 |
| 72 | 85 | 51 |
| 72 | 85 | 63 |
| 72 | 85 | 75 |
| 72 | 85 | 87 |
| 72 | 85 | 99 |
| 72 | 97 | 39 |
| 72 | 97 | 51 |
| 72 | 97 | 63 |
| 72 | 97 | 75 |
| 72 | 97 | 87 |
| 72 | 97 | 99 |
| 84 | 37 | 39 |
| 84 | 37 | 51 |
| 84 | 37 | 63 |
| 84 | 37 | 75 |
| 84 | 37 | 87 |
| 84 | 37 | 99 |
| 84 | 49 | 39 |
| 84 | 49 | 51 |
| 84 | 49 | 63 |
| 84 | 49 | 75 |
| 84 | 49 | 87 |
| 84 | 49 | 99 |
| 84 | 61 | 39 |
| 84 | 61 | 51 |
| 84 | 61 | 63 |
| 84 | 61 | 75 |
| 84 | 61 | 87 |
| 84 | 61 | 99 |
| 84 | 73 | 39 |
| 84 | 73 | 51 |
| 84 | 73 | 63 |
| 84 | 73 | 75 |
| 84 | 73 | 87 |
| 84 | 73 | 99 |
| 84 | 85 | 39 |
| 84 | 85 | 51 |
| 84 | 85 | 63 |
| 84 | 85 | 75 |
| 84 | 85 | 87 |
| 84 | 85 | 99 |
| 84 | 97 | 39 |
| 84 | 97 | 51 |
| 84 | 97 | 63 |
| 84 | 97 | 75 |
| 84 | 97 | 87 |
| 84 | 97 | 99 |
| 96 | 37 | 39 |
| 96 | 37 | 51 |
| 96 | 37 | 63 |
| 96 | 37 | 75 |
| 96 | 37 | 87 |
| 96 | 37 | 99 |
| 96 | 49 | 39 |
| 96 | 49 | 51 |
| 96 | 49 | 63 |
| 96 | 49 | 75 |
| 96 | 49 | 87 |
| 96 | 49 | 99 |
| 96 | 61 | 39 |
| 96 | 61 | 51 |
| 96 | 61 | 63 |
| 96 | 61 | 75 |
| 96 | 61 | 87 |
| 96 | 61 | 99 |
| 96 | 73 | 39 |
| 96 | 73 | 51 |
| 96 | 73 | 63 |
| 96 | 73 | 75 |
| 96 | 73 | 87 |
| 96 | 73 | 99 |
| 96 | 85 | 39 |
| 96 | 85 | 51 |
| 96 | 85 | 63 |
| 96 | 85 | 75 |
| 96 | 85 | 87 |
| 96 | 85 | 99 |
| 96 | 97 | 39 |
| 96 | 97 | 51 |
| 96 | 97 | 63 |
| 96 | 97 | 75 |
| 96 | 97 | 87 |
| 96 | 97 | 99 |

** play chords that pass the octave requirement
#+BEGIN_SRC clojure
(for [args tris] (cond (every? #(> % 36) args) (chord-sequencer args)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure
(def happy-tris (for [args tris] (cond (every? #(> % 36) args) args)))
#+END_SRC

#+RESULTS:
: #'user/happy-tris

#+BEGIN_SRC clojure
(remove nil? happy-tris)
#+END_SRC

#+BEGIN_SRC clojure
(chord-sequencer happy-tris)
#+END_SRC

#+BEGIN_SRC clojure
(shuffle [0 1 2])
#+END_SRC

#+RESULTS:
| 1 | 2 | 0 |

#+BEGIN_SRC clojure
(shuffle [[0 1 2] [0 1 3] [0 1 4]])
#+END_SRC

#+RESULTS:
| 0 | 1 | 4 |
| 0 | 1 | 3 |
| 0 | 1 | 2 |

#+BEGIN_SRC clojure
(chord-sequencer (take 10 (shuffle happy-tris)))
#+END_SRC

#+RESULTS:


